<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java运行时区域</title>
    <url>/archives/cbc67548.html</url>
    <content><![CDATA[<img data-src="/archives/cbc67548/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F.png" alt="Java运行时数据区域" style="zoom:60%;">
<span id="more"></span>
<h4 id="线程私有"><a class="markdownIt-Anchor" href="#线程私有"></a> 线程私有</h4>
<h5 id="程序计数器"><a class="markdownIt-Anchor" href="#程序计数器"></a> 程序计数器</h5>
<p>当前线程执行的字节码的行号指示器。</p>
<p>唯一一个在 <code>Java</code> 虚拟机规范中没有规定任何 <code>OutOfMemoryError</code> 情况的区域。</p>
<h5 id="java-虚拟机栈"><a class="markdownIt-Anchor" href="#java-虚拟机栈"></a> <code>Java</code> 虚拟机栈</h5>
<p>每个方法在执行时都会创建一个栈帧用于存储 <strong>局部变量表、操作数栈、动态链接、方法出口</strong> 等信息。</p>
<p>异常：</p>
<ul>
<li>当线程请求的栈深度超过最大值，会抛出 <code>StackOverflowError</code> 异常；</li>
<li>栈进行动态扩展时如果无法申请到足够内存，会抛出 <code>OutOfMemoryError</code> 异常。</li>
</ul>
<p>为特定线程设置虚拟机栈大小：<code>java -Xss2M 线程</code> 。</p>
<h5 id="本地方法栈"><a class="markdownIt-Anchor" href="#本地方法栈"></a> 本地方法栈</h5>
<p>和 <code>Java</code> 虚拟机栈类似，服务于本地方法。</p>
<h4 id="线程共享"><a class="markdownIt-Anchor" href="#线程共享"></a> 线程共享</h4>
<h5 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h5>
<p>虚拟机启动时创建，用于存放对象实例，也是垃圾收集的主要区域。</p>
<p>异常：</p>
<ul>
<li>动态扩展失败，会抛出 <code>OutOfMemoryError</code> 异常。</li>
</ul>
<p>为特定程序设置堆的大小：<code>java -Xms1M -Xmx2M 程序</code>。</p>
<ul>
<li><code>Xms1M</code> - 堆的初始值</li>
<li><code>Xmx2M</code> - 堆能扩展到的最大值</li>
</ul>
<h5 id="方法区"><a class="markdownIt-Anchor" href="#方法区"></a> 方法区</h5>
<p>用于存储已被虚拟机加载的 <strong>类信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译器编译后的代码</strong> 等数据。</p>
<p>该区域的内存回收主要是针对 <strong>常量池的回收</strong> 和 <strong>类型的卸载</strong>。</p>
<p>异常：</p>
<ul>
<li>动态扩展失败，会抛出 <code>OutOfMemoryError</code> 异常。</li>
</ul>
<h5 id="运行时常量池"><a class="markdownIt-Anchor" href="#运行时常量池"></a> 运行时常量池</h5>
<p>运行时常量池是方法区的一部分。</p>
<p><code>Class</code> 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种 <strong>字面量</strong> 和 <strong>符号引用</strong>，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<h4 id="直接内存"><a class="markdownIt-Anchor" href="#直接内存"></a> 直接内存</h4>
<p>直接内存不是 <code>Java</code> 运行时数据区的一部分，也不是 <code>JVM</code> 定义的内存区域。</p>
<p><code>JDK 1.4</code> 中新加入 <code>NIO</code> 类，引入了一种基于通道（<code>Channel</code>）与缓冲区（<code>Buffer</code>）的 <code>I/O</code> 方式，它可以使用 <code>Native</code> 函数库直接分配堆外内存，然后通过一个存储在 <code>Java</code> 堆中的 <code>DirectByteBuffer</code> 对象作为这块内存的引用进行操作。这样可以在一些场景中显著提高性能，因为避免了在 <code>Java</code> 堆和 <code>Native</code> 堆中来回复制数据。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Java运行时区域</tag>
      </tags>
  </entry>
  <entry>
    <title>内存分配与回收策略</title>
    <url>/archives/b2e40618.html</url>
    <content><![CDATA[<h4 id="minor-gc-和-full-gc"><a class="markdownIt-Anchor" href="#minor-gc-和-full-gc"></a> <code>Minor GC</code> 和 <code>Full GC</code></h4>
<ul>
<li><code>Minor GC</code>：回收新生代，因为新生代对象存活时间很短，因此 <code>Minor GC</code> 会频繁执行。</li>
<li><code>Full GC</code>：回收老年代和新生代，老年代对象其存活时间长，因此 <code>Full GC</code> 很少执行，执行速度会比 <code>Minor GC</code> 慢很多。</li>
</ul>
<span id="more"></span>
<h4 id="内存分配策略"><a class="markdownIt-Anchor" href="#内存分配策略"></a> 内存分配策略</h4>
<img data-src="/archives/b2e40618/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5.png" alt="内存分配策略" style="zoom:50%;">
<ol>
<li>对象先在 <code>Eden</code> 区分配</li>
</ol>
<p>大多数情况下，对象在新生代 <code>Eden</code> 上分配，当 <code>Eden</code> 空间不够时，发起 <code>Minor GC(YGC)</code>。</p>
<ol start="2">
<li>大对象直接直接进入老年代</li>
</ol>
<p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p>
<p>因此大对象直接在老年代分配，避免在 <code>Eden</code> 和 <code>Survivor</code> 之间的大量内存复制。</p>
<ol start="3">
<li>
<p>长期存活的对象进入老年代</p>
<p>虚拟机给每个对象定义了一个对象年龄计数器。如果对象在 <code>Eden</code> 区出生并经过第一次 <code>Minor GC</code> 后仍然存活，并且能被 <code>Survior</code> 容纳的话，将被移到 <code>Survivor</code> 中，并将对象年龄设为 1。对象在 <code>Survivor</code> 中每熬过一次 <code>Minor GC</code>，年龄就加 1，当它的年龄增加到一定程度（默认为 15，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 设置），就会被移到老年代。</p>
</li>
<li>
<p>动态对象年龄判定</p>
<p>如果 <code>Survivor</code> 空间中相同年龄所有对象大小的总和大于 <code>Survivor</code> 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无需等到 <code>MaxTenuringThreshold</code> 中要求的年龄。</p>
</li>
<li>
<p>空间分配担保</p>
<p>在发生 <code>Minor GC</code> 之前，虚拟机先检查老年代最大可用的连续空间大小是否大于新生代所有对象总大小，如果条件成立的话，那么 <code>Minor GC</code> 可以确认是安全的。</p>
<p>如果不成立的话虚拟机会查看 <code>HandlePromotionFailure</code> 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间大小是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 <code>Minor GC</code>；如果小于，或者 <code>HandlePromotionFailure</code> 的值不允许冒险，那么就要进行一次 <code>Full GC</code>。</p>
</li>
</ol>
<h4 id="full-gc-触发条件"><a class="markdownIt-Anchor" href="#full-gc-触发条件"></a> <code>Full GC</code> 触发条件</h4>
<h5 id="调用-systemgc"><a class="markdownIt-Anchor" href="#调用-systemgc"></a> 调用 <code>System.gc()</code></h5>
<p>只是建议虚拟机执行 <code>Full GC</code>，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p>
<h5 id="老年代空间不足"><a class="markdownIt-Anchor" href="#老年代空间不足"></a> 老年代空间不足</h5>
<p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p>
<h5 id="空间分配担保失败"><a class="markdownIt-Anchor" href="#空间分配担保失败"></a> 空间分配担保失败</h5>
<p><code>Minor GC</code> 需要老年代的内存空间作担保，如果担保失败会执行一次 <code>Full GC</code>。</p>
]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>内存分配与回收策略</tag>
        <tag>Minor GC</tag>
        <tag>Full GC</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾收集</title>
    <url>/archives/b9ab7dc2.html</url>
    <content><![CDATA[<h4 id="判断一个对象是否可回收"><a class="markdownIt-Anchor" href="#判断一个对象是否可回收"></a> 判断一个对象是否可回收</h4>
<h5 id="引用计数法"><a class="markdownIt-Anchor" href="#引用计数法"></a> 引用计数法</h5>
<p>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p>
<p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test a = <span class="keyword">new</span> Test();</span><br><span class="line">        Test b = <span class="keyword">new</span> Test();</span><br><span class="line">        a.instance = b;</span><br><span class="line">        b.instance = a;</span><br><span class="line">        a = <span class="keyword">null</span>;</span><br><span class="line">        b = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="可达性分析"><a class="markdownIt-Anchor" href="#可达性分析"></a> 可达性分析</h5>
<p>以 <code>GC Roots</code> 为起始点进行搜索，不可达的对象可被回收。</p>
<p>可作为 <code>GC Roots</code> 的对象：</p>
<ul>
<li>虚拟机栈中局部变量表中引用的对象</li>
<li>本地方法栈中 <code>JNI</code> 中引用的对象</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中的常量引用的对象</li>
</ul>
<p><code>GC</code> 管理的区域是 <code>Java</code> 堆，虚拟机栈、方法区和本地方法栈不被 <code>GC</code> 管理，因此选用这些区域内引用的对象作为 <code>GC Roots</code>，不会被 <code>GC</code> 所回收的。</p>
<p>其中虚拟机栈和本地方法栈都是线程私有的内存区域，只要线程没有终止，就能确保它们中引用的对象的存活。</p>
<p>方法区中类静态属性引用的对象是显然存活的；常量引用的对象在当前可能存活，因此，也可能是 GC roots 的一部分。</p>
<h4 id="引用类型"><a class="markdownIt-Anchor" href="#引用类型"></a> 引用类型</h4>
<h5 id="强引用"><a class="markdownIt-Anchor" href="#强引用"></a> 强引用</h5>
<p>强引用指向的对象不会被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>
<h5 id="软引用"><a class="markdownIt-Anchor" href="#软引用"></a> 软引用</h5>
<p>软引用指向的对象在内存不够的情况下才会被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>; <span class="comment">// 使对象只被软引用关联</span></span><br></pre></td></tr></table></figure>
<h5 id="弱引用"><a class="markdownIt-Anchor" href="#弱引用"></a> 弱引用</h5>
<p>弱引用指向的对象只在下一次垃圾收集时，无论当前内存是否足够，都会被回收掉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h5 id="虚引用"><a class="markdownIt-Anchor" href="#虚引用"></a> 虚引用</h5>
<p>一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p>
<p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj, <span class="keyword">null</span>);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h4 id="垃圾收集算法"><a class="markdownIt-Anchor" href="#垃圾收集算法"></a> 垃圾收集算法</h4>
<h5 id="分代收集"><a class="markdownIt-Anchor" href="#分代收集"></a> 分代收集</h5>
<p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p>
<p>一般将堆分为新生代和老年代。</p>
<ul>
<li>新生代使用：复制算法</li>
<li>老年代使用：标记-清除或标记-整理</li>
</ul>
<h5 id="标记-清除"><a class="markdownIt-Anchor" href="#标记-清除"></a> 标记-清除</h5>
<p>主要用于老年代垃圾收集。</p>
<img data-src="/archives/b9ab7dc2/%E6%A0%87%E8%AE%B0-%E6%B8%85%E9%99%A4.png" alt="标记-清除" style="zoom:50%;">
<p>先在标记阶段检测对象是否存活，并进行标记，然后在清除阶段清除不可达对象。</p>
<p>缺点：</p>
<ul>
<li>效率低</li>
<li>产生空间碎片</li>
</ul>
<h5 id="标记-整理"><a class="markdownIt-Anchor" href="#标记-整理"></a> 标记-整理</h5>
<p>主要用于老年代垃圾收集。</p>
<img data-src="/archives/b9ab7dc2/%E6%A0%87%E8%AE%B0-%E6%95%B4%E7%90%86.png" alt="标记-整理" style="zoom:50%;">
<p>缺点：</p>
<ul>
<li>效率低</li>
</ul>
<p>优点：</p>
<ul>
<li>不会产生空间碎片</li>
</ul>
<h5 id="复制"><a class="markdownIt-Anchor" href="#复制"></a> 复制</h5>
<p>主要用于新生代垃圾收集。</p>
<img data-src="/archives/b9ab7dc2/%E5%A4%8D%E5%88%B6.png" alt="复制" style="zoom:50%;">
<p>将内存划分为大小相等的两块，每次只使用其中一块，当一块内存用完了就将存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p>
<p>缺点：</p>
<ul>
<li>可用空间只有一半</li>
</ul>
<p>现在的商业虚拟机都采用这种收集算法回收新生代，但是并不是划分为大小相等的两块，而是一块较大的 <code>Eden</code> 空间和两块较小的 <code>Survivor</code> 空间，每次使用 <code>Eden</code> 和其中一块 <code>Survivor</code>。在回收时，将 <code>Eden</code> 和 <code>Survivor</code> 中还存活着的对象全部复制到另一块 <code>Survivor</code> 上，最后清理 <code>Eden</code> 和使用过的那一块 <code>Survivor</code>。</p>
<h4 id="垃圾收集器"><a class="markdownIt-Anchor" href="#垃圾收集器"></a> 垃圾收集器</h4>
<ul>
<li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；</li>
<li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 <code>CMS</code> 和 <code>G1</code> 之外，其它垃圾收集器都是以串行的方式执行。</li>
</ul>
<img data-src="/archives/b9ab7dc2/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="垃圾收集器" style="zoom:50%;">
<h5 id="新生代垃圾收集器"><a class="markdownIt-Anchor" href="#新生代垃圾收集器"></a> 新生代垃圾收集器</h5>
<h6 id="serial"><a class="markdownIt-Anchor" href="#serial"></a> <code>Serial</code></h6>
<p>单线程垃圾收集器，以串行方式执行。</p>
<img data-src="/archives/b9ab7dc2/Serial%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="Serial收集器" style="zoom:50%;">
<h6 id="parnew"><a class="markdownIt-Anchor" href="#parnew"></a> <code>ParNew</code></h6>
<p>多线程垃圾收集器，以串行方式执行。</p>
<img data-src="/archives/b9ab7dc2/ParNew%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="ParNew收集器" style="zoom:50%;">
<h6 id="parallel-scavenge"><a class="markdownIt-Anchor" href="#parallel-scavenge"></a> <code>Parallel Scavenge</code></h6>
<p>多线程垃圾收集器，以串行方式执行。</p>
<p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为吞吐量优先收集器。</p>
<p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。</p>
<p>高吞吐量则可以高效率地利用 <code>CPU</code> 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p>
<p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p>
<h5 id="老年代牢记收集器"><a class="markdownIt-Anchor" href="#老年代牢记收集器"></a> 老年代牢记收集器</h5>
<h6 id="serial-old"><a class="markdownIt-Anchor" href="#serial-old"></a> <code>Serial Old</code></h6>
<p><code>Serial</code> 的老年代版本。</p>
<h6 id="parallel-old"><a class="markdownIt-Anchor" href="#parallel-old"></a> <code>Parallel Old</code></h6>
<p><code>Parallel Scavenges</code> 收集器的老年代版本。</p>
<h6 id="cms"><a class="markdownIt-Anchor" href="#cms"></a> <code>CMS</code></h6>
<p><code>CMS（Concurrent Mark Sweep）</code>垃圾收集分四步：</p>
<ul>
<li>初始标记：标记一下 <code>GC Roots</code> 能直接关联到的对象，速度很快，需要停顿。</li>
<li>并发标记：进行 <code>GC Roots Tracing</code> 的过程，在整个回收过程中耗时最长，不需要停顿。</li>
<li>重新标记：修正并发标记期间因用户程序运行而导致标记产生变动的对象的标记记录，需要停顿。</li>
<li>并发清除：清除不可达对象，不需要停顿。</li>
</ul>
<img data-src="/archives/b9ab7dc2/CMS%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="CMS收集器" style="zoom:50%;">
<p>缺点：</p>
<ul>
<li>
<p>导致系统吞吐量降低</p>
</li>
<li>
<p>产生空间碎片</p>
</li>
<li>
<p>可能发生 <code>Concurrent Mode Failure</code></p>
</li>
</ul>
<div class="note "><p><code>CMS</code> 在并发清除阶段，因为用户程序的执行产生的浮动垃圾得等到下一次 <code>GC</code> 时才能进行回收。</p>
<p>因为浮动垃圾的存在，需要预留一部分内存空间，如果这部分空间不足以容纳浮动垃圾，就会发生</p>
<p><code>Concurrent Mode Failure</code>，这时虚拟机将临时启用 <code>Serial Old</code> 来替代 <code>CMS</code>。</p>
</div>
<h5 id="g1-垃圾收集器"><a class="markdownIt-Anchor" href="#g1-垃圾收集器"></a> <code>G1</code> 垃圾收集器</h5>
<h4 id="gc-日志"><a class="markdownIt-Anchor" href="#gc-日志"></a> <code>GC</code> 日志</h4>
<img data-src="/archives/b9ab7dc2/GC%E6%97%A5%E5%BF%97.png" alt="GC日志" style="zoom:50%;">
<p><code>[GC</code> 和 <code>[Full GC</code> 说明的是这次垃圾收集的类型。</p>
<p>新生代垃圾收集出现 <code>STW</code> 一般是因为出现了分配担保失败之类的问题。</p>
<p><code>[DefNew</code>、<code>[Tenured</code> 表示 <code>GC</code> 发生的区域和所使用的垃圾收集器。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>垃圾收集</tag>
        <tag>可达性分析</tag>
        <tag>引用类型</tag>
        <tag>垃圾收集算法</tag>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载机制</title>
    <url>/archives/cd1d308.html</url>
    <content><![CDATA[<h4 id="类加载步骤"><a class="markdownIt-Anchor" href="#类加载步骤"></a> 类加载步骤</h4>
<p>类的生命周期：</p>
<img data-src="/archives/cd1d308/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="类的生命周期" style="zoom:50%;">
<span id="more"></span>
<h5 id="加载"><a class="markdownIt-Anchor" href="#加载"></a> 加载</h5>
<p>加载过程完成以下三件事：</p>
<ul>
<li>通过类的完全限定名称获取定义该类的二进制字节流。</li>
<li>将该字节流表示的静态存储结构转换为方法区的运行时存储结构。</li>
<li>在内存中生成一个代表该类的 Class 对象，作为方法区中该类各种数据的访问入口。</li>
</ul>
<h5 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h5>
<p>确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
<h5 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h5>
<p>准备阶段为类变量分配内存并设置初始值，使用的是方法区的内存。</p>
<p>实例变量不会在这阶段分配内存，它会在对象实例化时随着对象一起被分配在堆中。</p>
<h5 id="解析"><a class="markdownIt-Anchor" href="#解析"></a> 解析</h5>
<p>将常量池的符号引用替换为直接引用的过程。</p>
<p>其中解析过程在某些情况下可以在初始化阶段之后再开始，这是为了支持 Java 的动态绑定。</p>
<h5 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h5>
<p>初始化阶段才真正开始执行类中定义的 Java 程序代码。初始化阶段是虚拟机执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p>
<p><code>&lt;clinit&gt;()</code> 是由编译器自动收集类中所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序决定。</p>
<h4 id="类加载时机"><a class="markdownIt-Anchor" href="#类加载时机"></a> 类加载时机</h4>
<h4 id="类加载器分类"><a class="markdownIt-Anchor" href="#类加载器分类"></a> 类加载器分类</h4>
<h5 id="启动类加载器bootstrap-classloader"><a class="markdownIt-Anchor" href="#启动类加载器bootstrap-classloader"></a> 启动类加载器（<code>Bootstrap ClassLoader</code>）</h5>
<h5 id="扩展类加载器extension-classloader"><a class="markdownIt-Anchor" href="#扩展类加载器extension-classloader"></a> 扩展类加载器（<code>Extension ClassLoader</code>）</h5>
<h5 id="应用程序类加载器application-classloader"><a class="markdownIt-Anchor" href="#应用程序类加载器application-classloader"></a> 应用程序类加载器（<code>Application ClassLoader</code>）</h5>
<h4 id="双亲委派模型"><a class="markdownIt-Anchor" href="#双亲委派模型"></a> 双亲委派模型</h4>
<p>下图展示了类加载器之间的层次关系，称为双亲委派模型。</p>
<p>该模型要求除了顶层的启动类加载器外，其它的类加载器都要有自己的父类加载器。</p>
<p>这里的父子关系一般通过组合关系来实现，而不是继承关系。</p>
<img data-src="/archives/cd1d308/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png" alt="双亲委派模型" style="zoom:50%;">
<div class="note info"><p>一个类加载器首先将类加载请求转发到父类加载器，只有当父类加载器无法完成时才尝试自己加载。</p>
<p>这样做的好处：</p>
<ul>
<li>Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以<mark class="label primary">避免类的重复加载</mark>。当父加载器已经加载了该类时，子加载器就不用重新加载了。</li>
<li>防止 Java 核心类库被篡改。当有一个和 Java 核心类库中重名的类，如 <code>Object</code>，子加载器通过加该类委托给父加载器加载，最终启动类加载器会发现已经加载过 <code>Object</code>，不会重新加载 <code>Object</code>。</li>
</ul>
</div>
<p>抽象类 <code>java.lang.ClassLoader</code> 的代码片段，其中的 <code>loadClass()</code> 方法运行过程如下：先检查类是否已经加载过，如果没有则让父类加载器去加载。当父类加载器加载失败时抛出 <code>ClassNotFoundException</code>，此时尝试自己去加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The parent class loader for delegation</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>类加载机制</tag>
        <tag>双亲委派模型</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程</title>
    <url>/archives/1690d21b.html</url>
    <content><![CDATA[<p>函数式编程：通过合并现有代码来生成新功能而不是从头开始编写所有内容，我们可以更快地获得更可靠的代码。</p>
<span id="more"></span>
<p>OO（object oriented，面向对象）是抽象数据，FP（functional programming，函数式编程）是抽象行为。</p>
<p>纯粹的函数式语言在安全性方面更进一步。它强加了额外的约束，即所有数据必须是不可变的：设置一次，永不改变。<mark><strong>将值传递给函数，该函数然后生成新值但从不修改自身外部的任何东西（包括其参数或该函数范围之外的元素）</strong></mark>。</p>
<p>更好的是，“不可变对象和无副作用”范式解决了并发编程中最基本和最棘手的问题之一（当程序的某些部分同时在多个处理器上运行时）。这是可变共享状态的问题，这意味着代码的不同部分（在不同的处理器上运行）可以尝试同时修改同一块内存（谁赢了？没人知道）。<strong>如果函数永远不会修改现有值但只生成新值，则不会对内存产生争用，这是纯函数式语言的定义。</strong> 因此，经常提出纯函数式语言作为并行编程的解决方案（还有其他可行的解决方案）。</p>
<p>需要提醒大家的是，函数式语言背后有很多动机，这意味着描述它们可能会有些混淆。它通常取决于各种观点：<strong>“并行编程”，“代码可靠性”和“代码创建和库复用”</strong>。</p>
<p>通常，传递给方法的数据不同，结果不同。如果我们希望方法在调用时行为不同，该怎么做呢？结论是：只要能将代码传递给方法，我们就可以控制该方法的行为。此前，我们通过在方法中创建包含所需行为的对象，然后将该对象传递给我们想要控制的方法来完成此操作。</p>
<p>一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// functional/Strategize.java</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">approach</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soft</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">approach</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg.toLowerCase() + <span class="string">&quot;?&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unrelated</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">twice</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> msg + <span class="string">&quot; &quot;</span> + msg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategize</span> </span>&#123;</span><br><span class="line">  Strategy strategy;</span><br><span class="line">  String msg;</span><br><span class="line">  Strategize(String msg) &#123;</span><br><span class="line">    strategy = <span class="keyword">new</span> Soft(); <span class="comment">// [1] 创建包含所需行为的对象</span></span><br><span class="line">    <span class="keyword">this</span>.msg = msg;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">communicate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(strategy.approach(msg));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">changeStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Strategy[] strategies = &#123; </span><br><span class="line">      <span class="keyword">new</span> Strategy() &#123; <span class="comment">// [2] 匿名内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">approach</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> msg.toUpperCase() + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      msg -&gt; msg.substring(<span class="number">0</span>, <span class="number">5</span>), <span class="comment">// [3] Lambda 表达式</span></span><br><span class="line">      Unrelated::twice <span class="comment">// [4] 方法引用</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Strategize s = <span class="keyword">new</span> Strategize(<span class="string">&quot;Hello there&quot;</span>);</span><br><span class="line">    s.communicate();</span><br><span class="line">    <span class="keyword">for</span>(Strategy newStrategy : strategies) &#123;</span><br><span class="line">      s.changeStrategy(newStrategy); <span class="comment">// [5]</span></span><br><span class="line">      s.communicate(); <span class="comment">// [6]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * hello there?</span></span><br><span class="line"><span class="comment"> * HELLO THERE!</span></span><br><span class="line"><span class="comment"> * Hello</span></span><br><span class="line"><span class="comment"> * Hello there Hello there</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h4 id="lambda-表达式"><a class="markdownIt-Anchor" href="#lambda-表达式"></a> Lambda 表达式</h4>
<p><mark>基本语法</mark>：<code>参数 -&gt; 方法体</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(params) -&gt; expression; </span><br><span class="line">(params) -&gt; statement;</span><br><span class="line">(params) -&gt; &#123;statements&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>[1]</strong> 当只用一个参数，可以不需要括号 <code>()</code>。 然而，这是一个特例。</p>
</li>
<li>
<p><strong>[2]</strong> 正常情况使用括号 <code>()</code> 包裹参数。 为了保持一致性，也可以使用括号 <code>()</code> 包裹单个参数，虽然这种情况并不常见。</p>
</li>
<li>
<p><strong>[3]</strong> 如果没有参数，则必须使用括号 <code>()</code> 表示空参数列表。</p>
</li>
<li>
<p><strong>[4]</strong> 对于多个参数，将参数列表放在括号 <code>()</code> 中。</p>
<p>到目前为止，所有 Lambda 表达式方法体都是单行。 该表达式的结果自动成为 Lambda 表达式的返回值，在此处使用 <strong>return</strong> 关键字是非法的。 这是 Lambda 表达式缩写用于描述功能的语法的另一种方式。</p>
</li>
<li>
<p><strong>[5]</strong> 如果在 Lambda 表达式中确实需要多行，则必须将这些行放在花括号中。 在这种情况下，就需要使用 <strong>return</strong>。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ILike2</span> <span class="keyword">implements</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Like like = <span class="keyword">new</span> ILike1();</span><br><span class="line">        like.f();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> ILike2();</span><br><span class="line">        like.f();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">ILike3</span> <span class="keyword">implements</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        like = <span class="keyword">new</span> ILike3();</span><br><span class="line">        like.f();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> Like() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.f();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 用 lambda 简化</span></span><br><span class="line">        like = () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda5&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        like.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ILike1</span> <span class="keyword">implements</span> <span class="title">Like</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Overrid</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like lambda1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="方法引用"><a class="markdownIt-Anchor" href="#方法引用"></a> 方法引用</h4>
<p><mark>基本语法</mark>：<code>类名/对象名::方法名</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Callable</span> </span>&#123; <span class="comment">// [1]</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Describe</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(String msg)</span> </span>&#123; <span class="comment">// [2]</span></span><br><span class="line">    System.out.println(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferences</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name)</span> </span>&#123; <span class="comment">// [3]</span></span><br><span class="line">    System.out.println(<span class="string">&quot;Hello, &quot;</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Description</span> </span>&#123;</span><br><span class="line">    String about;</span><br><span class="line">    Description(String desc) &#123; about = desc; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">(String msg)</span> </span>&#123; <span class="comment">// [4]</span></span><br><span class="line">      System.out.println(about + <span class="string">&quot; &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assist</span><span class="params">(String msg)</span> </span>&#123; <span class="comment">// [5]</span></span><br><span class="line">      System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Describe d = <span class="keyword">new</span> Describe();</span><br><span class="line">    Callable c = d::show; <span class="comment">// [6]</span></span><br><span class="line">    c.call(<span class="string">&quot;call()&quot;</span>); <span class="comment">// [7]</span></span><br><span class="line"></span><br><span class="line">    c = MethodReferences::hello; <span class="comment">// [8]</span></span><br><span class="line">    c.call(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">    c = <span class="keyword">new</span> Description(<span class="string">&quot;valuable&quot;</span>)::help; <span class="comment">// [9]</span></span><br><span class="line">    c.call(<span class="string">&quot;information&quot;</span>);</span><br><span class="line"></span><br><span class="line">    c = Helper::assist; <span class="comment">// [10]</span></span><br><span class="line">    c.call(<span class="string">&quot;Help!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> * call()</span></span><br><span class="line"><span class="comment"> * Hello, Bob</span></span><br><span class="line"><span class="comment"> * valuable information</span></span><br><span class="line"><span class="comment"> * Help!</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h4 id="函数式接口"><a class="markdownIt-Anchor" href="#函数式接口"></a> 函数式接口</h4>
<p>每个函数式接口只包含一个抽象方法，称为函数式方法。</p>
<p>如果将<strong>方法引用</strong>或 <strong>Lambda 表达式</strong>赋值给函数式接口（类型需要匹配），Java 会适配你的赋值到目标接口。 <strong>编译器会自动包装方法引用或 Lambda 表达式到实现目标接口的类的实例中。</strong></p>
<p>在使用函数接口时，名称无关紧要——只要参数类型和返回类型相同。 Java 会将你的方法映射到接口方法。 要调用方法，可以调用接口的函数式方法名（在本例中为 <code>accept()</code>），而不是你的方法名。</p>
<p>基于 Lambda 表达式的所有不同 <strong>Function</strong> 变体的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// functional/FunctionVariants.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  Foo f;</span><br><span class="line">  Bar(Foo f) &#123; <span class="keyword">this</span>.f = f; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBaz</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  IBaz(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">this</span>.i = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LBaz</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> l;</span><br><span class="line">  LBaz(<span class="keyword">long</span> l) &#123;</span><br><span class="line">    <span class="keyword">this</span>.l = l;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBaz</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> d;</span><br><span class="line">  DBaz(<span class="keyword">double</span> d) &#123;</span><br><span class="line">    <span class="keyword">this</span>.d = d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionVariants</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Function&lt;Foo,Bar&gt; f1 = f -&gt; <span class="keyword">new</span> Bar(f);</span><br><span class="line">  <span class="keyword">static</span> IntFunction&lt;IBaz&gt; f2 = i -&gt; <span class="keyword">new</span> IBaz(i);</span><br><span class="line">  <span class="keyword">static</span> LongFunction&lt;LBaz&gt; f3 = l -&gt; <span class="keyword">new</span> LBaz(l);</span><br><span class="line">  <span class="keyword">static</span> DoubleFunction&lt;DBaz&gt; f4 = d -&gt; <span class="keyword">new</span> DBaz(d);</span><br><span class="line">  <span class="keyword">static</span> ToIntFunction&lt;IBaz&gt; f5 = ib -&gt; ib.i;</span><br><span class="line">  <span class="keyword">static</span> ToLongFunction&lt;LBaz&gt; f6 = lb -&gt; lb.l;</span><br><span class="line">  <span class="keyword">static</span> ToDoubleFunction&lt;DBaz&gt; f7 = db -&gt; db.d;</span><br><span class="line">  <span class="keyword">static</span> IntToLongFunction f8 = i -&gt; i;</span><br><span class="line">  <span class="keyword">static</span> IntToDoubleFunction f9 = i -&gt; i;</span><br><span class="line">  <span class="keyword">static</span> LongToIntFunction f10 = l -&gt; (<span class="keyword">int</span>)l;</span><br><span class="line">  <span class="keyword">static</span> LongToDoubleFunction f11 = l -&gt; l;</span><br><span class="line">  <span class="keyword">static</span> DoubleToIntFunction f12 = d -&gt; (<span class="keyword">int</span>)d;</span><br><span class="line">  <span class="keyword">static</span> DoubleToLongFunction f13 = d -&gt; (<span class="keyword">long</span>)d;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Bar b = f1.apply(<span class="keyword">new</span> Foo());</span><br><span class="line">    IBaz ib = f2.apply(<span class="number">11</span>);</span><br><span class="line">    LBaz lb = f3.apply(<span class="number">11</span>);</span><br><span class="line">    DBaz db = f4.apply(<span class="number">11</span>);</span><br><span class="line">    <span class="keyword">int</span> i = f5.applyAsInt(ib);</span><br><span class="line">    <span class="keyword">long</span> l = f6.applyAsLong(lb);</span><br><span class="line">    <span class="keyword">double</span> d = f7.applyAsDouble(db);</span><br><span class="line">    l = f8.applyAsLong(<span class="number">12</span>);</span><br><span class="line">    d = f9.applyAsDouble(<span class="number">12</span>);</span><br><span class="line">    i = f10.applyAsInt(<span class="number">12</span>);</span><br><span class="line">    d = f11.applyAsDouble(<span class="number">12</span>);</span><br><span class="line">    i = f12.applyAsInt(<span class="number">13.0</span>);</span><br><span class="line">    l = f13.applyAsLong(<span class="number">13.0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将方法引用应用于基于类的函数式接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// functional/ClassFunctionals.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AA</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BB</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CC</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassFunctionals</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> AA <span class="title">f1</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> AA(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f2</span><span class="params">(AA aa1, AA aa2)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f3</span><span class="params">(AA aa)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f4</span><span class="params">(AA aa, BB bb)</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> CC <span class="title">f5</span><span class="params">(AA aa)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> CC(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> CC <span class="title">f6</span><span class="params">(AA aa, BB bb)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> CC(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">f7</span><span class="params">(AA aa)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">f8</span><span class="params">(AA aa, BB bb)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">true</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> AA <span class="title">f9</span><span class="params">(AA aa)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> AA(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> AA <span class="title">f10</span><span class="params">(AA aa1, AA aa2)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> AA(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Supplier&lt;AA&gt; s = ClassFunctionals::f1;</span><br><span class="line">    s.get();</span><br><span class="line">    Comparator&lt;AA&gt; c = ClassFunctionals::f2;</span><br><span class="line">    c.compare(<span class="keyword">new</span> AA(), <span class="keyword">new</span> AA());</span><br><span class="line">    Consumer&lt;AA&gt; cons = ClassFunctionals::f3;</span><br><span class="line">    cons.accept(<span class="keyword">new</span> AA());</span><br><span class="line">    BiConsumer&lt;AA,BB&gt; bicons = ClassFunctionals::f4;</span><br><span class="line">    bicons.accept(<span class="keyword">new</span> AA(), <span class="keyword">new</span> BB());</span><br><span class="line">    Function&lt;AA,CC&gt; f = ClassFunctionals::f5;</span><br><span class="line">    CC cc = f.apply(<span class="keyword">new</span> AA());</span><br><span class="line">    BiFunction&lt;AA,BB,CC&gt; bif = ClassFunctionals::f6;</span><br><span class="line">    cc = bif.apply(<span class="keyword">new</span> AA(), <span class="keyword">new</span> BB());</span><br><span class="line">    Predicate&lt;AA&gt; p = ClassFunctionals::f7;</span><br><span class="line">    <span class="keyword">boolean</span> result = p.test(<span class="keyword">new</span> AA());</span><br><span class="line">    BiPredicate&lt;AA,BB&gt; bip = ClassFunctionals::f8;</span><br><span class="line">    result = bip.test(<span class="keyword">new</span> AA(), <span class="keyword">new</span> BB());</span><br><span class="line">    UnaryOperator&lt;AA&gt; uo = ClassFunctionals::f9;</span><br><span class="line">    AA aa = uo.apply(<span class="keyword">new</span> AA());</span><br><span class="line">    BinaryOperator&lt;AA&gt; bo = ClassFunctionals::f10;</span><br><span class="line">    aa = bo.apply(<span class="keyword">new</span> AA(), <span class="keyword">new</span> AA());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>java.util.functional</code> 中的接口是有限的，可以自定义多参数函数式接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TriFunction</span>&lt;<span class="title">T</span>, <span class="title">U</span>, <span class="title">V</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t, U u, V v)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TriFunctionTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> l, <span class="keyword">double</span> d)</span> </span>&#123; <span class="keyword">return</span> <span class="number">99</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TriFunction&lt;Integer, Long, Double, Integer&gt; tf = TriFunctionTest::f; <span class="comment">// 函数引用</span></span><br><span class="line">    tf = (i, l, d) -&gt; <span class="number">12</span>; <span class="comment">// lambda 表达式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>函数式编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>函数式编程</tag>
        <tag>Lambda表达式</tag>
        <tag>方法引用</tag>
        <tag>函数式接口</tag>
        <tag>高阶函数</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus基础</title>
    <url>/archives/b637f7df.html</url>
    <content><![CDATA[<p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus</a>（简称 <code>MP</code>）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis</a> 的增强工具，在 <code>MyBatis</code> 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>MyBatis-Plus</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础</title>
    <url>/archives/a8fdf5f8.html</url>
    <content><![CDATA[<h4 id="springboot-概述"><a class="markdownIt-Anchor" href="#springboot-概述"></a> <code>SpringBoot</code> 概述</h4>
<h4 id="springboot-核心注解"><a class="markdownIt-Anchor" href="#springboot-核心注解"></a> <code>SpringBoot</code> 核心注解</h4>
<h4 id="javaconfig"><a class="markdownIt-Anchor" href="#javaconfig"></a> <code>JavaConfig</code></h4>
<h4 id="springboot-自动配置原理"><a class="markdownIt-Anchor" href="#springboot-自动配置原理"></a> <code>SpringBoot</code> 自动配置原理</h4>
<h4 id="跨域问题"><a class="markdownIt-Anchor" href="#跨域问题"></a> 跨域问题</h4>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/archives/a4a81253.html</url>
    <content><![CDATA[<h4 id="文件系统"><a class="markdownIt-Anchor" href="#文件系统"></a> 文件系统</h4>
<img data-src="/archives/a4a81253/Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png" alt="Linux文件系统结构" style="zoom:40%;">
<p>最主要的几个组成部分如下：</p>
<ul>
<li>
<p><code>superblock</code>：记录文件系统的整体信息，包括 <code>inode</code> 和 <code>block</code> 的总量、使用量、剩余量，以及文件系统的格式与相关信息等；</p>
</li>
<li>
<p><code>block bitmap</code>：记录 <code>block</code> 是否被使用的位图；</p>
</li>
<li>
<p><code>inode</code>：一个文件占用一个 <code>inode</code>，记录文件的属性，和文件内容所在的 <code>block</code> 编号；</p>
</li>
<li>
<p><code>block</code>：存储文件内容，文件太大时，会占用多个 <code>block</code>。</p>
</li>
</ul>
<span id="more"></span>
<h4 id="inode"><a class="markdownIt-Anchor" href="#inode"></a> <code>inode</code></h4>
<p><code>inode</code> 包括的内容：</p>
<ul>
<li>
<p>权限 (read/write/excute)</p>
</li>
<li>
<p>拥有者与群组 (owner/group)</p>
</li>
<li>
<p>容量</p>
</li>
<li>
<p>建立或状态改变的时间 (ctime)</p>
</li>
<li>
<p>最近读取时间 (atime)</p>
</li>
<li>
<p>最近修改时间 (mtime)</p>
</li>
<li>
<p>定义文件特性的旗标 (flag)，如 SetUID…</p>
</li>
<li>
<p>该文件真正内容的指向 (pointer)。</p>
</li>
</ul>
<p>每个 <code>inode</code> 大小均固定为 <code>128 bytes</code> (新的 ext4 与 xfs 可设定到 256 bytes)。</p>
<p><code>inode</code> 中记录了文件内容所在的 <code>block</code> 编号，一个大文件可能需要很多 <code>block</code>。而一个 <code>inode</code> 大小有限，无法直接引用这么多 <code>block</code> 编号。因此引入了间接、双间接、三间接引用。</p>
<img data-src="/archives/a4a81253/inode%E7%BB%93%E6%9E%84.png" alt="inode结构" style="zoom:50%;">
<h4 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h4>
<h5 id="文件信息"><a class="markdownIt-Anchor" href="#文件信息"></a> 文件信息</h5>
<p>文件的用户分为三种：文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。</p>
<p>使用 <code>ls</code> 查看一个文件时，会显示一个文件的信息，例如 <code>drwxr-xr-x 3 root root 17 May 6 00:14 .config</code>：</p>
<ul>
<li><code>drwxr-xr-x</code>：文件类型以及权限，第 1 位为文件类型，后 9 位为文件权限</li>
<li>3：链接数</li>
<li>root：文件拥有者</li>
<li>root：所属群组</li>
<li>17：文件大小</li>
<li>May 6 00:14：文件最后被修改的时间</li>
<li>.config：文件名</li>
</ul>
<p>常见的文件类型：</p>
<ul>
<li><code>d</code>：目录</li>
<li><code>-</code>：文件</li>
<li><code>l</code>：链接文件</li>
</ul>
<p>文件权限：</p>
<ul>
<li><code>r</code>：读</li>
<li><code>w</code>：写</li>
<li><code>x</code>：执行</li>
</ul>
<h5 id="修改权限"><a class="markdownIt-Anchor" href="#修改权限"></a> 修改权限</h5>
<p>文件默认权限：文件默认没有可执行权限，因此为 666，也就是 -rw-rw-rw- 。</p>
<p>目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此为 777 ，也就是 drwxrwxrwx。</p>
<p>可以通过 <code>umask</code> 设置或者查看默认权限，通常以掩码的形式来表示，例如 002 表示其它用户的权限去除了一个 2 的权限，也就是写权限，因此建立新文件时默认的权限为 <code>rw-rw-r--</code>。</p>
<p>可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 <code>r: 4、w: 2、x: 1</code>。</p>
<p>命令：<code>chmod xyz filename</code>。如：<code>chmod 754 .bashrc</code>。</p>
<p>也可以使用符号来设定权限：<code>chmod [ugoa] [+-=] [rwx] dirname/filename</code></p>
<ul>
<li><code>u</code>：拥有者</li>
<li><code>g</code>：所属群组</li>
<li><code>o</code>：其他人</li>
<li><code>a</code>：所有人</li>
<li><code>+</code>：添加权限</li>
<li><code>-</code>：移除权限</li>
<li><code>=</code>：设定权限</li>
</ul>
<p>如：<code>chmod a+w .bashrc</code> 表示为所有用户添加写权限。</p>
<p>PS：<code>inode</code> 中不包括文件名，文件名存储在文件所在的目录中。建立一个目录时，会分配一个 <code>inode</code> 与至少一个 <code>block</code>。<code>block</code> 记录的内容是目录下所有文件的 <code>inode</code> 编号以及文件名。因此，拥有文件的 <code>w</code> 权限并不能对文件名进行修改，想要修改文件名，需要拥有文件所在目录的 <code>w</code> 权限。</p>
<h4 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h4>
<p>创建链接：<code>ln [-sf] source_filename dist_filename</code></p>
<ul>
<li><code>s</code> ：默认是硬链接，加 <code>-s</code> 为符号链接</li>
<li><code>f</code> ：如果目标文件存在时，先删除目标文件</li>
</ul>
<img data-src="/archives/a4a81253/%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5.png" alt="文件链接" style="zoom:50%;">
<h5 id="硬链接"><a class="markdownIt-Anchor" href="#硬链接"></a> 硬链接</h5>
<p>在目录下创建一个条目，记录着文件名与 <code>inode</code> 编号，这个 <code>inode</code> 就是源文件的 <code>inode</code>。</p>
<p>删除任意一个条目，文件还是存在，只要引用数量不为 0。</p>
<p>有以下限制：不能跨越文件系统、不能对目录进行链接。</p>
<h5 id="符号链接"><a class="markdownIt-Anchor" href="#符号链接"></a> 符号链接</h5>
<p>符号链接文件保存着源文件所在的绝对路径，在读取时会定位到源文件上。</p>
<p>当源文件被删除了，链接文件就打不开了。</p>
<p>因为记录的是路径，所以可以为目录建立符号链接。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>AQS</title>
    <url>/archives/dfdb52be.html</url>
    <content><![CDATA[<h4 id="aqs-概述"><a class="markdownIt-Anchor" href="#aqs-概述"></a> <code>AQS</code> 概述</h4>
<p>队列同步器（<code>AbstractQueuedSynchronizer</code>，<code>AQS</code>）是构建锁或其他同步组件的基础框架。</p>
<p><code>AQS</code> 的子类包括：</p>
<ul>
<li><code>ReentrantLock</code> 中的 <code>Sync</code>、<code>FairSync</code>、<code>NonFariSync</code></li>
<li><code>ReentrantReadWriteLock</code> 中的 <code>Sync</code>、<code>FairSync</code>、<code>NonFariSync</code></li>
<li><code>Semaphore</code> 中的 <code>Sync</code>、<code>FairSync</code>、<code>NonFariSync</code></li>
<li><code>CountDownLatch</code> 中的 <code>Sync</code></li>
<li><code>ThreadPoolExecutor</code> 中的 <code>Worker</code></li>
</ul>
<span id="more"></span>
<img data-src="/archives/dfdb52be/AQS%E5%AD%90%E7%B1%BB.png" alt="AQS子类" style="zoom:50%;">
<h4 id="aqs-源码分析"><a class="markdownIt-Anchor" href="#aqs-源码分析"></a> <code>AQS</code> 源码分析</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueuedSynchronizer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractOwnableSynchronizer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractQueuedSynchronizer</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;...&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 线程在共享模式下等待 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">    <span class="comment">/** 线程在独占模式下等待 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 线程取消等待 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** 唤醒下一个线程 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/** 线程在 condition 上等待 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**   */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns true if node is waiting in shared mode.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns previous node, or throws NullPointerException if null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        Node p = prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;    <span class="comment">// Used to establish initial head or SHARED marker</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, Node mode) &#123;     <span class="comment">// Used by addWaiter</span></span><br><span class="line">        <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">        <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="reentrantlock"><a class="markdownIt-Anchor" href="#reentrantlock"></a> <code>ReentrantLock</code></h4>
<h5 id="reentrantlock-简单使用"><a class="markdownIt-Anchor" href="#reentrantlock-简单使用"></a> <code>ReentrantLock</code> 简单使用</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      lock.lock(); </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ... method body</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>AQS</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS</title>
    <url>/archives/969d9481.html</url>
    <content><![CDATA[<h4 id="cas-概述"><a class="markdownIt-Anchor" href="#cas-概述"></a> <code>CAS</code> 概述</h4>
<p><code>CAS</code> 有三个操作数：内存值 <code>V</code>、预期值 <code>A</code>、要写入的值 <code>B</code>。</p>
<p><code>CAS</code> 的核心是：仅当预期值 <code>A</code> 和当前的内存值 <code>V</code> 相同时，才将内存值修改为 <code>B</code>。比较和更新是一个原子操作。</p>
<span id="more"></span>
<h4 id="cas-的应用"><a class="markdownIt-Anchor" href="#cas-的应用"></a> <code>CAS</code> 的应用</h4>
<h5 id="concurrenthashmap"><a class="markdownIt-Anchor" href="#concurrenthashmap"></a> <code>ConcurrentHashMap</code></h5>
<h5 id="原子类"><a class="markdownIt-Anchor" href="#原子类"></a> 原子类</h5>
<p><code>java.util.concurrent.atomic</code> 包下的原子类主要包括六类：</p>
<ul>
<li>基本类型原子类 - <code>AtomicInteger、AtomicLong、AtomicBoolean</code></li>
<li>数组类型原子类 - <code>AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray</code></li>
<li>引用类型原子类 - <code>AtomicReference、AtomicStampedReference、AtomicMarkableReference</code></li>
<li>原子更新器 - <code>AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater</code></li>
<li>累加器 - <code>LongAdder、DoubleAdder</code></li>
<li>积累器 - <code>LongAdder、DoubleAdder</code></li>
</ul>
<h6 id="基本类型原子类"><a class="markdownIt-Anchor" href="#基本类型原子类"></a> 基本类型原子类</h6>
<p>以 <code>AtomicInteger</code> 为例，看一下 <code>CAS</code> 在基本原子类中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>unsafe</code> - 操作内存</li>
<li><code>valueOffset</code> - <code>value</code> 在 <code>AtomicInteger</code> 对象中的偏移量</li>
</ul>
<p><code>AtomicInteger</code> 自增：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用的是 <code>unsafe</code> 对象的 <code>getAndAddInt()</code> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是 <code>Unsafe.class</code> 中的代码，看上去各个参数代表的意义不是很明确。</p>
<p>为了更好地理解函数的意义，可以看 <code>OpenJDK 8</code> 中的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        v = getIntVolatile(o, offset);</span><br><span class="line">    &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从 <code>OpenJDK 8</code> 中的代码可以看出，<code>getAndAddInt()</code> 循环读取主内存中对象 <code>o</code> 的偏移量 <code>offset</code> 处的值 <code>v</code>，</p>
<p>如果 <code>v</code> 和工作内存中值（预期值） <code>A</code> 相等，就将新值 <code>B</code> 写入主内存，返回旧值 <code>v</code>；</p>
<p>如果不相等，将 <code>A</code> 的值更新为 <code>v</code>，循环，直到更新成功为止。</p>
<p>在高并发情况下，基本原子类的性能不是很好。</p>
<p>加法器在这方面做了改进。</p>
<h6 id="数组类型原子类"><a class="markdownIt-Anchor" href="#数组类型原子类"></a> 数组类型原子类</h6>
<p>保证对数组中元素的操作都具备原子性。</p>
<h6 id="引用类型原子类"><a class="markdownIt-Anchor" href="#引用类型原子类"></a> 引用类型原子类</h6>
<p><code>AtomicInteger</code> 保证对整数操作的原子性，<code>AtomicReference</code> 保证对一个对象操作的原子性。</p>
<p><code>AtomicStampedReference</code> 用于解决 <code>CAS</code> 的 <code>ABA</code> 问题。</p>
<h6 id="原子更新器"><a class="markdownIt-Anchor" href="#原子更新器"></a> 原子更新器</h6>
<p>如果之前已经有了一个变量，比如是整型的 <code>int</code>，<code>int</code> 型的一些操作不具备原子性，为了让 <code>int</code> 型变量的操作具备原子性，可以用 <code>Atomic*FieldUpdater</code> 进行升级。</p>
<h6 id="加法器"><a class="markdownIt-Anchor" href="#加法器"></a> 加法器</h6>
<p>相对于 <code>AtomicLong</code> 原子类，多个线程操作的是同一原子类对象同一偏移量内的数据；</p>
<p><code>LongAdder</code> 使用两个变量 <code>base</code> 和 <code>Cell[]</code> ，在并发度不高时，可以直接在 <code>base</code> 上操作，一旦并发度高起来，不同线程操作的是 <code>Cell</code> 中的某一个，这样就不必为了数据的可见性而频繁地刷新缓存。</p>
<p><strong>AtomicLong 可否被 LongAdder 替代？</strong></p>
<p><code>LongAdder</code> 只提供了 <code>add、increment</code> 等简单的方法，适合的是统计求和计数的场景，场景比较单一；</p>
<p>而 <code>AtomicLong</code> 还具有 <code>compareAndSet</code> 等高级方法，可以应对除了加减之外的更复杂的需要 <code>CAS</code> 的场景。</p>
<p>所以如果只需要用到加和减操作的话，那么可以直接使用更高效的 <code>LongAdder</code>，但如果我们需要用到更高级的 <code>CAS</code> 操作比如 <code>compareAndSet</code>，就需要使用 <code>AtomicLong</code> 来完成。</p>
<h6 id="累加器"><a class="markdownIt-Anchor" href="#累加器"></a> 累加器</h6>
<h6 id="unsafe"><a class="markdownIt-Anchor" href="#unsafe"></a> <code>Unsafe</code></h6>
<p>所有上面这些原子类都是基于 <code>Unsafe</code> 实现的。</p>
<p><code>Unsafe</code> 类中有很多本地方法。</p>
<h4 id="cas-的问题"><a class="markdownIt-Anchor" href="#cas-的问题"></a> <code>CAS</code> 的问题</h4>
<ul>
<li><code>ABA</code></li>
<li>自旋消耗 <code>CPU</code> 时间</li>
<li>只能保证单个变量的原子操作</li>
</ul>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>CAS</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/archives/91e798bc.html</url>
    <content><![CDATA[<p><code>Java</code> 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 <code>Java</code> 程序在各种平台下都能达到一致的内存访问效果。</p>
<span id="more"></span>
<h4 id="主内存与工作内存"><a class="markdownIt-Anchor" href="#主内存与工作内存"></a> 主内存与工作内存</h4>
<p><code>CPU</code> 寄存器的读写速度比内存快几个数量级，为了缓解这种速度矛盾，在它们之间加入了高速缓存。</p>
<p>但是加入高速缓存带来了一个新的问题：<strong>缓存一致性</strong>。</p>
<p>在并发环境中，通常多个线程需要共享主内存中的数据；每个线程有自己的工作内存，线程只能只能操作自己工作内存中的数据，因此需要将主内存中的数据拷贝到工作内存。</p>
<h4 id="内存间的交互操作"><a class="markdownIt-Anchor" href="#内存间的交互操作"></a> 内存间的交互操作</h4>
<img data-src="/archives/91e798bc/%E5%86%85%E5%AD%98%E9%97%B4%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C.png" alt="内存间交互操作" style="zoom:60%;">
<ul>
<li>read：把一个变量的值从主内存读到工作内存</li>
<li>load：把读到的值放入工作内存的变量副本</li>
<li>use：使用变量副本</li>
<li>assign：把一个新值赋给工作内存的变量副本</li>
<li>store：把工作内存中变量副本的值存到主内存</li>
<li>write：把值写入主内存中的变量</li>
<li>lock：作用于主内存的变量</li>
<li>unlock</li>
</ul>
<h4 id="指令重排"><a class="markdownIt-Anchor" href="#指令重排"></a> 指令重排</h4>
<h4 id="三大特性"><a class="markdownIt-Anchor" href="#三大特性"></a> 三大特性</h4>
<h5 id="原子性"><a class="markdownIt-Anchor" href="#原子性"></a> 原子性</h5>
<p>一组操作要么全部执行成功，要不全部不执行。</p>
<p>能保证原子性的操作为原子操作，<code>Java</code> 中的原子操作包括：</p>
<ul>
<li>除了 <code>long</code> 和 <code>double</code> 之外的基本类型（<code>int、byte、boolean、short、char、float</code>）的赋值操作</li>
<li><code>reference</code> 的赋值操作</li>
<li><code>java.concurrent.Atomic.*</code> 包下所有类的一切操作（通过 <code>CAS</code> 实现）</li>
<li><code>synchronized</code> 保护的操作</li>
</ul>
<h5 id="可见性"><a class="markdownIt-Anchor" href="#可见性"></a> 可见性</h5>
<p>一个线程对共享变量的修改，其他线程立刻可见。</p>
<p>使用 <code>volatile</code> 或 <code>synchronized</code> 来保证可见性。</p>
<h5 id="有序性"><a class="markdownIt-Anchor" href="#有序性"></a> 有序性</h5>
<p>在 <code>Java</code> 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>
<p><code>volatile</code> 关键字通过添加<strong>内存屏障</strong>的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前；也可以通过 <code>synchronized</code> 来保证有序性。</p>
<p>总结：</p>
<ul>
<li>使用 <code>synchronized</code> 可以同时保证三大特性</li>
<li><code>volatile</code> 只能保证可见性，无法保证原子性</li>
</ul>
<h4 id="happens-before"><a class="markdownIt-Anchor" href="#happens-before"></a> happens-before</h4>
<p>除了可以用 <code>volatile</code> 和 <code>synchronized</code> 来保证有序性之外，<code>JVM</code> 还规定了先行发生原则（happens-before），让一个操作无需控制就能先于另一个操作完成。</p>
<ul>
<li>
<p>单一线程原则 - 在一个线程内，在程序前面的操作先行发生于后面的操作。</p>
</li>
<li>
<p>锁原则 - 一个 <code>unlock</code> 操作先行发生于后面对同一个锁的 <code>lock</code> 操作。</p>
</li>
<li>
<p><code>volatile</code> 变量原则 - 对一个 <code>volatile</code> 变量的写操作先行发生于后面对这个变量的读操作。</p>
</li>
<li>
<p>线程启动原则 - <code>Thread</code> 对象的 <code>start()</code> 方法调用先行发生于此线程的每一个动作。</p>
</li>
<li>
<p>线程加入原则 - <code>Thread</code> 对象的结束先行发生于 <code>join()</code> 方法返回。</p>
</li>
<li>
<p>线程中断原则 - 对线程 <code>interrupt()</code> 方法的调用先行发生于被中断线程检测到中断事件的发生</p>
</li>
<li>
<p>对象终结原则 - 一个对象的初始化完成先行发生于它的 <code>finalize()</code> 方法的开始。</p>
</li>
<li>
<p>传递性原则 - 如果操作 <code>A</code> 先行发生于操作 <code>B</code>，<code>B</code> 先行发生于 <code>C</code>，那么 <code>A</code> 先行发生于 <code>C</code>。</p>
</li>
</ul>
<h4 id="volatile"><a class="markdownIt-Anchor" href="#volatile"></a> <code>volatile</code></h4>
<p><code>volatile</code> 可以保证线程可见性且提供了一定的有序性，但是无法保证原子性。</p>
<p>在 <code>JVM</code> 底层，<code>volatile</code> 是采用<mark class="label primary">内存屏障</mark>来实现的。</p>
<p>在执行程序时为了提高性能，编译器和处理器通常会对指令做重排序：</p>
<ol>
<li>
<p>编译器重排序：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序；</p>
</li>
<li>
<p>处理器重排序：如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p>
</li>
</ol>
<h5 id="volatile-的内存语义"><a class="markdownIt-Anchor" href="#volatile-的内存语义"></a> <code>volatile</code> 的内存语义</h5>
<p>当写一个 <code>volatile</code> 变量时，<code>JMM</code> 会把该线程的工作内存中的共享变量值立即刷新到主内存中。</p>
<p>当读一个 <code>volatile</code> 变量时，<code>JMM</code> 会直接从主内存中读取共享变量。</p>
<h5 id="volatile-的实现"><a class="markdownIt-Anchor" href="#volatile-的实现"></a> <code>volatile</code> 的实现</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a = <span class="number">1</span>;                 <span class="comment">// 1</span></span><br><span class="line">        flag = <span class="keyword">true</span>;           <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;               <span class="comment">// 3</span></span><br><span class="line">            <span class="keyword">int</span> i = a * a;        <span class="comment">// 4</span></span><br><span class="line">            System.out.println(<span class="string">&quot;i的值为：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们知道，为了提高程序性能，如果不存在数据依赖，编译器和处理器是有可能对程序语句进行重排的。像上述代码，<code>a</code> 和 <code>flag</code> 之间不存在数据依赖，在单线程内，进行重排不会影响程序执行结果。但在多线程环境中就不一定了。</p>
<p><code>volatile</code> 可以一定程序禁止指令重排：</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center"></th>
<th style="text-align:center">第二个操作</th>
<th style="text-align:center"></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>第一个操作</td>
<td style="text-align:center">普通变量读写</td>
<td style="text-align:center"><code>volatile</code> 变量读</td>
<td style="text-align:center"><code>volatile</code> 变量写</td>
<td></td>
</tr>
<tr>
<td>普通变量读写</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">不能重排</td>
<td></td>
</tr>
<tr>
<td><code>volatile</code> 变量读</td>
<td style="text-align:center">不能重排</td>
<td style="text-align:center">不能重排</td>
<td style="text-align:center">不能重排</td>
<td></td>
</tr>
<tr>
<td><code>volatile</code> 变量写</td>
<td style="text-align:center"></td>
<td style="text-align:center">不能重排</td>
<td style="text-align:center">不能重排</td>
<td></td>
</tr>
</tbody>
</table>
<p>也就是说：</p>
<ol>
<li>
<p>当第一个操作是 <code>volatile</code> 变量读时，不管第二个操作是什么，都不能进行重排</p>
</li>
<li>
<p>当第二个操作是 <code>volatile</code> 变量写时，不管第一个操作是什么，都不能进行重排</p>
</li>
<li>
<p>当第一个操作是 <code>volatile</code> 变量写时，第二个操作是 <code>volatile</code> 变量读时，不能进行重排</p>
</li>
</ol>
<p>内存屏障类型：</p>
<ul>
<li><code>LoadLoad</code>：对于这样的语句 <code>Load1; LoadLoad; Load2</code>，在 <code>Load2</code> 及后续读取操作要读取的数据被访问前，保证 <code>Load1</code> 要读取的数据被读取完毕。</li>
<li><code>StoreStore</code>：对于这样的语句 <code>Store1; StoreStore; Store2</code>，在 <code>Store2</code> 及后续写入操作执行前，保证 <code>Store1</code> 的写入操作对其它处理器可见。</li>
<li><code>LoadStore</code>：对于这样的语句 <code>Load1; LoadStore; Store2</code>，在 <code>Store2</code> 及后续写入操作被刷出前，保证<code>Load1</code> 要读取的数据被读取完毕。</li>
<li><code>StoreLoad</code>：对于这样的语句 <code>Store1; StoreLoad; Load2</code>，在 <code>Load2</code> 及后续所有读取操作执行前，保证 <code>Store1</code> 的写入对所有处理器可见。它的开销是四种屏障中最大的。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能。</li>
</ul>
<p>具体实现是通过在编译器在生成字节码时，在指令序列中插入内存屏障：</p>
<ul>
<li>
<p>在每个 <code>volatile</code> 读操作之后插入一个 <code>LoadLoad</code> 屏障</p>
</li>
<li>
<p>在每个 <code>volatile</code> 读操作之后插入一个 <code>LoadStore</code> 屏障</p>
</li>
<li>
<p>在每个 <code>volatile</code> 写操作之前插入一个 <code>StoreStore</code> 屏障</p>
</li>
<li>
<p>在每个 <code>volatile</code> 写操作之后插入一个 <code>StoreLoad</code> 屏障</p>
</li>
</ul>
<p><code>LoadLoad</code> 屏障和 <code>LoadStore</code> 屏障保证<code>规则 1</code>；</p>
<p><code>StoreStore</code> 屏障<code>保证规则 2</code>；</p>
<p><code>StoreLoad</code> 屏障保证<code>规则 3</code>。</p>
<h5 id="volatile-与-synchronized-的区别"><a class="markdownIt-Anchor" href="#volatile-与-synchronized-的区别"></a> <code>volatile</code> 与 <code>synchronized</code> 的区别</h5>
<ul>
<li><code>volatile</code> 只能作用于变量，使用范围较小；<code>synchronized</code> 可以用在变量、方法、类、同步代码块等，使用范围比较广。</li>
<li><code>volatile</code> 只能保证可见性和有序性，不能保证原子性；而可见性、有序性、原子性 <code>synchronized</code> 都可以保证。</li>
<li><code>volatile</code> 不会造成线程阻塞；<code>synchronized</code> 可能会造成线程阻塞。</li>
</ul>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li><a href="https://tech.meituan.com/2014/09/23/java-memory-reordering.html">Java 内存访问重排序</a></li>
</ul>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>Java内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal</title>
    <url>/archives/151f44ae.html</url>
    <content><![CDATA[<h4 id="threadlocal-概述"><a class="markdownIt-Anchor" href="#threadlocal-概述"></a> <code>ThreadLocal</code> 概述</h4>
<span id="more"></span>
<h4 id="threadlocal-使用"><a class="markdownIt-Anchor" href="#threadlocal-使用"></a> <code>ThreadLocal</code> 使用</h4>
<h4 id="threadlocalmap-和内存泄漏"><a class="markdownIt-Anchor" href="#threadlocalmap-和内存泄漏"></a> <code>ThreadLocalMap</code> 和内存泄漏</h4>
<img data-src="/archives/151f44ae/ThreadLocalMap.png" alt="ThreadLocalMap" style="zoom:67%;">
<p>每个 <code>Thread</code> 都有一个 <code>ThreadLocal.ThreadLocalMap</code> 对象。</p>
<p>当调用一个 <code>ThreadLocal</code> 的 <code>set(T value)</code> 方法时，先得到当前线程的 <code>ThreadLocalMap</code> 对象，然后将 <code>ThreadLocal-&gt;value</code> 键值对插入到该 <code>Map</code> 中。</p>
<h4 id="threadlocal-和-synchronized-的区别"><a class="markdownIt-Anchor" href="#threadlocal-和-synchronized-的区别"></a> <code>ThreadLocal</code> 和 <code>synchronized</code> 的区别</h4>
<p><code>ThreadLocal</code> 并不是用来解决共享资源问题的。</p>
<p>虽然 <code>ThreadLocal</code> 确实可以用于解决多线程情况下的线程安全问题，但其资源并不是共享的，而是每个线程独享的。相比于使用锁而言，<code>ThreadLocal</code>把资源变成了各线程独享的资源，因此避免了同步操作。</p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>ThreadLocal</tag>
      </tags>
  </entry>
  <entry>
    <title>并发容器</title>
    <url>/archives/818b85a1.html</url>
    <content><![CDATA[<h4 id="concurrenthashmap"><a class="markdownIt-Anchor" href="#concurrenthashmap"></a> <code>ConcurrentHashMap</code></h4>
<span id="more"></span>
<h4 id="copyonwritearraylist"><a class="markdownIt-Anchor" href="#copyonwritearraylist"></a> <code>CopyOnWriteArrayList</code></h4>
<h4 id="阻塞队列"><a class="markdownIt-Anchor" href="#阻塞队列"></a> <a href="/archives/">阻塞队列</a></h4>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>并发容器</tag>
      </tags>
  </entry>
  <entry>
    <title>死锁</title>
    <url>/archives/1abadc07.html</url>
    <content><![CDATA[<h4 id="死锁的四个条件"><a class="markdownIt-Anchor" href="#死锁的四个条件"></a> 死锁的四个条件</h4>
<ul>
<li>
<p>互斥 - 每个资源同时只有一个线程在使用。</p>
</li>
<li>
<p>持有和等待 - 一个线程在请求其他资源时，不释放已持有的资源。</p>
</li>
<li>
<p>不可剥夺 - 线程获得资源后，除非主动释放，否则不可剥夺。</p>
</li>
<li>
<p>循环等待 - 多个线程及其持有的资源形成一个环，环中每个线程都在等待下一个线程释放资源。</p>
</li>
</ul>
<span id="more"></span>
<h4 id="死锁检测"><a class="markdownIt-Anchor" href="#死锁检测"></a> 死锁检测</h4>
<h5 id="jstack"><a class="markdownIt-Anchor" href="#jstack"></a> <code>jstack</code></h5>
<ol>
<li>获取正在运行的程序的进程 <code>ID</code>: <code>$&#123;JAVA_HOME&#125;/bin/jps</code></li>
<li>查看信息：<code>$&#123;JAVA_HOME&#125;/bin/jstack pid</code></li>
</ol>
<h5 id="threadmxbean"><a class="markdownIt-Anchor" href="#threadmxbean"></a> <code>ThreadMXBean</code></h5>
<p>在可能发生死锁的程序中添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class="line"><span class="keyword">long</span>[] deadlockedThreads = threadMXBean.findDeadlockedThreads();</span><br><span class="line"><span class="keyword">if</span> (deadlockedThreads != <span class="keyword">null</span> &amp;&amp; deadlockedThreads.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; deadlockedThreads.length; i++) &#123;</span><br><span class="line">        ThreadInfo threadInfo = threadMXBean.getThreadInfo(deadlockedThreads[i]);</span><br><span class="line">        System.out.println(<span class="string">&quot;线程id为&quot;</span>+threadInfo.getThreadId()+<span class="string">&quot;,线程名为&quot;</span> + threadInfo.getThreadName()+<span class="string">&quot;的线程已经发生死锁，需要的锁正被线程&quot;</span>+threadInfo.getLockOwnerName()+<span class="string">&quot;持有。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决死锁的策略"><a class="markdownIt-Anchor" href="#解决死锁的策略"></a> 解决死锁的策略</h4>
<h5 id="死锁避免"><a class="markdownIt-Anchor" href="#死锁避免"></a> 死锁避免</h5>
<h5 id="检测与恢复"><a class="markdownIt-Anchor" href="#检测与恢复"></a> 检测与恢复</h5>
<h5 id="鸵鸟策略"><a class="markdownIt-Anchor" href="#鸵鸟策略"></a> 鸵鸟策略</h5>
<h4 id="哲学家就餐问题"><a class="markdownIt-Anchor" href="#哲学家就餐问题"></a> 哲学家就餐问题</h4>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>死锁</tag>
      </tags>
  </entry>
  <entry>
    <title>线程协作</title>
    <url>/archives/94135b31.html</url>
    <content><![CDATA[<h4 id="semaphore"><a class="markdownIt-Anchor" href="#semaphore"></a> <code>Semaphore</code></h4>
<span id="more"></span>
<h4 id="countdownlatch"><a class="markdownIt-Anchor" href="#countdownlatch"></a> <code>CountDownLatch</code></h4>
<h4 id="cyclicbarrier"><a class="markdownIt-Anchor" href="#cyclicbarrier"></a> <code>CyclicBarrier</code></h4>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>线程协作</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/archives/de7c53fe.html</url>
    <content><![CDATA[<p>线程池继承结构：</p>
<img data-src="/archives/de7c53fe/ThreadPoolExecutor%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="ThreadPoolExecutor" style="zoom:50%;">
<span id="more"></span>
<h4 id="线程池状态"><a class="markdownIt-Anchor" href="#线程池状态"></a> 线程池状态</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>
<div class="note "><p>变量 **<code>ctl</code>**记录了“<strong>线程池中的任务数</strong>量”和“<strong>线程池的状态</strong>”两个信息。共32位，其中高  3位表示”线程池状态”，低 29 位表示”线程池中的任务数量”。</p>
<ul>
<li>
<p><code>RUNNING</code>           对应高 3 位为 111</p>
<p>处于 <code>RUNNING</code> 状态的线程池能够处理已经接收的任务，以及接收新任务。</p>
</li>
<li>
<p><code>SHUTDOWN</code>         对应高 3 位为 000</p>
<p>处于 <code>SHUTDOWN</code> 状态的线程池能够处理已经接收的任务，不能接收新任务。</p>
</li>
<li>
<p><code>STOP</code>                 对应高 3 位为 001</p>
<p>处于 <code>STOP</code> 状态的线程池不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。</p>
</li>
<li>
<p><code>TIDYING</code>           对应高 3 位为 010</p>
<p>当所有的任务已终止，<code>ctl</code> 记录的”任务数量”为 0，线程池会变为 <code>TIDYING</code> 状态，并执行钩子函数<code>terminated()</code>。</p>
</li>
<li>
<p><code>TERMINATED</code>     对应高 3 位为 011</p>
<p>执行完钩子函数 <code>terminated()</code> 的线程池状态。</p>
</li>
</ul>
<p>处于 <code>RUNNING</code> 状态的线程池调用 <code>shutdown()</code> 会进入 <code>SHUTDOWN</code> 状态；执行 <code>shutdownNow()</code> 会进入 <code>STOP</code> 状态。</p>
</div>
<h4 id="线程池参数"><a class="markdownIt-Anchor" href="#线程池参数"></a> 线程池参数</h4>
<p>通过 <code>ThreadPoolExecutor</code> 构造函数创建线程池：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note "><p>参数含义：</p>
<ul>
<li>
<p><code>corePoolSize</code> – 线程池中核心线程的数量。当向线程池提交一个任务后，线程池会创建一个线程来执行任务，等任务执行完后，如果线程数少于 <code>corePoolSize</code>，线程会继续存在，不会销毁。</p>
</li>
<li>
<p><code>maximumPoolSize</code> – 线程池中允许的最大线程数。</p>
</li>
<li>
<p><code>keepAliveTime</code> – 当线程数多于 <code>corePoolSize</code> 时，多余的线程继续存活 <code>keepAliveTime</code> 时间，等待新任务的到来，超过这个时间没有新任务处理就销毁多余的线程。</p>
</li>
<li>
<p>unit – <code>keepAliveTime</code> 的单位。</p>
</li>
<li>
<p><code>workQueue</code> – 保存等待执行的任务的阻塞队列。</p>
<p>常用的阻塞队列包括：</p>
<ul>
<li><code>ArrayBlockingQueue</code> - 基于数组的有界阻塞队列。</li>
<li><code>LinkedBlockingQueue</code> - 基于链表的无解阻塞队列，可以设置为有界。</li>
<li><code>PriorityBlockingQueue</code> - 具有优先级别的阻塞队列</li>
<li><code>SynchronousQueue</code> -</li>
</ul>
</li>
<li>
<p><code>threadFactory</code> – 创建新线程的工厂。</p>
</li>
<li>
<p><code>handler</code> – 当线程池中线程数达到了边界，且任务阻塞队列已满的情况下，线程池的处理策略。</p>
<p>有四种策略：</p>
<ul>
<li><code>AbortPolicy</code> - 直接抛出 <code>RejectedExecutionException</code> 异常，默认策略</li>
<li><code>CallerRunsPolicy</code> - 用调用者所在的线程来执行任务</li>
<li><code>DiscardOldestPolicy</code> - 丢弃阻塞队列中靠最前的任务，并执行当前任务</li>
<li><code>DiscardPolicy</code> - 直接丢弃任务</li>
</ul>
</li>
</ul>
</div>
<p><img data-src="/archives/de7c53fe/%E7%BA%BF%E7%A8%8B%E6%B1%A0.png" alt="线程池"></p>
<h4 id="常见线程池"><a class="markdownIt-Anchor" href="#常见线程池"></a> 常见线程池</h4>
<h5 id="newfixedthreadpool"><a class="markdownIt-Anchor" href="#newfixedthreadpool"></a> <code>newFixedThreadPool</code></h5>
<div class="note "><p><code>corePoolSize</code> 和 <code>maximumPoolSize</code> 都设置为 <code>nThreads</code>，意味着当线程池满时且阻塞队列也已经满时，如果继续提交任务，该线程池不会再新建线程来执行任务，而是直接走拒绝策略。</p>
<p><code>FixedThreadPool</code> 使用的是默认的拒绝策略 <code>AbortPolicy</code>，直接抛出异常。</p>
<p>使用无界阻塞队列 <code>LinkedBlockingQueue</code>。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="newsinglethreadexecutor"><a class="markdownIt-Anchor" href="#newsinglethreadexecutor"></a> <code>newSingleThreadExecutor</code></h5>
<div class="note "><p>使用无界阻塞队列 <code>LinkedBlockingQueue</code>。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="newcachedthreadpool"><a class="markdownIt-Anchor" href="#newcachedthreadpool"></a> <code>newCachedThreadPool</code></h5>
<div class="note "><ul>
<li><code>corePoolSize = 0</code></li>
<li><code>maximumPoolSize = Integer.MAX_VALUE</code></li>
<li><code>keepAliveTime = 60s</code></li>
<li><code>workQueue</code> 是 <code>SynchronousQueue</code></li>
<li><code>threadFactory</code> 是默认值 <code>DefaultThreadFactory</code></li>
<li><code>handler</code> 是默认值 <code>AbortPolicy</code></li>
</ul>
<p>这种线程池没有核心线程，任务阻塞队列也不存储任务，都是来一个任务创建一个线程去执行，或使用还未销毁的空闲线程去执行。所有线程空闲超过 60s 即销毁。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="newscheduledthreadpool"><a class="markdownIt-Anchor" href="#newscheduledthreadpool"></a> <code>newScheduledThreadPool</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="forkjoinpool"><a class="markdownIt-Anchor" href="#forkjoinpool"></a> <code>ForkJoinPool</code></h5>
<div class="note "><p><code>ForkJoinPool</code> 和其他线程池最大的不同是：除了有一个线程共用的任务队列外，每个线程还有自己的后进先出双端队列。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threshold;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinDemo</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threshold = threshold;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (last - first &lt;= threshold) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt;= last; i++) &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = first + (last - first) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            ForkJoinDemo leftTask = <span class="keyword">new</span> ForkJoinDemo(threshold, first, middle);</span><br><span class="line">            leftTask.fork();</span><br><span class="line"></span><br><span class="line">            ForkJoinDemo rightTask = <span class="keyword">new</span> ForkJoinDemo(threshold, middle + <span class="number">1</span>, last);</span><br><span class="line">            rightTask.fork();</span><br><span class="line"></span><br><span class="line">            result = leftTask.join() + rightTask.join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ForkJoinDemo example = <span class="keyword">new</span> ForkJoinDemo(<span class="number">5</span>, <span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// ForkJoinPool 是一个特殊的线程池，线程数量取决于 CPU 核数</span></span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        Future result = forkJoinPool.submit(example);</span><br><span class="line">        System.out.println(result.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="workstealingpool"><a class="markdownIt-Anchor" href="#workstealingpool"></a> <code>WorkStealingPool</code></h5>
<div class="note "><p>基于 <code>ForkJoinPool</code> 实现。</p>
</div>
<h4 id="关闭线程池"><a class="markdownIt-Anchor" href="#关闭线程池"></a> 关闭线程池</h4>
<ul>
<li><code>shutdown</code></li>
<li><code>shutdownNow</code></li>
</ul>
<h4 id="任务提交"><a class="markdownIt-Anchor" href="#任务提交"></a> 任务提交</h4>
<p>线程池根据不同的业务需求提供了两种方式提交任务：</p>
<ul>
<li>
<p><code>Executor.execute()</code></p>
<p><code>ThreadPoolExecutor</code> 中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     * 1. 线程数少于 corePoolSize，创建新线程执行任务。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. 任务入队，成功之后仍需再次检查线程池状态，</span></span><br><span class="line"><span class="comment">     *    如果线程池已经停止了，任务出队。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 3. 如果不能入队，尝试创建一个新线程执行任务。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">// 获取当前线程数并与 corePoolSize 比较</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>)) <span class="comment">// 创建新线程</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ExecutorService.submit()</code>。</p>
<p>可以获取该任务执行的 <code>Future</code>。</p>
</li>
</ul>
<h4 id="合理线程数"><a class="markdownIt-Anchor" href="#合理线程数"></a> 合理线程数</h4>
<div class="note "><p>任务类型：</p>
<ul>
<li>
<p><code>CPU</code> 密集型 - 需要占用大量的 <code>CPU</code> 时间的任务</p>
<p>对于 <code>CPU</code> 密集型任务，建议线程不能太多，太多会导致 <code>CPU</code> 经常切换，反而造成性能下降。</p>
</li>
<li>
<p><code>IO</code> 密集型 - 需要长时间等待的任务</p>
<p>对于 <code>IO</code> 密集型任务，建议线程可以适当增多，可以更充分的利用 <code>CPU</code> 的时间。</p>
</li>
</ul>
<p>《Java并发编程实战》的作者 <code>Brain Goetz</code> 推荐的计算方法：</p>
<p>线程数 = <code>CPU</code> 核心数 *（1+平均等待时间/平均工作时间）</p>
<ul>
<li>平均工作时间长（<code>CPU</code> 密集型），线程数就随之减少；</li>
<li>平均等待时间长（<code>IO</code> 密集型），线程数就随之增加。</li>
</ul>
</div>]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>线程池</tag>
        <tag>线程池状态</tag>
        <tag>线程池参数</tag>
        <tag>ThreadPoolExecutor</tag>
      </tags>
  </entry>
  <entry>
    <title>阻塞队列</title>
    <url>/archives/159c6098.html</url>
    <content><![CDATA[<p><code>Java</code> 中的并发队列分为阻塞队列和非阻塞队列：</p>
<ul>
<li>非阻塞队列：<code>ConcurrentLinkedQueue</code>，利用 <code>CAS</code> 保证多线程安全。</li>
<li>阻塞队列：主要是 <code>BlockingQueue</code> 的实现类
<ul>
<li><code>ArrayBlockingQueue</code></li>
<li><code>LinkedBlockingQueue</code></li>
<li><code>PriorityBlockingQueue</code></li>
<li><code>SynchronousQueue</code></li>
<li><code>DelayQueue</code></li>
<li><code>LinkedTransferQueue</code></li>
</ul>
</li>
</ul>
<span id="more"></span>
<h4 id="blockingqueue"><a class="markdownIt-Anchor" href="#blockingqueue"></a> <code>BlockingQueue</code></h4>
<p><code>BlockingQueue</code> 有不同的方法进行入队、出队操作：</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:center">抛出异常</th>
<th style="text-align:center">返回值</th>
<th style="text-align:center">阻塞</th>
<th style="text-align:center">限时等待</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Insert</code></td>
<td style="text-align:center"><code>add(e)</code></td>
<td style="text-align:center"><code>offer(e)</code></td>
<td style="text-align:center"><code>put(e)</code></td>
<td style="text-align:center"><code>offer(e, time, unit)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Remove</code></td>
<td style="text-align:center"><code>remove()</code></td>
<td style="text-align:center"><code>poll()</code></td>
<td style="text-align:center"><code>take()</code></td>
<td style="text-align:center"><code>poll(time, unit)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Examine</code></td>
<td style="text-align:center"><code>element()</code></td>
<td style="text-align:center"><code>peek()</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p><code>offer</code> 成功返回 <code>true</code> ，失败返回 <code>false</code> 。</p>
<p><code>poll</code> 和 <code>peek</code> 成功返回队首元素，失败返回 <code>null</code>。</p>
<h4 id="arrayblockingqueue"><a class="markdownIt-Anchor" href="#arrayblockingqueue"></a> <code>ArrayBlockingQueue</code></h4>
<p>有界队列，内部用数组存数据，用 <code>ReentrantLock</code> 实现线程安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The queued items */</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** items index for next take, poll, peek or remove */</span></span><br><span class="line">    <span class="keyword">int</span> takeIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** items index for next put, offer, or add */</span></span><br><span class="line">    <span class="keyword">int</span> putIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Number of elements in the queue */</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Main lock guarding all access */</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Condition for waiting takes */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Condition for waiting puts */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="linkedblockingqueue"><a class="markdownIt-Anchor" href="#linkedblockingqueue"></a> <code>LinkedBlockingQueue</code></h4>
<p>基于链表实现，如果不指定容量，默认容量大小是 <code>Integer.MAX_VALUE</code>，可以看作是无界的。</p>
<h4 id="synchronousqueue"><a class="markdownIt-Anchor" href="#synchronousqueue"></a> <code>SynchronousQueue</code></h4>
<p>容量为 0。线程取数据时会被阻塞，直到有数据被放入；同理，线程放数据的时候也会阻塞，直到有消费者来取。</p>
<h4 id="priorityblockingqueue"><a class="markdownIt-Anchor" href="#priorityblockingqueue"></a> <code>PriorityBlockingQueue</code></h4>
<p>支持优先级的无界阻塞队列，可以通过自定义类实现 <code>compareTo()</code> 方法来指定元素排序规则，或者初始化时通过构造器参数 <code>Comparator</code> 来指定排序规则。</p>
<p>同时，插入队列的对象必须是可比较大小的，也就是 <code>Comparable</code> 的，否则会抛出 <code>ClassCastException</code>异常。</p>
<h4 id="delayqueue"><a class="markdownIt-Anchor" href="#delayqueue"></a> <code>DelayQueue</code></h4>
<p><code>DelayQueue</code> 具有延迟的功能，可以设定让队列中的任务延迟多久之后执行。</p>
<p>元素会根据延迟时间的长短被放到队列的不同位置，越靠近队列头代表越早过期。</p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>并发容器</tag>
        <tag>线程池</tag>
        <tag>阻塞队列</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统原理</title>
    <url>/archives/351e2939.html</url>
    <content><![CDATA[<h4 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h4>
<p>满足 <code>ACID</code> 特性的一组操作。</p>
<p>在 <code>MySQL</code> 中，<mark class="label primary">事务支持是在存储引擎层实现的</mark>。</p>
<h5 id="acid"><a class="markdownIt-Anchor" href="#acid"></a> <code>ACID</code></h5>
<ul>
<li>原子性（Atomicity）：事务的一组操作要么全部成功，要不全部失败回滚。</li>
<li>一致性（Consistency）：数据库在事务执行前后都保持一致性状态。</li>
<li>隔离性（Isolation）：多个事务并发操作同一数据，不能互相干扰。</li>
<li>持久性（Durability）：一旦事务提交，所做的修改将会永远保存到数据库中。</li>
</ul>
<span id="more"></span>
<h4 id="并发一致性"><a class="markdownIt-Anchor" href="#并发一致性"></a> 并发一致性</h4>
<p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>
<h5 id="读脏数据"><a class="markdownIt-Anchor" href="#读脏数据"></a> 读脏数据</h5>
<div class="note "><p>读脏数据指在不同的事务下，当前事务可以读到其他事务未提交的数据。</p>
<p>例如：<code>T1</code> 修改一个数据但未提交，<code>T2</code> 随后读取这个数据。如果 <code>T1</code> 撤销了这次修改， <code>T2</code> 读取的数据是脏数据。</p>
</div>
<h5 id="不可重复读"><a class="markdownIt-Anchor" href="#不可重复读"></a> 不可重复读</h5>
<div class="note "><p>不可重复读指在一个事务内多次读取同一数据得到不同结果。</p>
</div>
<h5 id="幻读"><a class="markdownIt-Anchor" href="#幻读"></a> 幻读</h5>
<div class="note "><p>幻读本质上就是不可重复读。<code>T1</code> 读取某个范围的数据，<code>T2</code> 在这个范围内插入新的数据，<code>T1</code> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p>
</div>
<mark class="label primary">不可重复读和幻读的区别</mark>
<p>不可重复读重点在于 <code>update</code> 和 <code>delete</code>，而幻读的重点在于 <code>insert</code>。</p>
<p>如果使用锁机制来实现这两种隔离级别，在可重复读中，事务第一次读取数据时，获得数据锁，其它事务无法修改（ <code>update</code> 或 <code>delete</code>）这些数据，就可以实现可重复读了。</p>
<p>但这种方法却无法锁住 <code>insert</code> 的数据，所以当事务 <code>A</code> 先前读取了数据，事务 <code>B</code>  <code>insert</code> 数据并提交，事务 <code>A</code> 再次读取数据会发现多了一条之前没有的数据，这就是幻读，无法通过行锁来避免。</p>
<p><code>Serializable</code> 隔离级别，可以有效的避免幻读、不可重复读、脏读等问题，但会极大的降低数据库的并发能力。</p>
<h4 id="隔离级别"><a class="markdownIt-Anchor" href="#隔离级别"></a> 隔离级别</h4>
<h5 id="未提交读read-uncommitted"><a class="markdownIt-Anchor" href="#未提交读read-uncommitted"></a> 未提交读（Read Uncommitted）</h5>
<p>一个事务可以读取其他事务还未提交的对数据的修改。</p>
<h5 id="提交读read-committed"><a class="markdownIt-Anchor" href="#提交读read-committed"></a> 提交读（Read Committed）</h5>
<p>一个事务只能读取已提交事务所做的修改。</p>
<h5 id="可重复读repeatable-read"><a class="markdownIt-Anchor" href="#可重复读repeatable-read"></a> 可重复读（Repeatable Read）</h5>
<p>一个事务执行过程中多次读取同一数据得到的结果是一样的。</p>
<p><code>MySQL</code> 默认采用的事务隔离级别。</p>
<h5 id="串行化serializable"><a class="markdownIt-Anchor" href="#串行化serializable"></a> 串行化（Serializable）</h5>
<p>事务串行化执行。</p>
<p>隔离级别能解决的并发一致性问题：</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td>提交读</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td>可重复读</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td>串行化</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
</tr>
</tbody>
</table>
<p><code>MySQL</code>  通过<mark class="label primary">多版本并发控制(`MVCC`)</mark>可以实现<mark class="label info">提交读</mark>隔离级别；</p>
<mark class="label info">可重复读</mark>隔离级别需要<mark class="label primary">多版本并发控制(`MVCC`)</mark>配合锁才能实现 。
<h4 id="锁"><a class="markdownIt-Anchor" href="#锁"></a> 锁</h4>
<h5 id="锁粒度"><a class="markdownIt-Anchor" href="#锁粒度"></a> 锁粒度</h5>
<p><code>MySQL</code> 中提供了两种封锁粒度：<strong>行级锁</strong>以及<strong>表级锁</strong>。</p>
<p>锁粒度越小，发生锁争用的可能性就越小，系统的并发度就越高，但同时系统开销会越大。</p>
<p>在选择封锁粒度时，需要在锁开销和并发度之间做一个权衡。</p>
<h5 id="锁类型"><a class="markdownIt-Anchor" href="#锁类型"></a> 锁类型</h5>
<h6 id="读写锁"><a class="markdownIt-Anchor" href="#读写锁"></a> 读写锁</h6>
<ul>
<li>互斥锁：又称写锁，简写为 X 锁。</li>
<li>共享锁：又称读锁，简写为 S 锁。</li>
</ul>
<p>一个事务对数据 A 加了 X 锁，期间其他事务就不能对 A 加任何锁；</p>
<p>一个事务对数据 A 加了 S 锁，期间其他事务可以对 A 加 S 锁，不能加 X 锁。</p>
<h6 id="意向锁"><a class="markdownIt-Anchor" href="#意向锁"></a> 意向锁</h6>
<p><code>MySQL</code> 中存在行级锁和表级锁，一个事务如果想对一张表 A 加 X 锁，需要检测 A 中每一行数据是否加锁，这无疑非常耗时。</p>
<p>为了解决这个问题，<code>MySQL</code> 又引入了<strong>意向锁</strong>概念。</p>
<p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某行数据上加 X 锁或 S 锁。具体规定如下：</p>
<ul>
<li>一个事务在获得某行数据的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li>
<li>一个事务在获得某行数据的 X 锁之前，必须先获得表的 IX 锁。</li>
</ul>
<p>通过引入意向锁，事务想要对表 A 加 X 锁，只需检测是否有其它事务对 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务加 X 锁失败。</p>
<h5 id="锁协议"><a class="markdownIt-Anchor" href="#锁协议"></a> 锁协议</h5>
<h6 id="三级封锁协议"><a class="markdownIt-Anchor" href="#三级封锁协议"></a> 三级封锁协议</h6>
<ul>
<li>
<p>一级封锁协议</p>
<p>事务修改数据需先加 X 锁，可以<strong>解决修改丢失问题</strong>。</p>
<p>因为在一个事务结束并释放 X 锁之前，不会有其他事务修改同一数据。</p>
</li>
<li>
<p>二级封锁协议</p>
<p>在一级的基础上，要求读取数据 A 时必须加 S 锁，<strong>读取完马上释放 S 锁</strong>。</p>
<p>可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。</p>
</li>
<li>
<p>三级封锁协议</p>
<p>在二级的基础上，要求读取数据 A 时必须加 S 锁，<strong>直到事务结束了才能释放 S 锁</strong>。</p>
<p>可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。</p>
</li>
</ul>
<h6 id="两段锁协议"><a class="markdownIt-Anchor" href="#两段锁协议"></a> 两段锁协议</h6>
<p>在 <code>MySQL</code> 中，将事务分成两个阶段，加锁阶段和解锁阶段。</p>
<ul>
<li>
<p>加锁阶段：在该阶段可以进行加锁操作。</p>
<p>在对任何数据进行读操作之前要申请并获得S锁（共享锁，其它事务可以继续加共享锁，但不能加排它锁），在进行写操作之前要申请并获得X锁（排它锁，其它事务不能再获得任何锁）。</p>
<p>加锁不成功，则事务进入等待状态，直到加锁成功才继续执行。</p>
</li>
<li>
<p>解锁阶段：当事务释放了第一个锁以后，事务进入解锁阶段，在该阶段只能进行解锁操作不能再进行加锁操作。</p>
</li>
</ul>
<p>因此，如果一个事务执行期间会锁住多行，要把最可能造成冲突、影响并发度的行放在事务的最后执行。</p>
<h4 id="关系型数据库设计理论"><a class="markdownIt-Anchor" href="#关系型数据库设计理论"></a> 关系型数据库设计理论</h4>
<h5 id="函数依赖"><a class="markdownIt-Anchor" href="#函数依赖"></a> 函数依赖</h5>
<p>记 <code>A-&gt;B</code> 表示 <code>A</code> 函数决定 <code>B</code>，或者说 <code>B</code> 函数依赖于 <code>A</code>。</p>
<p>对于 <code>A-&gt;B</code>，如果能找到 <code>A</code> 的真子集 <code>A'</code>，使得 <code>A'-&gt; B</code>，那么 <code>A-&gt;B</code> 就是<mark class="label primary">部分函数依赖</mark>，否则就是<mark class="label info">完全函数依赖</mark>。</p>
<p>对于 <code>A-&gt;B，B-&gt;C</code>，则 <code>A-&gt;C</code> 是一个传递函数依赖。</p>
<p>如果 <code>&#123;A1，A2，... ，An&#125;</code> 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为<mark class="label primary">主键</mark>。</p>
<h4 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h4>
<p>现有一个学生课程关系，如图：</p>
<img data-src="/archives/351e2939/%E5%AD%A6%E7%94%9F%E8%AF%BE%E7%A8%8B%E8%A1%A8.png" alt="学生课程表" style="zoom:50%;">
<p>这个关系的其中一个函数依赖是：<code>&#123;Sno, Cname&#125; -&gt; &#123;Sname, Sdept, Mname, Grade&#125;</code>。</p>
<p>也就是说，确定学生和课程之后，就能确定其它信息。</p>
<p>并且 <code>&#123;Sno, Cname&#125;</code> 是最小的，所以  <code>&#123;Sno, Cname&#125;</code> 也是键码。</p>
<p>不符合范式的关系，会产生很多异常，主要有以下四种异常：</p>
<ul>
<li>冗余数据：例如 <code>学生-2</code> 出现了两次。</li>
<li>修改异常：修改了一个记录中的信息，但是另一个记录中相同的信息却没有被修改。</li>
<li>删除异常：删除一个信息，那么也会丢失其它信息。例如删除了 <code>课程-1</code> 需要删除第一行和第三行，那么 <code>学生-1</code> 的信息就会丢失。</li>
<li>插入异常：例如想要插入一个学生的信息，如果这个学生还没选课，那么就无法插入。</li>
</ul>
<h5 id="范式"><a class="markdownIt-Anchor" href="#范式"></a> 范式</h5>
<p>范式理论是为了解决以上提到四种异常。</p>
<p>高级别范式的依赖于低级别的范式，<code>1NF</code> 是最低级别的范式。</p>
<h5 id="第一范式1nf"><a class="markdownIt-Anchor" href="#第一范式1nf"></a> 第一范式（<code>1NF</code>）</h5>
<p>属性不可分。</p>
<h5 id="第二范式2nf"><a class="markdownIt-Anchor" href="#第二范式2nf"></a> 第二范式（<code>2NF</code>）</h5>
<p>每个非主属性完全函数依赖于主键。</p>
<p>可以通过分解来满足。</p>
<p>分解前：</p>
<img data-src="/archives/351e2939/%E5%AD%A6%E7%94%9F%E8%AF%BE%E7%A8%8B%E8%A1%A8.png" alt="学生课程表" style="zoom:50%;">
<p>主键为 <code>&#123;Sno, Cname&#125;</code> ，其他函数依赖有：</p>
<ul>
<li><code>&#123;Sno&#125; -&gt; &#123;Sname, Sdept&#125;</code></li>
<li><code>&#123;Sdept&#125; -&gt; &#123;Mname&#125;</code></li>
<li><code>&#123;Sno, Cname&#125; -&gt; &#123;Grade&#125;</code></li>
</ul>
<p>只有 <code>Grade</code> 是完全依赖于主键 <code>&#123;Sno, Cname&#125;</code> 的，<code>Sname, Sdept, Mname</code> 要么部分依赖于主键，要么不依赖于主键，因此可以对这几个属性进行拆分。</p>
<p>分解后：</p>
<p>关系-1</p>
<img data-src="/archives/351e2939/%E5%85%B3%E7%B3%BB-1.png" alt="关系-1" style="zoom:50%;">
<p>包含完全依赖：</p>
<ul>
<li><code>&#123;Sno&#125; -&gt; &#123;Sname, Sdept&#125;</code></li>
<li><code>&#123;Sdept&#125; -&gt; &#123;Mname&#125;</code></li>
</ul>
<p>关系-2</p>
<img data-src="/archives/351e2939/%E5%85%B3%E7%B3%BB-2.png" alt="关系-2" style="zoom:50%;">
<p>包含完全依赖：</p>
<ul>
<li><code>&#123;Sno, Cname&#125; -&gt; &#123;Grade&#125;</code></li>
</ul>
<h5 id="第三范式3nf"><a class="markdownIt-Anchor" href="#第三范式3nf"></a> 第三范式（<code>3NF</code>）</h5>
<p>非主属性不传递函数依赖于主键。</p>
<p>上面的关系-1中存在以下传递函数依赖：<code>&#123;Sno&#125; -&gt; &#123;Sdept&#125; -&gt; &#123;Mname&#125;</code>。</p>
<p>可以再分解：</p>
<p>关系-11</p>
<img data-src="/archives/351e2939/%E5%85%B3%E7%B3%BB-11.png" alt="关系-11" style="zoom:50%;">
<p>关系-12</p>
<img data-src="/archives/351e2939/%E5%85%B3%E7%B3%BB-12.png" alt="关系-12" style="zoom:50%;">
]]></content>
      <categories>
        <category>数据库</category>
        <category>系统原理</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>系统原理</tag>
        <tag>事务</tag>
        <tag>ACID</tag>
        <tag>并发一致性</tag>
        <tag>锁</tag>
        <tag>隔离级别</tag>
        <tag>函数依赖</tag>
        <tag>范式</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC基础</title>
    <url>/archives/a4fc2ede.html</url>
    <content><![CDATA[<h4 id="mvc-模式"><a class="markdownIt-Anchor" href="#mvc-模式"></a> <code>MVC</code> 模式</h4>
<p><code>MVC</code> 是一种架构模式：</p>
<ul>
<li><code>M(Model)</code>：数据模型层，提供要展示的数据。</li>
<li><code>V(View)</code>：展示数据。</li>
<li><code>C(Controller)</code>：接收用户的请求，委托数据模型进行处理，将处理后的结果返回给视图，由视图负责展示。</li>
</ul>
<p>其中一种 <code>MVC</code> 架构就是 <code>JSP + servlet + JavaBean</code>。</p>
<span id="more"></span>
<h4 id="servlet-示例"><a class="markdownIt-Anchor" href="#servlet-示例"></a> <code>servlet</code> 示例</h4>
<ul>
<li>新建 <code>maven</code> 工程，添加如下依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>删掉 <code>src</code> 目录，新建一个 <code>maven</code> 模块，并添加 <code>web app</code> 支持</li>
</ul>
<p>具体操作是：右键创建好的 <code>maven</code> 模块 -&gt; <code>Add Framework Support</code> -&gt; <code>web app</code></p>
<ul>
<li>在 <code>WEB-INF</code> 目录下新建一个 <code>jsp</code> 文件夹，新建 <code>hello.jsp</code></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写 <code>servlet</code>，处理用户请求</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;执行了 add 方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;执行了 delete 方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用业务层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 视图转发或重定向</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在 <code>web.xml</code> 中注册 <code>HelloServlet</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.tw.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置 <code>tomcat</code>，并启动测试</li>
</ul>
<p>分别测试：<code>localhost:8080/hello?method=add</code> 和 <code>localhost:8080/hello?method=delete</code></p>
<h4 id="springmvc-概述"><a class="markdownIt-Anchor" href="#springmvc-概述"></a> <code>SpringMVC</code> 概述</h4>
<h4 id="springmvc-核心组件"><a class="markdownIt-Anchor" href="#springmvc-核心组件"></a> <code>SpringMVC</code> 核心组件</h4>
<h5 id="前端控制器-dispatcherservlet"><a class="markdownIt-Anchor" href="#前端控制器-dispatcherservlet"></a> 前端控制器 <code>DispatcherServlet</code></h5>
<p><code>DispatcherServlet</code> 是 <code>SpringMVC</code> 的核心，作用是将用户的请求转发给不同的处理器，然后将处理结果转给视图解析器进行处理，最后将视图解析器的处理结果返回给用户。</p>
<p>接收请求、响应结果，相当于转发器，降低了其它组件之间的耦合度。</p>
<h5 id="处理器映射器-handlermapping"><a class="markdownIt-Anchor" href="#处理器映射器-handlermapping"></a> 处理器映射器 <code>HandlerMapping</code></h5>
<p>根据请求的 <code>url</code> 来查找 <code>Handler</code>。</p>
<h5 id="处理器适配器-handleradapter"><a class="markdownIt-Anchor" href="#处理器适配器-handleradapter"></a> 处理器适配器 <code>HandlerAdapter</code></h5>
<h5 id="处理器-handler"><a class="markdownIt-Anchor" href="#处理器-handler"></a> 处理器 <code>Handler</code></h5>
<h5 id="视图解析器-viewresolver"><a class="markdownIt-Anchor" href="#视图解析器-viewresolver"></a> 视图解析器 <code>ViewResolver</code></h5>
<h5 id="视图-view"><a class="markdownIt-Anchor" href="#视图-view"></a> 视图 <code>View</code></h5>
<h4 id="springmvc-执行流程"><a class="markdownIt-Anchor" href="#springmvc-执行流程"></a> <code>SpringMVC</code> 执行流程</h4>
<ul>
<li>用户请求发送到 <code>DispatcherServlet</code></li>
<li><code>DispatcherServlet</code> 调用处理器映射器 <code>HandlerMapping</code></li>
</ul>
<p><img data-src="/archives/a4fc2ede/SpringMVC%E6%97%B6%E5%BA%8F%E5%9B%BE.png" alt="SpringMVC时序图"></p>
<h4 id="springmvc-示例"><a class="markdownIt-Anchor" href="#springmvc-示例"></a> <code>SpringMVC</code> 示例</h4>
<h5 id="配置版"><a class="markdownIt-Anchor" href="#配置版"></a> 配置版</h5>
<ol>
<li>新建一个 <code>Module</code>，添加 <code>web app</code> 支持</li>
<li>添加依赖（因为是在一个父工程下新建的模块，如果父工程已经导了，这里就不用导了）</li>
<li>配置 <code>web.xml</code>，注册 <code>DispatcherServlet</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 DispatcherServlet，SpringMVC 的核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 绑定 SpringMVC 配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动级别为 1，数字越小越早启动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            /: 匹配所有请求，不包括 jsp 页面</span></span><br><span class="line"><span class="comment">            /*: 匹配所有请求，包括 jsp 页面</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>编写 <code>springmvc-servlet.xml</code> 配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理器映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 处理器适配器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器，处理 DispatcherServlet 给它的 ModelAndView --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>编写 <code>controller</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 业务代码</span></span><br><span class="line">        String message = <span class="string">&quot;Hello, SpringMVC&quot;</span>;</span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 视图跳转，拼接后的地址是：/WBE-INF/jsp/test.jsp</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>在 <code>springmvc-servlet.xml</code> 中注册 <code>controller</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>编写 <code>jsp</code> 页面</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>配置 <code>tomcat</code>，启动测试</li>
</ol>
<h5 id="注解版"><a class="markdownIt-Anchor" href="#注解版"></a> 注解版</h5>
<p>前三步和配置版一样。</p>
<ol start="4">
<li>编写 <code>springmvc-servlet.xml</code> 配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.tw.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让 SpringMVC 不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        开启 mvc 注解支持</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系，要想使@RequestMapping注解</span></span><br><span class="line"><span class="comment">        生效，需要向上下文中注册 DefaultAnnotationHandlerMapping 和</span></span><br><span class="line"><span class="comment">        AnnotationMethodHandlerAdapter 实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        annotation-driven 配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>编写 <code>controller</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入 HelloController&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;SpringMVC Annotation&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回的视图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后面几步和配置版一样。</p>
]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next搭建博客：基础搭建</title>
    <url>/archives/92090b6.html</url>
    <content><![CDATA[<h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h3>
<p>通过 <code>Hexo</code> 搭建博客前，需要在本地安装一些必要的环境。</p>
<h4 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> node.js</h4>
<p>命令行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install nodejs</span><br></pre></td></tr></table></figure>
<h4 id="npm"><a class="markdownIt-Anchor" href="#npm"></a> npm</h4>
<p>命令行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install npm</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h3>
<p><code>Hexo</code> 是一个快速、简洁且高效的博客框架。</p>
<h4 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h4>
<p>命令行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h4 id="创建本地博客"><a class="markdownIt-Anchor" href="#创建本地博客"></a> 创建本地博客</h4>
<p>创建一个目录，如：<code>Blog</code>，在此目录下执行初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir Blog</span><br><span class="line">$ <span class="built_in">cd</span> Blog</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo generate     <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo server       <span class="comment"># 在本地服务器运行</span></span><br></pre></td></tr></table></figure>
<p>在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>。</p>
<p>之后就可以通过 <code>hexo new page pageName</code> 和 <code>hexo new postName</code> 创建新的页面 <code>page</code> 和 文章 <code>post</code> 了。</p>
<h3 id="next"><a class="markdownIt-Anchor" href="#next"></a> NexT</h3>
<p><code>Hexo</code> 自带的主题不是很美观（个人感觉），可以安装其他主题来美化博客。</p>
<p><code>Hexo</code> 提供众多主题供用户选择，这里选择使用人数最多的 <code>Next</code> 主题。</p>
<h4 id="安装主题"><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h4>
<p>主题的安装有以下两种方式：</p>
<div class="tabs" id="next-安装"><ul class="nav-tabs"><li class="tab active"><a href="#next-安装-1">git 安装</a></li><li class="tab"><a href="#next-安装-2">npm 安装</a></li></ul><div class="tab-content"><div class="tab-pane active" id="next-安装-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="next-安装-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure></div></div></div>
<p>以上两种方式安装的都是 <code>NexT</code> 的最新版本。</p>
<h4 id="启用主题"><a class="markdownIt-Anchor" href="#启用主题"></a> 启用主题</h4>
<p>修改站点（博客）配置文件 <code>_config.xml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>然后执行以下命令测试一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<h3 id="将博客部署到-gitee-pages"><a class="markdownIt-Anchor" href="#将博客部署到-gitee-pages"></a> 将博客部署到 Gitee Pages</h3>
<p><code>Gitee Pages</code> 是一个免费的静态网页托管服务，可以使用 <code>Gitee Pages</code> 托管博客、项目官网等静态网页。目前 <code>Gitee Pages</code> 支持 <code>Jekyll</code>、<code>Hugo</code>、<code>Hexo</code>编译静态资源。</p>
<h4 id="注册-gtiee-账号"><a class="markdownIt-Anchor" href="#注册-gtiee-账号"></a> 注册 Gtiee 账号</h4>
<h4 id="创建仓库"><a class="markdownIt-Anchor" href="#创建仓库"></a> 创建仓库</h4>
<p><strong>注意<mark>路径</mark>一定要填写 <code>username.gitee.io</code> 这样后面才能使用 <code>Gitee Pages</code> 功能。</strong></p>
<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是 <code>username/username.gitee.io</code>，这是特殊的命名约定，之后就可以通过 <a href="http://username.gitee.io/">http://username.gitee.io</a>  来访问个人主页。</p>
<h4 id="配置-ssh"><a class="markdownIt-Anchor" href="#配置-ssh"></a> 配置 SSH</h4>
<p>上传文件需要配置 <code>ssh key</code>，不然无法上传。</p>
<p>首先先检查一下本地是否已经存在 <code>ssh key</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>
<p>如果不存在，执行以下命令生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;XXXXX@qq.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>邮箱是注册 <code>Gitee</code> 时候的邮箱。</p>
<p>执行完后会在 <code>~/.ssh/</code>下生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件。</p>
<p>点击 <code>Gitee -&gt; 右上角设置 -&gt; SSH 公钥</code>，将 <code>id_rsa.pub</code> 文件内容复制进去即可。</p>
<p>执行以下命令，测试是否配置成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@gitee.com</span><br></pre></td></tr></table></figure>
<h4 id="将本地博客部署到-gitee"><a class="markdownIt-Anchor" href="#将本地博客部署到-gitee"></a> 将本地博客部署到 Gitee</h4>
<p>安装 <code>git</code> 部署需要的包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git —save</span><br></pre></td></tr></table></figure>
<p>编辑站点（博客）配置文件 <code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@gitee.com:username/username.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>打开之前创建的仓库 <code>gitee/username/username</code> ，点击<code>服务 -&gt; Gitee Pages -&gt;更新</code>，就可以通过 <a href="https://gitee.username.io">https://gitee.username.io</a> 访问个人博客了。不过有一点不好的是，每当在本文创建了新的 <code>post</code> 或 <code>page</code> 并重新部署后，都需要手动在 <code>Gitee Pages</code> 更新一下才能看到最新提交的内容。</p>
]]></content>
      <categories>
        <category>Hexo&amp;NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next搭建博客：主题初步美化</title>
    <url>/archives/54ce2e51.html</url>
    <content><![CDATA[<p>安装并启用 <code>Next</code> 主题后，有必要对其进行进一步的美化。通过阅读 <a href="https://theme-next.js.org/">NexT 官方文档</a> 以及网上搜罗的一些其他大神的文章，本文总结了一些对 <code>NexT</code> 的初步美化操作步骤。</p>
<p>新版 <code>NexT</code> 建议复制主题配置文件到站点根目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Installed through npm</span></span><br><span class="line">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Installed through Git</span></span><br><span class="line">cp theme/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>
<p>之后对主题的修改就在 <code>_config.next.yml</code> 中进行配置。这样做的好处是可以不改动 <code>NexT</code> 包中的内容，如果主题有更新，本地可以更加的平滑的随之升级。</p>
<span id="more"></span>
<h3 id="背景图片"><a class="markdownIt-Anchor" href="#背景图片"></a> 背景图片</h3>
<p>将图片放进 <code>source/images</code> 文件夹。</p>
<p>（创建）修改 <code>source/_data/styles.styl</code>，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 背景图片</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/images/bg.jpg</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed; //不重复</span><br><span class="line">    <span class="attribute">background-size</span>: cover;      //填充</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>_config.next.yml</code> 中启用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<p>背景图片也可以设置为动态的，将 <code>url</code> 换成图片网站链接即可，如：<a href="https://source.unsplash.com/random/1600x900">unsplash</a>。这样每次刷新页面都会加载不同的背景图片。</p>
<p>同时，为了更好地显示背景图片，可以设置文章的透明度。</p>
<p>修改 <code>source/_data/styles.styl</code>，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//文章内容的透明度设置</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>opacity</code> 范围是 0~1，0 表示完全透明，1 表示完全不透明。</p>
<h3 id="侧边栏"><a class="markdownIt-Anchor" href="#侧边栏"></a> 侧边栏</h3>
<h4 id="菜单项"><a class="markdownIt-Anchor" href="#菜单项"></a> 菜单项</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment">#home: / || fa fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="comment">#archives: /archives/ || fa fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<p>新版 <code>NexT</code> 的配置文件默认没有生成任何页面，自己希望在侧边栏有哪个菜单项，去掉注释即可。然后执行如下命令，生成对应的页面，要不点击菜单项时会报 404。</p>
<p>以 <code>home</code> 为例，先创建页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;home&quot;</span></span><br></pre></td></tr></table></figure>
<p>命令执行后，会在站点的 <code>source</code> 目录下生成一个 <code>home</code> 目录，其中包括一个 <code>index.md</code> 文件。打开 <code>index.md</code>，在 <code>front matter</code> 中添加：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">type: &quot;about&quot;</span><br></pre></td></tr></table></figure>
<p>其他的页面操作类似。</p>
<h4 id="回到顶部"><a class="markdownIt-Anchor" href="#回到顶部"></a> 回到顶部</h4>
<p>在阅读过程中可以点击回到顶部按钮快速回到顶部。</p>
<p>修改 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="本地搜索"><a class="markdownIt-Anchor" href="#本地搜索"></a> 本地搜索</h4>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>修改主题配置文件 <code>_config.next.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="底部"><a class="markdownIt-Anchor" href="#底部"></a> 底部</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#808080&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">Time_Wait</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3>
<h4 id="阅读进度条"><a class="markdownIt-Anchor" href="#阅读进度条"></a> 阅读进度条</h4>
<p>修改主题配置文件 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">startAt:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure>
<h4 id="文章-id"><a class="markdownIt-Anchor" href="#文章-id"></a> 文章 ID</h4>
<p><code>Hexo</code> 给文章生成的默认的 <code>url</code> 是 <code>username.gitee.io/year/month/day/title.html</code>，为了让 <code>url</code> 简短一点，可以给文章一个固定<code>ID</code>。</p>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件 <code>_config.yml</code>，找到</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://seventw.gitee.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>这样文章的 <code>url</code> 就变成 <code>username.gitee.io/archives/54ce2e51.html</code> 这样的。</p>
<h4 id="文章字数统计"><a class="markdownIt-Anchor" href="#文章字数统计"></a> 文章字数统计</h4>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-word-counter</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件 <code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post Wordcount</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>          <span class="comment"># the number of post words</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>             <span class="comment"># the estimated reading time of post</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span>   <span class="comment"># the number of all posts words</span></span><br><span class="line">  <span class="attr">total_times:</span> <span class="literal">false</span>     <span class="comment"># the estimated reading time of all posts</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                 <span class="comment"># the average Word Length (chars count in word)</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>               <span class="comment"># the average words per minute</span></span><br></pre></td></tr></table></figure>
<p>修改主题配置文件 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span> 		<span class="comment"># 把文章字数和预估阅读时间放在一行</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>  <span class="comment"># 控制是否在文章的底部显示</span></span><br></pre></td></tr></table></figure>
<h4 id="文章首字下沉"><a class="markdownIt-Anchor" href="#文章首字下沉"></a> 文章首字下沉</h4>
<p>在 <code>source/_data/styles.styl</code> 中添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line"><span class="comment">/* height: 32px;*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">42px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="相关文章推荐"><a class="markdownIt-Anchor" href="#相关文章推荐"></a> 相关文章推荐</h4>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>修改主题配置文件 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="渲染器"><a class="markdownIt-Anchor" href="#渲染器"></a> 渲染器</h4>
<p><code>Hexo</code> 自带的 <code>markdown</code> 渲染器不能解析注脚，对其进行更换。</p>
<p>卸载自带的渲染器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uni hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>
<p>下载新的渲染器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件 <code>_config.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Render</span></span><br><span class="line"><span class="attr">markdown_it_plus:</span></span><br><span class="line">    <span class="attr">highlight:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">langPrefix:</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">“”‘’</span></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-sub</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-sup</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-deflist</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-ins</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-mark</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-toc-and-anchor</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">pre_class:</span> <span class="string">highlight</span></span><br></pre></td></tr></table></figure>
<h3 id="标签页"><a class="markdownIt-Anchor" href="#标签页"></a> 标签页</h3>
<p>默认的标签页样式不太好看，可以在在 <code>source/_data/sidebar.njk</code> 中添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span>&#123;</span><br><span class="line">    <span class="comment">/*font-family: Helvetica, Tahoma, Arial;*/</span></span><br><span class="line">    <span class="comment">/*font-weight: 100;*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">counter-reset</span>: tags;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">5px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>:before&#123;</span><br><span class="line">    content: <span class="string">&quot;🔖&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">     <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">     <span class="comment">/*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span></span><br><span class="line">     <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="归档页"><a class="markdownIt-Anchor" href="#归档页"></a> 归档页</h3>
<p>修改 <code>next/layout/_macro/post-collapse.swig</code> 后的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro render(post) %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;my-post post-type-&#123;&#123; post.type | default(&#x27;normal&#x27;) &#125;&#125;&quot;</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/Article&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;my-post-header&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-post-meta&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">&quot;my-post-time&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;dateCreated&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">datetime</span>=<span class="string">&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;</span> &gt;</span></span><br><span class="line">          &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      &lt;&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125; class=&quot;my-post-title&quot;&gt;</span><br><span class="line">        &#123;% if post.link %&#125;&#123;# Link posts #&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;my-post-title-link post-title-link-external&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.link) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; post.title or post.link &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-external-link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;my-post-title-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">              &#123;% if post.type === &#x27;picture&#x27; %&#125;</span><br><span class="line">                &#123;&#123; post.content &#125;&#125;</span><br><span class="line">              &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; post.title | default(__(&#x27;post.untitled&#x27;)) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &lt;/&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>
<p>修改 <code>source/_data/styles.styl</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 归档页样式 began */</span></span><br><span class="line"><span class="selector-class">.page-archive</span> <span class="selector-class">.archive-page-counter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-time</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mypost</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.my-post-title-link</span>:before&#123;</span><br><span class="line">  top: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;📚&quot;</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font</span>: normal normal normal <span class="number">14px</span>/<span class="number">1</span> FontAwesome;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">104</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  //<span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.my-post-title-link</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-title</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">4.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4c4948</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    //<span class="attribute">margin-left</span>: <span class="number">4rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-header</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: top;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line">//<span class="selector-class">.my-post-title-link</span>&#123;</span><br><span class="line">//  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">//  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">//&#125;</span><br><span class="line"><span class="selector-class">.my-post-meta</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#99a9bf</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#114142</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.post-block</span><span class="selector-class">.tag</span> <span class="selector-class">.collection-title</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#3f3f3f</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b4e8fa</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1.5px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3f3f3f</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.category-list-link</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">104</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  //<span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 归档页样式 end */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo&amp;NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>初步美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Tag Plugins 的使用</title>
    <url>/archives/c9ea8104.html</url>
    <content><![CDATA[<p>Tag Plugin 是一种使 Hexo 支持特殊样式内容的方法。例如，我们无法在标准 Markdown 中显示具有自定义尺寸的图像。然后我们可以使用标签插件来解决它。 Hexo 有很多可以帮助用户的标签。 Hexo 还具有主题接口，使主题能够创建自己的标签。</p>
<span id="more"></span>
<h4 id="quote"><a class="markdownIt-Anchor" href="#quote"></a> Quote</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<p>没有参数的普通 <code>blockquote</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<p>引用书上的句子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<p>引用网络上的文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote>
<p>还有一种特殊的 <code>quote</code> — <code>centered quote</code>，简写成 <code>cq</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125; 梅花香自苦寒来 &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>梅花香自苦寒来</p>

</blockquote>
<h4 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>[class]</code> : <em>可选参数.</em> 可选值: default | primary | success | info | warning | danger.</li>
<li><code>[no-icon]</code> : <em>可选参数.</em> 是否要提示标志.</li>
<li><code>[summary]</code> : <em>可选参数.</em> 提示的摘要.</li>
</ul>
<p>所有参数都是可选的。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note %&#125;</span><br><span class="line">#### No class style</span><br><span class="line">(without define class style)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note "><h5 id="no-parameter"><a class="markdownIt-Anchor" href="#no-parameter"></a> No parameter</h5>
<p>(without define class style)</p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">#### Default</span><br><span class="line">Welcome to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note default"><h5 id="default"><a class="markdownIt-Anchor" href="#default"></a> Default</h5>
<p>Welcome to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">#### Primary</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note primary"><h5 id="primary"><a class="markdownIt-Anchor" href="#primary"></a> Primary</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">#### Success</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><h5 id="success"><a class="markdownIt-Anchor" href="#success"></a> Success</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">#### Info</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><h5 id="info"><a class="markdownIt-Anchor" href="#info"></a> Info</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### Dange</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger"><h5 id="danger"><a class="markdownIt-Anchor" href="#danger"></a> Danger</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">#### No icon note</span><br><span class="line">Note **without** icon: &#96;note info no-icon&#96;</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon"><h5 id="without-icon"><a class="markdownIt-Anchor" href="#without-icon"></a> Without icon</h5>
<p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note primary This is a summary %&#125;</span><br><span class="line">#### Details and summary</span><br><span class="line">Note with summary: &#96;note primary This is a summary&#96;</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<details class="note primary"><summary><p>This is a summary</p>
</summary>
<h5 id="with-summary"><a class="markdownIt-Anchor" href="#with-summary"></a> With Summary</h5>
<p>Note with summary: <code>note primary This is a summary</code></p>

</details>
<h4 id="label"><a class="markdownIt-Anchor" href="#label"></a> Label</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@text %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>[class]</code> : <em>可选参数.</em> 可选值: <code>default</code> | <code>primary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code>.</p>
<p>如果没有指定参数，使用浏览器的默认风格.</p>
</li>
<li>
<p><code>text</code> : 要标注的文本，<code>@text</code> 和 <code>[class]</code> 之间的空格可有可无.<br>
E.g. <code>success @text</code> 和 <code>success@text</code> 是一样的.</p>
</li>
</ul>
<h5 id="default"><a class="markdownIt-Anchor" href="#default"></a> default</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label default@default label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label default">default label</mark>
<h5 id="primary"><a class="markdownIt-Anchor" href="#primary"></a> Primary</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label primary@primary label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label primary">primary label</mark>
<h5 id="success"><a class="markdownIt-Anchor" href="#success"></a> Success</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label success@success label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label success">success label</mark>
<h5 id="info"><a class="markdownIt-Anchor" href="#info"></a> Info</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label info@info label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label info">info label</mark>
<h5 id="warning"><a class="markdownIt-Anchor" href="#warning"></a> Warning</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label warning@warning label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label warning">warning label</mark>
<h5 id="danger"><a class="markdownIt-Anchor" href="#danger"></a> Danger</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label danger@danger label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label danger">danger label</mark>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mark&gt;标志&lt;&#x2F;mark&gt;</span><br></pre></td></tr></table></figure>
<p><mark>标志</mark></p>
<h4 id="tabs"><a class="markdownIt-Anchor" href="#tabs"></a> Tabs</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>Unique name</code> : 标签块的唯一名称.</p>
<p>只需保证当前页面唯一.</p>
</li>
<li>
<p><code>[index]</code> : <em>可选参数.</em> 默认选定的标签项.<br>
如果没有指定，第一个标签将会被选定.<br>
如果为 -1，则没有默认的选定标签.</p>
</li>
<li>
<p><code>[Tab caption]</code> : <em>可选参数.</em> 当前标签的标题.<br>
如果没有指定标题，将用标签块后根标签的索引作为标题.<br>
如果没有指定标题，但是指定了 <code>@icon</code>，则标题可以为空.</p>
</li>
<li>
<p><code>[@icon]</code> : <em>可选参数.</em> Font Awesome icon name.</p>
</li>
</ul>
<p>例子：</p>
<h5 id="默认选中第一个标签"><a class="markdownIt-Anchor" href="#默认选中第一个标签"></a> 默认选中第一个标签</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1">Unique name 1</a></li><li class="tab"><a href="#unique-name-2">Unique name 2</a></li><li class="tab"><a href="#unique-name-3">Unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="指定选中第三个标签"><a class="markdownIt-Anchor" href="#指定选中第三个标签"></a> 指定选中第三个标签</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab"><a href="#unique-name-1">Unique name 1</a></li><li class="tab"><a href="#unique-name-2">Unique name 2</a></li><li class="tab active"><a href="#unique-name-3">Unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane active" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="自定义标签项标题"><a class="markdownIt-Anchor" href="#自定义标签项标题"></a> 自定义标签项标题</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab Solution 1 --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 2 --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 3 --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1">Solution 1</a></li><li class="tab"><a href="#unique-name-2">Solution 2</a></li><li class="tab"><a href="#unique-name-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="只带-icon-的标签"><a class="markdownIt-Anchor" href="#只带-icon-的标签"></a> 只带 <code>icon</code> 的标签</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab @text-width --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @font --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @bold --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1"><i class="fa fa-text-width"></i></a></li><li class="tab"><a href="#unique-name-2"><i class="fa fa-font"></i></a></li><li class="tab"><a href="#unique-name-3"><i class="fa fa-bold"></i></a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="标签永久链接"><a class="markdownIt-Anchor" href="#标签永久链接"></a> 标签永久链接</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Permalink for &gt; [Tab one](#tab-one).</span><br><span class="line">Permalink for &gt; [Tab one 1](#tab-one-1).</span><br><span class="line">Permalink for &gt; [Tab one 2](#tab-one-2).</span><br><span class="line">Permalink for &gt; [Tab one 3](#tab-one-3).</span><br><span class="line"></span><br><span class="line">Permalink for &gt; [Tab two](#tab-two).</span><br><span class="line">Permalink for &gt; [Tab two 1](#tab-two-1).</span><br><span class="line">Permalink for &gt; [Tab two 2](#tab-two-2).</span><br><span class="line">Permalink for &gt; [Tab two 3](#tab-two-3).</span><br><span class="line"></span><br><span class="line">&#123;% tabs Tab one %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% tabs Tab two %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<p>Permalink for &gt; <a href="#tab-one">Tab one</a>.<br>
Permalink for &gt; <a href="#tab-one-1">Tab one 1</a>.<br>
Permalink for &gt; <a href="#tab-one-2">Tab one 2</a>.<br>
Permalink for &gt; <a href="#tab-one-3">Tab one 3</a>.</p>
<p>Permalink for &gt; <a href="#tab-two">Tab two</a>.<br>
Permalink for &gt; <a href="#tab-two-1">Tab two 1</a>.<br>
Permalink for &gt; <a href="#tab-two-2">Tab two 2</a>.<br>
Permalink for &gt; <a href="#tab-two-3">Tab two 3</a>.</p>
<div class="tabs" id="tab-one"><ul class="nav-tabs"><li class="tab active"><a href="#tab-one-1">Tab one 1</a></li><li class="tab"><a href="#tab-one-2">Tab one 2</a></li><li class="tab"><a href="#tab-one-3">Tab one 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-one-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="tab-one-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="tab-one-3"><p><strong>Tab 3.</strong></p></div></div></div>
<div class="tabs" id="tab-two"><ul class="nav-tabs"><li class="tab active"><a href="#tab-two-1">Tab two 1</a></li><li class="tab"><a href="#tab-two-2">Tab two 2</a></li><li class="tab"><a href="#tab-two-3">Tab two 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-two-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="tab-two-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="tab-two-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h4 id="button"><a class="markdownIt-Anchor" href="#button"></a> Button</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>url</code> : 绝对或相对 URL</li>
<li><code>text</code> : 按钮文字，如果未指定图标则为必须</li>
<li><code>icon</code> : FontAwesome 图标名称（开头没有’fa-‘）。如果未指定文本，则为必需</li>
<li><code>[class]</code> : FontAwesome 类：<code>fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X</code> ，可选参数。</li>
<li><code>[title]</code> : 鼠标悬停时的工具提示，可选参数。</li>
</ul>
<p>注意：最好添加 `` 标签，测试时没加 div，下面显示不完全，而且加上更加美观。</p>
<div>
  <a class="btn" href="https://time_wait.gitee.io/" title="博客首页"><i class="fa fa-home fa-fw"></i>首页</a>
</div>
<p>其他一些例子：</p>
<h5 id="只有-text"><a class="markdownIt-Anchor" href="#只有-text"></a> 只有 <code>text</code></h5>
<a class="btn" href="#">Text</a>
<h5 id="只有-icon"><a class="markdownIt-Anchor" href="#只有-icon"></a> 只有 <code>icon</code></h5>
<div><a class="btn" href="#"><i class="fa fa-home fa-5x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-4x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-3x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-2x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-lg"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home"></i></a></div>
<h5 id="有-text-和-title"><a class="markdownIt-Anchor" href="#有-text-和-title"></a> 有 <code>text</code> 和 <code>title</code></h5>
<a class="btn" href="#" title="Title">Text & Title</a>
<h5 id="有-text-和-icon"><a class="markdownIt-Anchor" href="#有-text-和-icon"></a> 有 <code>text</code> 和 <code>icon</code></h5>
<p>
  <a class="btn" href="#"><i class="fa fa-home"></i>Text & Icon</a>
</p>
<p>最后，按钮 tag 还可以嵌套在其他 tag 中使用。</p>
<h4 id="link-grid"><a class="markdownIt-Anchor" href="#link-grid"></a> Link Grid</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% linkgrid [image] [delimiter] [comment] %&#125;&#123;% endlinkgrid %&#125;</span><br><span class="line">&lt;!-- Tag Alias --&gt;</span><br><span class="line">&#123;% lg [image] [delimiter] [comment] %&#125;&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>[image]</code> : <em>Optional parameter.</em> Default image URL.</li>
<li><code>[delimiter]</code> : <em>Optional parameter.</em> If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.</li>
<li><code>[comment]</code> : <em>Optional parameter.</em> If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.</li>
</ul>
<div class="link-grid"><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>
<div class="link-grid"><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>]]></content>
      <categories>
        <category>Hexo&amp;NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Tag Plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<p>Welcome<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Test <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
  </entry>
  <entry>
    <title>UDP和TCP</title>
    <url>/archives/c18409ab.html</url>
    <content><![CDATA[<h4 id="udp"><a class="markdownIt-Anchor" href="#udp"></a> <code>UDP</code></h4>
<h5 id="udp-特点"><a class="markdownIt-Anchor" href="#udp-特点"></a> <code>UDP</code> 特点</h5>
<p>用户数据报协议（<code>User Datagram Protocol</code>，<code>UDP</code>）的特点：</p>
<ul>
<li>无连接</li>
<li>尽最大可能交付</li>
<li>没有拥塞控制</li>
<li>面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 <code>UDP</code> 首部）</li>
<li>支持一对一、一对多、多对一和多对多的交互通信</li>
</ul>
<span id="more"></span>
<h5 id="udp-首部"><a class="markdownIt-Anchor" href="#udp-首部"></a> <code>UDP</code> 首部</h5>
<img data-src="/archives/c18409ab/UDP%E9%A6%96%E9%83%A8.png" alt="UDP首部" style="zoom:60%;">
<h4 id="tcp"><a class="markdownIt-Anchor" href="#tcp"></a> <code>TCP</code></h4>
<h5 id="tcp-特点"><a class="markdownIt-Anchor" href="#tcp-特点"></a> <code>TCP</code> 特点</h5>
<ul>
<li>传输控制协议（<code>Transmission Control Protocol</code>，<code>TCP</code>）的特点：</li>
<li>面向连接</li>
<li>提供可靠交付</li>
<li>有流量控制和拥塞控制，</li>
<li>提供全双工通信</li>
<li>面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块）</li>
<li>每一条 <code>TCP</code> 连接只能是点对点的（一对一）。</li>
</ul>
<h5 id="tcp-首部"><a class="markdownIt-Anchor" href="#tcp-首部"></a> <code>TCP</code> 首部</h5>
<img data-src="/archives/c18409ab/TCP%E9%A6%96%E9%83%A8.png" alt="TCP首部" style="zoom:50%;">
<ul>
<li>序号 - 用于对报文段进行编号</li>
<li>确认号 - 期望收到的下一个报文段的编号</li>
<li><code>ACK</code> -</li>
<li><code>SYN</code> -</li>
<li><code>FIN</code> -</li>
<li>窗口 -</li>
</ul>
<h4 id="tcp-三次握手"><a class="markdownIt-Anchor" href="#tcp-三次握手"></a> <code>TCP</code> 三次握手</h4>
<img data-src="/archives/c18409ab/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="TCP三次握手" style="zoom:60%;">
<p>三次握手过程：</p>
<ul>
<li>服务器 <code>B</code> 处于监听状态，等待连接请求</li>
<li>客户端 <code>A</code> 向 <code>B</code> 发起一个连接请求，选择一个初始序号 x</li>
<li><code>B</code> 收到连接请求后，向 <code>A</code> 发送确认报文，确认号为 x + 1，同时也选择一个初始号 y</li>
<li><code>A</code> 收到 <code>B</code> 的确认报文后，再次向 <code>B</code> 发送确认报文</li>
<li><code>B</code> 收到确认，连接真正建立</li>
</ul>
<p>为什么需要三次握手：</p>
<p>第三次握手是为了过滤掉失效的连接请求。</p>
<p>如果不进行三次握手，服务器每收到一个连接请求就建立一个连接。但是会有这样的情况，客户端第一发送连接请求，由于网络拥塞，迟迟没有收到服务器的确认报文，在等待一段时间后，重新发起了一个连接请求，并很快收到了应答。此时服务器端建立了两个连接，但是对于客户端来说，服务端为其第一次请求建立的连接是无效的，白白浪费了资源。</p>
<p>而如果有三次握手，服务端并不是在收到连接请求后就建立一个连接，而是要等客服端对此次连接再进行确认才会真正建立一个连接。向上面所说那种情况，客户端收到第一次连接请求的确认报文后会忽略，不再向服务端发出确认，服务端也就不会建立这个连接。</p>
<h4 id="tcp-四次挥手"><a class="markdownIt-Anchor" href="#tcp-四次挥手"></a> <code>TCP</code> 四次挥手</h4>
<img data-src="/archives/c18409ab/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="TCP四次挥手" style="zoom:67%;">
<p>四次挥手过程：</p>
<ul>
<li><code>A</code> 向 <code>B</code> 发送连接释放报文</li>
<li><code>B</code> 收到后向 <code>A</code> 发送确认报文，此时连接处于半关闭状态，<code>B</code> 可以向 <code>A</code> 继续发送数据</li>
<li>当 <code>B</code> 数据发送完毕，向 <code>A</code> 发送连接释放报文</li>
<li><code>A</code> 收到后向 <code>B</code> 发送确认报文，<code>A</code> 进入 <code>TIME_WAIT</code> 状态，等待 <code>2MSL</code>（最大报文存活时间）后释放连接</li>
<li><code>B</code> 收到 <code>A</code> 的确认后释放连接</li>
</ul>
<p>为什么要有一个 <code>TIME_WAIT</code> 状态：</p>
<ul>
<li>如果 <code>B</code> 没有在 <code>2MSL</code> 时间内收到 <code>A</code> 的确认，可以重新向 <code>A</code> 发送释放连接报文。</li>
<li>等待 <code>2MSL</code> 时间可以让此次连接的所有报文从网络中消失，如果新的请求 <code>IP</code> 和端口如果和此次一样，不会造成旧连接的报文出现在新连接中。</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
        <tag>三次握手</tag>
        <tag>四次挥手</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP基础</title>
    <url>/archives/22f97770.html</url>
    <content><![CDATA[<h4 id="http-报文"><a class="markdownIt-Anchor" href="#http-报文"></a> <code>HTTP</code> 报文</h4>
<p>请求报文结构</p>
<ul>
<li>第一行是包含请求方法、<code>URL</code>、协议版本；</li>
<li>接下来的多行都是请求首部，每个首部都有一个首部名称，以及对应的值。</li>
<li>一个空行用来分隔首部和内容主体</li>
<li>最后是请求的内容主体</li>
</ul>
<span id="more"></span>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET http:&#x2F;&#x2F;www.example.com&#x2F; HTTP&#x2F;1.1</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Host: www.example.com</span><br><span class="line">If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class="line">If-None-Match: &quot;3147526947+gzip&quot;</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 xxx</span><br><span class="line"></span><br><span class="line">param1&#x3D;1&amp;param2&#x3D;2</span><br></pre></td></tr></table></figure>
<p>响应报文结构</p>
<ul>
<li>第一行包含协议版本、状态码以及描述</li>
<li>接下来多行也是首部内容</li>
<li>一个空行分隔首部和内容主体</li>
<li>最后是响应的内容主体</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Age: 529651</span><br><span class="line">Cache-Control: max-age&#x3D;604800</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 648</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br><span class="line">Date: Mon, 02 Nov 2020 17:53:39 GMT</span><br><span class="line">Etag: &quot;3147526947+ident+gzip&quot;</span><br><span class="line">Expires: Mon, 09 Nov 2020 17:53:39 GMT</span><br><span class="line">Keep-Alive: timeout&#x3D;4</span><br><span class="line">Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Server: ECS (sjc&#x2F;16DF)</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Cache: HIT</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Example Domain&lt;&#x2F;title&gt;</span><br><span class="line">	&#x2F;&#x2F; 省略... </span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="http-方法"><a class="markdownIt-Anchor" href="#http-方法"></a> <code>HTTP</code> 方法</h4>
<h5 id="get"><a class="markdownIt-Anchor" href="#get"></a> <code>GET</code></h5>
<p>获取资源</p>
<h5 id="head"><a class="markdownIt-Anchor" href="#head"></a> <code>head</code></h5>
<p>和 <code>GET</code> 方法类似，但是不返回报文实体主体部分。</p>
<p>主要用于确认 <code>URL</code> 的有效性以及资源更新的日期时间等。</p>
<h5 id="post"><a class="markdownIt-Anchor" href="#post"></a> <code>post</code></h5>
<p>传输数据</p>
<h5 id="get-和-post-的比较"><a class="markdownIt-Anchor" href="#get-和-post-的比较"></a> <code>GET</code> 和 <code>POST</code> 的比较</h5>
<h6 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h6>
<p><code>GET</code> 用于获取资源，而 <code>POST</code> 用于传输实体主体。</p>
<h6 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h6>
<p><code>GET</code> 和 <code>POST</code> 的请求都能使用额外的参数，<code>GET</code> 的参数是以查询字符串出现在 <code>URL</code> 中，<code>POST</code> 的参数存储在请求报文内容主体中。</p>
<h6 id="安全"><a class="markdownIt-Anchor" href="#安全"></a> 安全</h6>
<p>安全的 <code>HTTP</code> 方法不会改变服务器状态。</p>
<p><code>GET</code> 方法是安全的，<code>POST</code> 不是安全的。</p>
<h6 id="幂等"><a class="markdownIt-Anchor" href="#幂等"></a> 幂等</h6>
<p>幂等的 <code>HTTP</code> 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。</p>
<p><code>GET</code> 方法时幂等的，<code>POST</code> 方法不是幂等的。</p>
<h4 id="状态码"><a class="markdownIt-Anchor" href="#状态码"></a> <code>状态码</code></h4>
<table>
<thead>
<tr>
<th>状态码</th>
<th>类别</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx</td>
<td>Informational（信息性状态码）</td>
<td>接收的请求正在处理</td>
</tr>
<tr>
<td>2xx</td>
<td>Success（成功状态码）</td>
<td>请求正常处理完毕</td>
</tr>
<tr>
<td>3xx</td>
<td>Redirection（重定向状态码）</td>
<td>需要进行附加操作以完成请求</td>
</tr>
<tr>
<td>4xx</td>
<td>Client Error（客户端错误状态码）</td>
<td>服务器无法处理请求</td>
</tr>
<tr>
<td>5xx</td>
<td>Server Error（服务器错误状态码）</td>
<td>服务器处理请求出错</td>
</tr>
</tbody>
</table>
<p>常见状态码：</p>
<ul>
<li>200 OK：请求成功。</li>
<li>301 Moved Permanently：永久性重定向。</li>
<li>302 Found：临时性重定向。</li>
<li>400 Bad Request：请求报文中存在语法错误。</li>
<li>401 Unauthorized：认证失败。</li>
<li>403 Forbidden：请求被拒绝。</li>
<li>404 Not Found：</li>
<li>500 Internal Server Error：服务器正在执行请求时发生错误。</li>
<li>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>HTTP</tag>
        <tag>HTTP 方法</tag>
        <tag>HTTP 状态码</tag>
      </tags>
  </entry>
  <entry>
    <title>cookie和session</title>
    <url>/archives/319bf02d.html</url>
    <content><![CDATA[<h4 id="cookie-概述"><a class="markdownIt-Anchor" href="#cookie-概述"></a> <code>cookie</code> 概述</h4>
<p>在网路中，浏览器经常要向服务器请求数据，请求数据前要和服务器建立连接，但是 <code>HTTP</code> 请求是无状态的，也就是说浏览器每次在向服务器发送请求数据都要重新建立连接，频繁建立连接浪费资源。</p>
<p><code>cookie</code> 的出现就是为了解决这个问题的，浏览器在第一次和服务器建立连接后，服务器会返回一些数据（<code>cookie</code>）给浏览器，让浏览器保存在本地。浏览器再次向服务器发送 <code>HTTP</code> 请求时，把本地缓存的 <code>cookie</code> 一起发给服务器，服务器通过 <code>cookie</code> 就可以判断出是哪个用户了。</p>
<p><code>cookie</code> 只能存储少量数据，一般不超过 <code>4KB</code>。</p>
<span id="more"></span>
<h5 id="cookie-的生命周期"><a class="markdownIt-Anchor" href="#cookie-的生命周期"></a> <code>cookie</code> 的生命周期</h5>
<p>如果不设置过期时间 <code>expires</code> 的话，<code>cookie</code> 的生命周期就是一次会话，浏览器的打开到关闭算一次会话。在浏览器关闭后，缓存的会话会被销毁。</p>
<h4 id="session-概述"><a class="markdownIt-Anchor" href="#session-概述"></a> <code>session</code> 概述</h4>
<p><code>session</code> 的作用和 <code>cookie</code> 类似。不过，不同于 <code>cookie</code> 存储于浏览器，<code>session</code> 是存储在服务器上的。</p>
<p>存储在服务器上的数据更安全，缺点是会占用服务器的资源。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>cookie</tag>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS、BFS、回溯</title>
    <url>/archives/a81d4ad4.html</url>
    <content><![CDATA[<h4 id="矩阵中寻找字符串"><a class="markdownIt-Anchor" href="#矩阵中寻找字符串"></a> 矩阵中寻找字符串</h4>
<div class="note "><p>设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。</p>
<p>路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。</p>
</div>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span>[][] visited;</span><br><span class="line"><span class="keyword">int</span>[][] directions = &#123;&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>[][] matrix, String word)</span> </span>&#123;</span><br><span class="line">    m = matrix.length;</span><br><span class="line">    n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    len = word.length();</span><br><span class="line">    visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs(matrix, word, i, j, <span class="number">0</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] matrix, String word, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index == len - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> matrix[i][j] == word.charAt(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (matrix[i][j] == word.charAt(index)) &#123;</span><br><span class="line">        visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = i + directions[k][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y = j + directions[k][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (inArea(x, y) &amp;&amp; !visited[x][y]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dfs(matrix, word, x, y, index + <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">inArea</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="岛屿数量"><a class="markdownIt-Anchor" href="#岛屿数量"></a> 岛屿数量</h4>
<div class="note "><p>给一个01矩阵，1代表是陆地，0代表海洋， 如果两个1相邻，那么这两个1属于同一个岛。只考虑上下左右为相邻。</p>
<p>岛屿: 相邻陆地可以组成一个岛屿（相邻:上下左右） 判断岛屿个数。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solve</span> <span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                auxiliary(grid, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">auxiliary</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= grid.length || j &lt; <span class="number">0</span> || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以 grid[i][j] 为起始将相邻的所有元素置为 0</span></span><br><span class="line">    grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    auxiliary(grid, i - <span class="number">1</span>, j);</span><br><span class="line">    auxiliary(grid, i + <span class="number">1</span>, j);</span><br><span class="line">    auxiliary(grid, i, j - <span class="number">1</span>);</span><br><span class="line">    auxiliary(grid, i, j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="矩阵最长递增路径"><a class="markdownIt-Anchor" href="#矩阵最长递增路径"></a> 矩阵最长递增路径</h4>
<div class="note "><p>给定一个矩阵，矩阵内所有数均为非负整数。求一条路径，该路径上所有数是递增的。</p>
<p>这个路径必须满足以下条件：</p>
<p>1、对于每个单元格，你可以往上，下，左，右四个方向移动。 不能在对角线上移动或移动到边界外。</p>
<p>2、你不能走重复的单元格。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] dp;</span><br><span class="line"><span class="comment">//好东西啊！</span></span><br><span class="line"><span class="keyword">int</span>[] directions = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dp[x][y] != <span class="number">0</span>) <span class="keyword">return</span> dp[x][y];</span><br><span class="line">    dp[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> nx = x + directions[i];</span><br><span class="line">        <span class="keyword">int</span> ny = y + directions[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n &amp;&amp; matrix[nx][ny] &lt; matrix[x][y])</span><br><span class="line">            dp[x][y] = Math.max(dp[x][y], <span class="number">1</span> + dfs(matrix, nx, ny));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">    m = matrix.length;</span><br><span class="line">    n = matrix[<span class="number">0</span>].length;</span><br><span class="line">    dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            max = Math.max(max, dfs(matrix, i, j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符串转-ip-地址"><a class="markdownIt-Anchor" href="#字符串转-ip-地址"></a> 字符串转 IP 地址</h4>
<div class="note "><p>现在有一个只包含数字的字符串，将该字符串转化成IP地址的形式，返回所有可能的情况。</p>
<p>例如：给出的字符串为”25525522135”，返回[“255.255.22.135”, &quot;255.255.221.35”]。(顺序没有关系)</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;String&gt; ip = <span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">//存放中间结果</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    dfs(s, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String s, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ip.size() == <span class="number">4</span> &amp;&amp; start == s.length()) &#123;  <span class="comment">//找到一个合法解</span></span><br><span class="line">        res.add(ip.get(<span class="number">0</span>) + <span class="string">&#x27;.&#x27;</span> + ip.get(<span class="number">1</span>) + <span class="string">&#x27;.&#x27;</span> + ip.get(<span class="number">2</span>) + <span class="string">&#x27;.&#x27;</span> + ip.get(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s.length() - start &gt; <span class="number">3</span> * (<span class="number">4</span> - ip.size()))  <span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.length() - start &lt; (<span class="number">4</span> - ip.size()))  <span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; start + <span class="number">3</span> &amp;&amp; i &lt; s.length(); i++) &#123;</span><br><span class="line">        num = num * <span class="number">10</span> + (s.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span> || num &gt; <span class="number">255</span>) <span class="keyword">break</span>;  <span class="comment">//剪枝</span></span><br><span class="line"></span><br><span class="line">        ip.add(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">        dfs(s, i + <span class="number">1</span>);</span><br><span class="line">        ip.remove(ip.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="括号生成"><a class="markdownIt-Anchor" href="#括号生成"></a> 括号生成</h4>
<div class="note "><p>给出n对括号，请编写一个函数来生成所有的由n对括号组成的合法组合。</p>
<p>例如，给出n=3，解集为：&quot;((()))&quot;, “(()())”, “(())()”, “()()()”, “()(())”,</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    backtrack(<span class="string">&quot;&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(String s, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l + r == <span class="number">2</span> * n) &#123;</span><br><span class="line">        res.add(s);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &lt; n) &#123;</span><br><span class="line">        backtrack(s + <span class="string">&quot;(&quot;</span>, l + <span class="number">1</span>, r, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">        backtrack(s + <span class="string">&quot;)&quot;</span>, l, r + <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="集合的所有子集"><a class="markdownIt-Anchor" href="#集合的所有子集"></a> 集合的所有子集</h4>
<div class="note "><p>现在有一个没有重复元素的整数集合S，求S的所有子集。</p>
<p>注意：你给出的子集中的元素必须按升序排列，给出的解集中不能出现重复的元素。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] S) &#123;</span><br><span class="line">    <span class="keyword">if</span> (S.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    Arrays.sort(S);</span><br><span class="line"></span><br><span class="line">    dfs(S, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; num.length; ++i) &#123;</span><br><span class="line">        list.add(num[i]);</span><br><span class="line">        dfs(num, i + <span class="number">1</span>);</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="无重复数字的所有排列"><a class="markdownIt-Anchor" href="#无重复数字的所有排列"></a> 无重复数字的所有排列</h4>
<div class="note "><p>给出一组数字，返回该组数字的所有排列。</p>
<p>例如：[1,2,3] 的所有排列如下 [1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2], [3,2,1]。</p>
<p>（以数字在数组中的位置靠前为优先级，按字典序排列输出。）</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>[] visited;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line"></span><br><span class="line">    res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    backtrace(nums, list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrace</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list.size() == nums.length) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(list));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        visited[i] = <span class="keyword">true</span>;</span><br><span class="line">        list.add(nums[i]);</span><br><span class="line"></span><br><span class="line">        backtrace(nums, list);</span><br><span class="line"></span><br><span class="line">        visited[i] = <span class="keyword">false</span>;</span><br><span class="line">        list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="有重复数字的所有排列"><a class="markdownIt-Anchor" href="#有重复数字的所有排列"></a> 有重复数字的所有排列</h4>
<div class="note "><p>给出一组可能包含重复项的数字，返回该组数字的所有排列。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] num) &#123;</span><br><span class="line">    Arrays.sort(num);</span><br><span class="line">    <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[num.length];</span><br><span class="line">    helper(num, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] num, ArrayList list, <span class="keyword">boolean</span>[] flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = list.size();</span><br><span class="line">    <span class="keyword">if</span> (num.length == size) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(list));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//同层去重</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; num[i] == num[i - <span class="number">1</span>] &amp;&amp; !flag[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        list.add(num[i]);</span><br><span class="line">        temp.add(i);</span><br><span class="line">        flag[i] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        helper(num, list, flag);</span><br><span class="line"></span><br><span class="line">        list.remove(size);</span><br><span class="line">        flag[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="加起来和为目标值的组合"><a class="markdownIt-Anchor" href="#加起来和为目标值的组合"></a> 加起来和为目标值的组合</h4>
<div class="note "><p>给出一组候选数 C 和一个目标数 T，找出候选数中起来和等于 T 的所有组合。</p>
<p>C 中的每个数字在一个组合中只能使用一次。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt; combination = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Arrays.sort(num);</span><br><span class="line">    backtrack(num, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target, <span class="keyword">int</span> sum, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(combination));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; num.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum + num[i] &gt; target) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt; index &amp;&amp; num[i] == num[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        combination.add(num[i]);</span><br><span class="line">        backtrack(num, target, sum + num[i], i + <span class="number">1</span>);</span><br><span class="line">        combination.remove(combination.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h4>
<h4 id="n-皇后"><a class="markdownIt-Anchor" href="#n-皇后"></a> N 皇后</h4>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>DFS、BFS、回溯</category>
      </categories>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/archives/e8eb0481.html</url>
    <content><![CDATA[<h4 id="在两个长度相等的排序数组中找到中位数"><a class="markdownIt-Anchor" href="#在两个长度相等的排序数组中找到中位数"></a> 在两个长度相等的排序数组中找到中位数</h4>
<div class="note "><p>给定两个有序数组arr1和arr2，已知两个数组的长度都为N，求两个数组中所有数的上中位数。</p>
<p>上中位数：假设递增序列长度为n，若n为奇数，则上中位数为第n/2+1个数；否则为第n/2个数。</p>
<p>[要求] 时间复杂度为<code>O(logN)</code>，额外空间复杂度为<code>O(1)</code>。</p>
</div>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMedianinTwoSortedAray</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr1.length;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n - i;</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] &lt; arr2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">            left = i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left == n) <span class="keyword">return</span> arr1[n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">0</span>) <span class="keyword">return</span> arr2[n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Math.max(arr1[left - <span class="number">1</span>], arr2[n - left - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>二分查找</category>
      </categories>
      <tags>
        <tag>二分查找</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉查找树、AVL树、红黑树、B树和B+树</title>
    <url>/archives/f3d84fed.html</url>
    <content><![CDATA[<h4 id="二叉查找树"><a class="markdownIt-Anchor" href="#二叉查找树"></a> 二叉查找树</h4>
<span id="more"></span>
<h4 id="平衡二叉查找avl树"><a class="markdownIt-Anchor" href="#平衡二叉查找avl树"></a> 平衡二叉查找（<code>AVL</code>）树</h4>
<h4 id="红黑树"><a class="markdownIt-Anchor" href="#红黑树"></a> 红黑树</h4>
<h4 id="b树"><a class="markdownIt-Anchor" href="#b树"></a> B树</h4>
<p>B-Tree是满足下列条件的数据结构：</p>
<ul>
<li>
<p>d为大于1的一个正整数，称为B-Tree的度。</p>
</li>
<li>
<p>h为一个正整数，称为B-Tree的高度。</p>
</li>
<li>
<p>每个非叶子节点由n-1个key和n个指针组成，其中d&lt;=n&lt;=2d。</p>
</li>
<li>
<p>每个叶子节点最少包含一个key和两个指针，最多包含2d-1个key和2d个指针，叶节点的指针均为null 。</p>
</li>
<li>
<p>所有叶节点具有相同的深度，等于树高h。</p>
</li>
<li>
<p>key和指针互相间隔，节点两端是指针。</p>
</li>
<li>
<p>一个节点中的key从左到右非递减排列。</p>
</li>
</ul>
<h4 id="b树-2"><a class="markdownIt-Anchor" href="#b树-2"></a> B+树</h4>
<h4 id="红黑树与b树的比较"><a class="markdownIt-Anchor" href="#红黑树与b树的比较"></a> 红黑树与B树的比较</h4>
<p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以文件的形式存储的磁盘上。</p>
<p>这样的话，索引查找过程中就要产生磁盘 <code>IO</code> 消耗，相对于内存存取，<code>IO</code> 存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘 <code>IO</code> 操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘 <code>IO</code> 的存取次数。</p>
<h4 id="b树与b树的比较"><a class="markdownIt-Anchor" href="#b树与b树的比较"></a> B树与B+树的比较</h4>
<p>数据库为什么使用B+树而不是B树：</p>
<ul>
<li>B+树同时支持随机检索和顺序检索；B树只适合随机检索，不支持范围持续。</li>
<li>B+树空间利用率更高，树的高度更低，可减少磁盘读写次数。</li>
<li>B+树的查询效率更加稳定。B树搜索有可能会在非叶子结点结束，越靠近根节点的记录查找时间越短。而在B+树中，任何关键字的查找都必须从根节点到叶节点，所有关键字的查找路径长度相同，因此任何查询效率稳定。</li>
<li>B+树的叶子节点包含所有关键字，并以有序的链表结构存储，增删效率更高。</li>
</ul>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引的数据结构和算法原理</a></li>
<li><a href="https://blog.csdn.net/v_JULY_v/article/details/6530142?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-12.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-12.control">从B树、B+树、B*树谈到R 树</a></li>
</ul>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>树</category>
      </categories>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>树</tag>
        <tag>二叉查找树</tag>
        <tag>AVL树</tag>
        <tag>红黑树</tag>
        <tag>B树</tag>
        <tag>B+树</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算</title>
    <url>/archives/2633a26.html</url>
    <content><![CDATA[<h4 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h4>
<p>0s 表示一串 0，1s 表示一串 1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x ^ 0s = x      x &amp; 0s = <span class="number">0</span>      x | 0s = x</span><br><span class="line">x ^ 1s = ~x     x &amp; 1s = x      x | 1s = 1s</span><br><span class="line">x ^ x = <span class="number">0</span>       x &amp; x = x       x | x = x</span><br></pre></td></tr></table></figure>
<p>利用 x ^ 1s = ~x 的特点，可以将一个数的位级表示翻转；利用 x ^ x = 0 的特点，可以将三个数中重复的两个数去除，只留下另一个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>^<span class="number">1</span>^<span class="number">2</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>利用 x &amp; 0s = 0 和 x &amp; 1s = x 的特点，可以实现掩码操作。一个数 num 与 mask：00111100 进行位与操作，只保留 num 中与 mask 的 1 部分相对应的位。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">01011011</span> &amp;</span><br><span class="line"><span class="number">00111100</span></span><br><span class="line">--------</span><br><span class="line"><span class="number">00011000</span></span><br></pre></td></tr></table></figure>
<p>利用 x | 0s = x 和 x | 1s = 1s 的特点，可以实现设值操作。一个数 num 与 mask：00111100 进行位或操作，将 num 中与 mask 的 1 部分相对应的位都设置为 1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">01011011</span> |</span><br><span class="line"><span class="number">00111100</span></span><br><span class="line">--------</span><br><span class="line"><span class="number">01111111</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="二进制中-1-的个数"><a class="markdownIt-Anchor" href="#二进制中-1-的个数"></a> 二进制中 1 的个数</h4>
<div class="note "><p>输入一个整数，输出该数32位二进制表示中1的个数。其中负数用补码表示。</p>
</div>
<p>方法一：可能会引起死循环</p>
<blockquote>
<ul>
<li>
<p>与 1 做与运算，判断整数的最后一位是否为 1；</p>
</li>
<li>
<p>将整数右移一位，继续判断最后一位为是否 1；</p>
</li>
<li>
<p>重复上述过程，直到整数变为 0。</p>
<p>这个方法对正整数能正常工作，但如果整数为负，则可能出现死循环。如负整数 0x80000000 右移一位会变为 0xC0000000，继续右移最终会变为 0xFFFFFFFF 而陷入死循环。</p>
</li>
</ul>
</blockquote>
<p>方法二：</p>
<blockquote>
<ul>
<li>与 1 做与运算，判断整数的最低为是否为 1；</li>
<li>接着不移动整数，而是将 1 左移一位，然后再与整数做与运算，判断整数的次低为是否为 1；</li>
<li>重复上述过程，循环 32 次。</li>
</ul>
</blockquote>
<p>重复上述过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        c ++;</span><br><span class="line">        n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组中只出现一次的数字"><a class="markdownIt-Anchor" href="#数组中只出现一次的数字"></a> 数组中只出现一次的数字</h4>
<div class="note "><p>一个整型数组里除了两个数字只出现一次，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] FindNumsAppearOnce(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : array) a ^= k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">1</span>) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        a &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : array) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = k;</span><br><span class="line">        tmp &gt;&gt;= cnt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((tmp &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            arr1[i++] = k;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr2[j++] = k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] res = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : arr1) res[<span class="number">0</span>] ^= k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : arr2) res[<span class="number">1</span>] ^= k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] singleNumber(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> diff = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) diff ^= num;</span><br><span class="line">    diff &amp;= -diff;  <span class="comment">// 得到最右一位</span></span><br><span class="line">    <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((num &amp; diff) == <span class="number">0</span>) ret[<span class="number">0</span>] ^= num;</span><br><span class="line">        <span class="keyword">else</span> ret[<span class="number">1</span>] ^= num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组中只出现一次的数字-ii"><a class="markdownIt-Anchor" href="#数组中只出现一次的数字-ii"></a> 数组中只出现一次的数字 II</h4>
<div class="note "><p>给定一个整型数组 arr 和一个整数 k(k&gt;1)。已知 arr 中只有 1 个数出现一次，其他的数都出现 k 次。</p>
<p>请返回只出现了 1 次的数。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">foundOnceNumber</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ((k &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) n ^= a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span>[] bits = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">            <span class="comment">// 统计所有二进制数字的各位上 1 的总数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) bits[i] += (a &amp; (<span class="number">1</span> &lt;&lt; i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bits.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 因为其他数都出现了 k 次，所以 bit[i] 应该是 k 的倍数</span></span><br><span class="line">            <span class="keyword">if</span> (bits[i] % k != <span class="number">0</span>) n |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="不用加减乘除做加法"><a class="markdownIt-Anchor" href="#不用加减乘除做加法"></a> 不用加减乘除做加法</h4>
<p>a ^ b 表示没有考虑进位的情况下两数的和，(a &amp; b) &lt;&lt; 1 就是进位。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num2 == <span class="number">0</span>) <span class="keyword">return</span> num1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num2 != <span class="number">0</span>) &#123;</span><br><span class="line">        sum = num1 ^ num2;</span><br><span class="line">        carry = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        num1 = sum;</span><br><span class="line">        num2 = carry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="找出数组中缺失的数"><a class="markdownIt-Anchor" href="#找出数组中缺失的数"></a> 找出数组中缺失的数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        ret = ret ^ i ^ nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret ^ nums.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反转一个数的比特位"><a class="markdownIt-Anchor" href="#反转一个数的比特位"></a> 反转一个数的比特位</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverseBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        ret &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        ret |= (n &amp; <span class="number">1</span>);</span><br><span class="line">        n &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="判断一个数是不是-2-的-n-次方"><a class="markdownIt-Anchor" href="#判断一个数是不是-2-的-n-次方"></a> 判断一个数是不是 2 的 n 次方</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解法1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; Integer.bitCount(n) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="判断一个数是不是-4-的-n-次方"><a class="markdownIt-Anchor" href="#判断一个数是不是-4-的-n-次方"></a> 判断一个数是不是 4 的 n 次方</h4>
<p>这种数在二进制表示中有且只有一个奇数位为 1，例如 16（10000）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfFour</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span> &amp;&amp; (num &amp; (num - <span class="number">1</span>)) == <span class="number">0</span> &amp;&amp; (num &amp; <span class="number">0b01010101010101010101010101010101</span>) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="判断一个数的二进制表示是否不会出现连续的-0-和-1"><a class="markdownIt-Anchor" href="#判断一个数的二进制表示是否不会出现连续的-0-和-1"></a> 判断一个数的二进制表示是否不会出现连续的 0 和 1</h4>
<p>对于 1010 这种位级表示的数，把它向右移动 1 位得到 101，这两个数每个位都不同，因此异或得到的结果为 1111。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasAlternatingBits</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = (n ^ (n &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> (a &amp; (a + <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求一个数的补码"><a class="markdownIt-Anchor" href="#求一个数的补码"></a> 求一个数的补码</h4>
<h4 id="统计-0~n-每个数的二进制表示中-1-的个数"><a class="markdownIt-Anchor" href="#统计-0~n-每个数的二进制表示中-1-的个数"></a> 统计 0～n 每个数的二进制表示中 1 的个数</h4>
<p>对于数字 6(110)，它可以看成是 4(100) 再加一个 2(10)，因此 dp[i] = dp[i&amp;(i-1)] + 1;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] countBits(<span class="keyword">int</span> num) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[num + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">        ret[i] = ret[i&amp;(i-<span class="number">1</span>)] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>位运算</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针</title>
    <url>/archives/91a7e4d1.html</url>
    <content><![CDATA[<h4 id="容器盛水问题"><a class="markdownIt-Anchor" href="#容器盛水问题"></a> 容器盛水问题</h4>
<div class="note "><p>给定一个整形数组arr，已知其中所有的值都是非负的，将这个数组看作一个容器，请返回容器能装多少水。</p>
</div>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getWater4</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r = arr.length - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> lmax = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> rmax = arr[arr.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lmax &lt;= rmax) &#123;</span><br><span class="line">            value += Math.max(<span class="number">0</span>, lmax - arr[l]);</span><br><span class="line">            <span class="comment">//更新lmax后再右移</span></span><br><span class="line">            lmax = Math.max(lmax, arr[l++]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value += Math.max(<span class="number">0</span>, rmax - arr[r]);</span><br><span class="line">            <span class="comment">//更新rmax后再左移</span></span><br><span class="line">            rmax = Math.max(rmax, arr[r--]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>双指针</category>
      </categories>
      <tags>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>基本排序算法</title>
    <url>/archives/981a96f7.html</url>
    <content><![CDATA[<h3 id="比较排序"><a class="markdownIt-Anchor" href="#比较排序"></a> 比较排序</h3>
<h4 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] BubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] SelectionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = i;</span><br><span class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; arr.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; minVal) &#123;</span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="keyword">if</span> (index != i) &#123;</span><br><span class="line">          	<span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">          	arr[i] = arr[index];</span><br><span class="line">        		arr[index] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] InsertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; val) <span class="keyword">break</span>;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h4>
<p>希尔排序是一种改进的插入排序，也叫增量减小排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] ShellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = arr.length / <span class="number">2</span>; step &gt; <span class="number">0</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 插入排序思想</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - step;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= step) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; val) <span class="keyword">break</span>;</span><br><span class="line">                arr[j + step] = arr[j];</span><br><span class="line">                j -= step;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + step] = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>[] copy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到待排序数组的中间位置，对左右两个子数组递归</span></span><br><span class="line">    <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    mergeSort(arr, l, mid, copy);</span><br><span class="line">    mergeSort(arr, mid + <span class="number">1</span>, r, copy);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归返回后，左右两个子数组已经有序，接着合并两个有序子数组即可</span></span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        copy[k++] = arr[i] &lt;= arr[j] ? arr[i++] : arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        copy[k++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123;</span><br><span class="line">        copy[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并完成后，将复制数组的数据拷贝回原数组</span></span><br><span class="line">    k = l;</span><br><span class="line">    <span class="keyword">while</span> (k &lt;= r) &#123;</span><br><span class="line">        arr[k] = copy[k++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 维持最大堆的特性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapify(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> heapSize, <span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">int</span> l = (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r = l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> largest = i;</span><br><span class="line">    <span class="comment">// 找到当前节点及其左右子节点的最大值的下标</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= heapSize &amp;&amp; arr[l] &gt; arr[largest]) largest = l;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= heapSize &amp;&amp; arr[r] &gt; arr[largest]) largest = r;</span><br><span class="line">    <span class="comment">// 如果当前节点的值不是最大的，交换，并递归</span></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        arr[i] = arr[largest];</span><br><span class="line">        arr[largest] = tmp;</span><br><span class="line">        heapify(arr, heapSize, largest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建堆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] buildHeap(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length &gt;&gt; <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, arr.length - <span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] HeapSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="comment">// 建堆</span></span><br><span class="line">    buildHeap(arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将堆顶的最大值换到数组最后的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = val;</span><br><span class="line">        <span class="comment">// 维护堆的性质</span></span><br><span class="line">        heapify(arr, i - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pivot = arr[r];  <span class="comment">// 这一步可以优化，可以随机选取一个数作为 pivot</span></span><br><span class="line">    <span class="keyword">int</span> index = l - <span class="number">1</span>;  <span class="comment">// 最后一个小于 pivot 元素的下标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= pivot) &#123;  <span class="comment">// 每找到一个小于 pivot 元素</span></span><br><span class="line">            index++;  <span class="comment">// index 加一，交换元素的位置</span></span><br><span class="line">            <span class="keyword">int</span> tmp = arr[index];</span><br><span class="line">            arr[index] = arr[i];</span><br><span class="line">            arr[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对左右两个子数组递归操作</span></span><br><span class="line">    quickSort(arr, l, index - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr,index + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="比较排序总结"><a class="markdownIt-Anchor" href="#比较排序总结"></a> 比较排序总结</h4>
<table>
<thead>
<tr>
<th>排序算法</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">是否稳定</th>
</tr>
</thead>
<tbody>
<tr>
<td>冒泡排序</td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td>选择排序</td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td>插入排序</td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td>希尔排序</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"></td>
<td style="text-align:center">不稳定</td>
</tr>
</tbody>
</table>
<h3 id="非比较排序"><a class="markdownIt-Anchor" href="#非比较排序"></a> 非比较排序</h3>
<h4 id="计数排序"><a class="markdownIt-Anchor" href="#计数排序"></a> 计数排序</h4>
<h4 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h4>
<h4 id="桶排序"><a class="markdownIt-Anchor" href="#桶排序"></a> 桶排序</h4>
<h4 id="非比较排序总结"><a class="markdownIt-Anchor" href="#非比较排序总结"></a> 非比较排序总结</h4>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>排序</tag>
        <tag>快速排序</tag>
        <tag>归并排序</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>堆、栈、队列</title>
    <url>/archives/68a96ca9.html</url>
    <content><![CDATA[<h3 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h3>
<span id="more"></span>
<h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3>
<h4 id="栈的压入-弹出顺序"><a class="markdownIt-Anchor" href="#栈的压入-弹出顺序"></a> 栈的压入、弹出顺序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsPopOrder</span><span class="params">(<span class="keyword">int</span>[] pushA, <span class="keyword">int</span>[] popA)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; s = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : pushA) &#123;</span><br><span class="line">        s.add(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (s.size() &gt; <span class="number">0</span> &amp;&amp; s.get(s.size() - <span class="number">1</span>) == popA[k]) &#123;</span><br><span class="line">            s.remove(s.size() - <span class="number">1</span>);</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s.size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="表达式求值"><a class="markdownIt-Anchor" href="#表达式求值"></a> 表达式求值</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 默认数字，运算符</span></span><br><span class="line">    <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 默认的第一个数字前的运算符为 +</span></span><br><span class="line">    <span class="keyword">char</span> sign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串转化字符数组</span></span><br><span class="line">    <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = arr[i];</span><br><span class="line">        <span class="comment">// 是否为左括号</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 默认是1对括号</span></span><br><span class="line">            <span class="keyword">int</span> counterPar = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (counterPar &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 统计是否存在括号嵌套的情况</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] == <span class="string">&#x27;(&#x27;</span>) counterPar++;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (arr[j] == <span class="string">&#x27;)&#x27;</span>) counterPar--;</span><br><span class="line">                <span class="comment">// 向后直到找到右括号</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遇到左括号递归求这个括号里面表达式的值</span></span><br><span class="line">            <span class="comment">// 就是求左括号到右括号之间表达式的值,返回值为 number,下面接着进栈</span></span><br><span class="line">            number = solve(s.substring(i + <span class="number">1</span>, j - <span class="number">1</span>));</span><br><span class="line">            <span class="comment">// 下一次就要从 j 开始，因为后面还有一个 i ++;</span></span><br><span class="line">            i = j - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 是否为数字，是数字就求完整的数字值，每次循环都进这个分支，直到出现运算符</span></span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(c)) number = number * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不是数字或者为最后一个字符</span></span><br><span class="line">        <span class="keyword">if</span> (!Character.isDigit(c) || i == n - <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sign == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 是 + 先把数字压栈，等会全部数字出栈之和即为所求</span></span><br><span class="line">                stack.add(<span class="number">0</span>, number);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 是 - 压栈该数字的相反数</span></span><br><span class="line">                stack.add(<span class="number">0</span>, -<span class="number">1</span> * number);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 是 * ，弹栈算出结果，再压栈</span></span><br><span class="line">                stack.add(<span class="number">0</span>, stack.remove(<span class="number">0</span>) * number);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 是 / ，弹栈算出结果，再压栈</span></span><br><span class="line">                stack.add(<span class="number">0</span>, stack.remove(<span class="number">0</span>) / number);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 每次结束，数字恢复默认值</span></span><br><span class="line">            number = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遇到运算符时或者到表达式末尾时，就去计算上一个运算符并把计算结果push进栈，然</span></span><br><span class="line">            <span class="comment">// 后保存新的运算符</span></span><br><span class="line">            <span class="comment">// 运算符为当前压栈数字前面近邻的那个</span></span><br><span class="line">            sign = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) sum += stack.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h3>
<h4 id="最小的-k-个数"><a class="markdownIt-Anchor" href="#最小的-k-个数"></a> 最小的 k 个数</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length == <span class="number">0</span> || k &gt; input.length) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o1 &gt; o2 ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) queue.add(input[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; input.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!queue.isEmpty() &amp;&amp; input[i] &lt; queue.peek()) &#123;</span><br><span class="line">            queue.poll();</span><br><span class="line">            queue.add(input[i]);</span><br><span class="line">            System.out.println(queue.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) res.add(<span class="number">0</span>, queue.poll());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>堆、栈、队列</category>
      </categories>
      <tags>
        <tag>堆</tag>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/archives/fc81fbfd.html</url>
    <content><![CDATA[<h4 id="判断字符串是否表示数值"><a class="markdownIt-Anchor" href="#判断字符串是否表示数值"></a> 判断字符串是否表示数值</h4>
<span id="more"></span>
<div class="note "><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串&quot;+100&quot;,“5e2”,&quot;-123&quot;,“3.1416&quot;和”-1E-16&quot;都表示数值。 但是&quot;12e&quot;,“1a3.14”,“1.2.3”,&quot;±5&quot;和&quot;12e+4.3&quot;都不是。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumric</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> hasNum = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> hasE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> hasDot = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(chars[i])) &#123;</span><br><span class="line">            hasNum = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果前面已经出现 e(E)，循环末尾直接返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (chars[i] == <span class="string">&#x27;e&#x27;</span> || chars[i] == <span class="string">&#x27;E&#x27;</span> &amp;&amp; !hasE) &#123;</span><br><span class="line">            <span class="comment">// e(E) 之前应该已经出现过数字，否则直接返回 false</span></span><br><span class="line">            <span class="keyword">if</span> (hasNum) &#123;</span><br><span class="line">                hasE = <span class="keyword">true</span>;</span><br><span class="line">                hasNum = <span class="keyword">false</span>; <span class="comment">// 将 hasNum 置为 false，保证 e(E) 是最后一位时，返回结果为 false</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果前面出现了 . 或 e(E)，循环末尾直接返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (chars[i] == <span class="string">&#x27;.&#x27;</span> &amp;&amp; !hasDot &amp;&amp; !hasE) &#123;</span><br><span class="line">            hasDot = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// +(-) 必须是第一位或前面一位是 e(E)</span></span><br><span class="line">        <span class="keyword">if</span> ((chars[i] == <span class="string">&#x27;+&#x27;</span> || chars[i] == <span class="string">&#x27;-&#x27;</span>) &amp;&amp; (i == <span class="number">0</span> || chars[i - <span class="number">1</span>] == <span class="string">&#x27;e&#x27;</span> || chars[i - <span class="number">1</span>] == <span class="string">&#x27;E&#x27;</span>)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遇到其他字符直接返回 false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hasNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="判断"><a class="markdownIt-Anchor" href="#判断"></a> 判断</h4>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>数学</title>
    <url>/archives/fe7e69f4.html</url>
    <content><![CDATA[<h4 id="整数中-1-出现的次数"><a class="markdownIt-Anchor" href="#整数中-1-出现的次数"></a> 整数中 1 出现的次数</h4>
<p><a href="https://www.nowcoder.com/practice/bd7f978302044eee894445e244c7eee6?tpId=13&amp;tqId=11184&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ31</a></p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1Between1AndN</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> high = n / (i * <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> low = n % i;</span><br><span class="line">        <span class="keyword">int</span> cur = n / i % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="number">0</span>) &#123;</span><br><span class="line">            cnt += high * i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur == <span class="number">1</span>) &#123;</span><br><span class="line">            cnt += high * i + low + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cnt += (high + <span class="number">1</span>) * i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="丑数"><a class="markdownIt-Anchor" href="#丑数"></a> 丑数</h4>
<p><a href="https://www.nowcoder.com/practice/6aa9e04fc3794f68acf8778237ba065b?tpId=13&amp;tqId=11186&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ33</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetUglyNumber</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">7</span>) <span class="keyword">return</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[index];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pos2 = <span class="number">0</span>, pos3 = <span class="number">0</span>, pos5 = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minUglyNumber = Math.min(Math.min(arr[pos2] * <span class="number">2</span>, arr[pos3] * <span class="number">3</span>), arr[pos5] * <span class="number">5</span>);</span><br><span class="line">        arr[i] = minUglyNumber;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minUglyNumber == arr[pos2] * <span class="number">2</span>) ++pos2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minUglyNumber == arr[pos3] * <span class="number">3</span>) ++pos3;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minUglyNumber == arr[pos5] * <span class="number">5</span>) ++pos5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr[index - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="约瑟夫问题"><a class="markdownIt-Anchor" href="#约瑟夫问题"></a> 约瑟夫问题</h4>
<p><a href="https://www.nowcoder.com/practice/f78a359491e64a50bce2d89cff857eb6?tpId=13&amp;tqId=11199&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ46</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">LastRemaining_Solution</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; circle = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) circle.add(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> startIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (circle.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            startIndex++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (startIndex == circle.size()) startIndex = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        circle.remove(startIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (startIndex == circle.size()) startIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> circle.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="阶乘末尾-0-的数量"><a class="markdownIt-Anchor" href="#阶乘末尾-0-的数量"></a> 阶乘末尾 0 的数量</h4>
<p><a href="https://www.nowcoder.com/practice/aa03dff18376454c9d2e359163bf44b8?tpId=117&amp;tqId=37803&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">NC129</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">theNumberof0</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        cnt += n / <span class="number">5</span>;</span><br><span class="line">        n /= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/archives/340249a9.html</url>
    <content><![CDATA[<h3 id="数组和树"><a class="markdownIt-Anchor" href="#数组和树"></a> 数组和树</h3>
<h4 id="重建二叉树"><a class="markdownIt-Anchor" href="#重建二叉树"></a> 重建二叉树</h4>
<div class="note "><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。</p>
<p>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
<p>例如输入前序遍历序列 {1,2,4,7,3,5,6,8} 和中序遍历序列 {4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>
</div>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> auxiliary(pre, <span class="number">0</span>, pre.length - <span class="number">1</span>, in, <span class="number">0</span>, in.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">auxiliary</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> preL, <span class="keyword">int</span> preR, <span class="keyword">int</span>[] in, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preL &gt; preR || inL &gt; inR) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(pre[preL]);</span><br><span class="line">    <span class="keyword">int</span> i = inL;</span><br><span class="line">    <span class="keyword">while</span> (in[i] != pre[preL]) &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root.left = auxiliary(pre, preL + <span class="number">1</span>, preL + i - inL, in, inL, i - <span class="number">1</span>);</span><br><span class="line">    root.right = auxiliary(pre, preL + i - inL + <span class="number">1</span>, preR, in, i + <span class="number">1</span>, inR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉搜索树的后序遍历序列"><a class="markdownIt-Anchor" href="#二叉搜索树的后序遍历序列"></a> 二叉搜索树的后序遍历序列</h4>
<div class="note "><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回 true,否则返回false。假设输入的数组的任意两个数字都互不相同。（ps：我们约定空树不是二叉搜索树）</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">VerifySequenceOfBST</span><span class="params">(<span class="keyword">int</span>[] sequence)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sequence == <span class="keyword">null</span> || sequence.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> auxiliary(sequence, <span class="number">0</span>, sequence.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">auxiliary</span><span class="params">(<span class="keyword">int</span>[] sequence, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意递归出口，当二叉查找树只有左子树或右子树时，会出现 r &lt; l 的情况</span></span><br><span class="line">    <span class="keyword">if</span> (r &lt;= l) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> root = sequence[r];</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sequence[i] &gt; root) <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j = i;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sequence[j] &lt; root) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> auxiliary(sequence, l, i - <span class="number">1</span>) &amp;&amp; auxiliary(sequence, i, r - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="矩阵"><a class="markdownIt-Anchor" href="#矩阵"></a> 矩阵</h3>
<h4 id="顺时针打印矩阵"><a class="markdownIt-Anchor" href="#顺时针打印矩阵"></a> 顺时针打印矩阵</h4>
<div class="note "><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字 1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> r1 = <span class="number">0</span>, r2 = row - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c1 = <span class="number">0</span>, c2 = col - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 需要注意的是循环退出条件</span></span><br><span class="line">    <span class="keyword">while</span> (r1 &lt;= r2 &amp;&amp; c1 &lt;= c2) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = c1; j &lt;= c2; j++) res.add(matrix[r1][j]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = r1 + <span class="number">1</span>; i &lt;= r2; i++) res.add(matrix[i][c2]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r1 &lt; r2 &amp;&amp; c1 &lt; c2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = c2 - <span class="number">1</span>; j &gt;= c1; j--) res.add(matrix[r2][j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r1 &lt; r2 &amp;&amp; c1 &lt; c2) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = r2 - <span class="number">1</span>; i &gt; r1; i--) res.add(matrix[i][c1]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        r1++;</span><br><span class="line">        r2--;</span><br><span class="line">        c1++;</span><br><span class="line">        c2--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="顺时针旋转矩阵"><a class="markdownIt-Anchor" href="#顺时针旋转矩阵"></a> 顺时针旋转矩阵</h4>
<div class="note "><p>有一个NxN整数矩阵，请编写一个算法，将矩阵顺时针旋转90度。</p>
<p>给定一个NxN的矩阵，和矩阵的阶数N,请返回旋转后的NxN矩阵,保证N小于等于300。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] rotatemat(<span class="keyword">int</span>[][] mat, <span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> mat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt++ &lt; n - <span class="number">2</span> * i - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = mat[i][i];</span><br><span class="line">            <span class="keyword">int</span> row = i, col = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; row &lt; n - i - <span class="number">1</span>; ++row)</span><br><span class="line">                mat[row][col] = mat[row + <span class="number">1</span>][col];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; col &lt; n - i - <span class="number">1</span>; ++col)</span><br><span class="line">                mat[row][col] = mat[row][col + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; row &gt; i; --row)</span><br><span class="line">                mat[row][col] = mat[row - <span class="number">1</span>][col];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; col &gt; i; --col)</span><br><span class="line">                mat[row][col] = mat[row][col - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            mat[row][col + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子数组和子序列"><a class="markdownIt-Anchor" href="#子数组和子序列"></a> 子数组和子序列</h3>
<h4 id="最长无重复子数组"><a class="markdownIt-Anchor" href="#最长无重复子数组"></a> 最长无重复子数组</h4>
<div class="note "><p>给定一个数组arr，返回arr的最长无重复元素子数组的长度，无重复指的是所有数字都不相同。</p>
<p>子数组是连续的，比如[1,3,5,7,9]的子数组有[1,3]，[3,5,7]等等，但是[1,3,7]不是子数组。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> curLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(arr[i]) &amp;&amp; i - map.get(arr[i]) &lt;= curLen) &#123;</span><br><span class="line">            curLen = i - map.get(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curLen++;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(arr[i], i);</span><br><span class="line">        maxLen = Math.max(maxLen, curLen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxLen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最长的连续子序列"><a class="markdownIt-Anchor" href="#最长的连续子序列"></a> 最长的连续子序列</h4>
<div class="note "><p>给定无序数组arr，返回其中最长的连续序列的长度(要求值连续，位置可以不连续,例如 3,4,5,6为连续的自然数）。如给定 [100,4,200,1,3,2]，输出 4。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MLS</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> curLen = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] == arr[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arr[i] == arr[i - <span class="number">1</span>] + <span class="number">1</span>) &#123;</span><br><span class="line">                curLen++;</span><br><span class="line">                maxLen = Math.max(curLen, maxLen);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curLen = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="累加和为-k-的最长子数组"><a class="markdownIt-Anchor" href="#累加和为-k-的最长子数组"></a> 累加和为 k 的最长子数组</h4>
<div class="note "><p>给定一个无序数组arr, 其中元素可正、可负、可0。给定一个整数k，求arr所有子数组中累加和为k的最长子数组长度。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxlenEqualK</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) sum[i] = sum[i - <span class="number">1</span>] + arr[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + i &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum[i + j] - sum[j] + arr[j] == k) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="寻找数字"><a class="markdownIt-Anchor" href="#寻找数字"></a> 寻找数字</h3>
<h4 id="数组中出现次数超过一半的数字"><a class="markdownIt-Anchor" href="#数组中出现次数超过一半的数字"></a> 数组中出现次数超过一半的数字</h4>
<div class="note "><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>
<p>例如输入一个长度为9的数组[1,2,3,2,2,2,5,4,2]。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。</p>
<p>可以假设数组是非空的，并且给定的数组总是存在多数元素。1&lt;=数组长度&lt;=50000。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">            val = array[i];</span><br><span class="line">            cnt = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (val == array[i]) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计 val 出现次数</span></span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k : array) <span class="keyword">if</span> (k == val) cnt++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出现次数大于数组长度的一半，返回 val；否则，返回 0</span></span><br><span class="line">    <span class="keyword">return</span> cnt &gt; array.length / <span class="number">2</span> ? val : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组中未出现的最小正整数"><a class="markdownIt-Anchor" href="#数组中未出现的最小正整数"></a> 数组中未出现的最小正整数</h4>
<div class="note "><p>给定一个无序数组arr，找到数组中未出现的最小正整数。例如arr = [-1, 2, 3, 4]，返回1。arr = [1, 2, 3, 4]。返回5。[要求]时间复杂度为<code>O(n)</code>，空间复杂度为<code>O(1)</code>。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minNumberdisappered</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 将每个正数 x 放到数组的 arr[x - 1]</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; <span class="number">0</span> &amp;&amp; arr[i] &lt;= arr.length &amp;&amp; arr[i] != arr[arr[i] - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">            arr[arr[i] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            arr[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != i + <span class="number">1</span>) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr.length + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<h4 id="数组中相加和为-0-的三元组"><a class="markdownIt-Anchor" href="#数组中相加和为-0-的三元组"></a> 数组中相加和为 0 的三元组</h4>
<div class="note "><p>给出一个有n个元素的数组S，S中是否有元素a,b,c满足a+b+c=0？找出数组S中所有满足条件的三元组。</p>
<ol>
<li>三元组（a、b、c）中的元素必须按非降序排列。（即a≤b≤c）</li>
<li>解集中不能包含重复的三元组。</li>
</ol>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] num) &#123;</span><br><span class="line">    Arrays.sort(num);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 跳过相同的数字</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || num[i] != num[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k = num.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; num[i] + num[j] + num[k] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; k &amp;&amp; num[i] + num[j] + num[k] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    list.add(num[i]);</span><br><span class="line">                    list.add(num[j]);</span><br><span class="line">                    list.add(num[k]);</span><br><span class="line">                    res.add(list);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 去除已经用过的数字</span></span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; num[j] == list.get(<span class="number">1</span>)) &#123;</span><br><span class="line">                        j++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符串出现次数的-topk"><a class="markdownIt-Anchor" href="#字符串出现次数的-topk"></a> 字符串出现次数的 TopK</h4>
<div class="note "><p>给定一个字符串数组，再给定整数k，请返回出现次数前k名的字符串和对应的次数。</p>
<p>返回的答案应该按字符串出现频率由高到低排序。如果不同的字符串有相同出现频率，按字典序排序。</p>
<p>对于两个字符串，大小关系取决于两个字符串从左到右第一个不同字符的 <code>ASCII</code> 值的大小关系。</p>
<p>比如&quot;ah1x&quot;小于&quot;ahb&quot;，“231”&lt;”32“。字符仅包含数字和字母。</p>
<p>[要求] 如果字符串数组长度为<code>N</code>，时间复杂度请达到<code>O(Nlog K)</code>。</p>
</div>
<h4 id="旋转数组"><a class="markdownIt-Anchor" href="#旋转数组"></a> 旋转数组</h4>
<div class="note "><p>一个数组A中存有N（N &gt; 0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（M&gt;=0）个位置。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] solve(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span>[] a) &#123;</span><br><span class="line">    m %= n;</span><br><span class="line">    </span><br><span class="line">    reverse(a, <span class="number">0</span>, n - m - <span class="number">1</span>);</span><br><span class="line">    reverse(a, n - m, n - <span class="number">1</span>);</span><br><span class="line">    reverse(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; startIndex &lt; endIndex; startIndex++, endIndex--) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = a[startIndex];</span><br><span class="line">        a[startIndex] = a[endIndex];</span><br><span class="line">        a[endIndex] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="三个数的最大乘积"><a class="markdownIt-Anchor" href="#三个数的最大乘积"></a> 三个数的最大乘积</h4>
<div class="note "><p>给定一个无序数组，包含正数、负数和0，要求从中找出3个数的乘积，使得乘积最大，要求时间复杂度：O(n)，空间复杂度：O(1)。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.length &lt; <span class="number">3</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最小负数</span></span><br><span class="line">    <span class="keyword">int</span> min1 = Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">// 次小负数</span></span><br><span class="line">    <span class="keyword">int</span> min2 = Integer.MAX_VALUE;</span><br><span class="line">    <span class="comment">// 最大正数</span></span><br><span class="line">    <span class="keyword">int</span> max1 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="comment">// 次大正数</span></span><br><span class="line">    <span class="keyword">int</span> max2 = Integer.MIN_VALUE;</span><br><span class="line">    <span class="comment">// 第三大正数</span></span><br><span class="line">    <span class="keyword">int</span> max3 = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number : A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; max1) &#123;</span><br><span class="line">            max3 = max2;</span><br><span class="line">            max2 = max1;</span><br><span class="line">            max1 = number;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number &gt; max2) &#123;</span><br><span class="line">            max3 = max2;</span><br><span class="line">            max2 = number;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number &gt; max3) &#123;</span><br><span class="line">            max3 = number;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (number &lt; min1) &#123;</span><br><span class="line">            min2 = min1;</span><br><span class="line">            min1 = number;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (number &lt; min2) &#123;</span><br><span class="line">            min2 = number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Math.max((<span class="keyword">long</span>) max1 * max2 * max3, (<span class="keyword">long</span>) max1 * min1 * min2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调整数组顺序使奇数位于偶数前面"><a class="markdownIt-Anchor" href="#调整数组顺序使奇数位于偶数前面"></a> 调整数组顺序使奇数位于偶数前面</h4>
<div class="note "><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] reOrderArray(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] reOrderArray = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val % <span class="number">2</span> != <span class="number">0</span>) reOrderArray[i++] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> val : array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (val % <span class="number">2</span> == <span class="number">0</span>) reOrderArray[i++] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reOrderArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="把数组排成最小的数"><a class="markdownIt-Anchor" href="#把数组排成最小的数"></a> 把数组排成最小的数</h4>
<div class="note "><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">PrintMinNumber</span><span class="params">(<span class="keyword">int</span>[] numbers)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> number : numbers) res.add(String.valueOf(number));</span><br><span class="line"></span><br><span class="line">    res.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (o1 + o2).compareTo(o2 + o1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (String s : res) stringBuffer.append(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="构建乘积数组"><a class="markdownIt-Anchor" href="#构建乘积数组"></a> 构建乘积数组</h4>
<div class="note "><p>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]A[1]…A[i-1]A[i+1]*…*A[n-1]。不能使用除法。（注意：规定B[0] = A[1] * A[2] * … * A[n-1]，B[n-1] = A[0] * A[1] * … * A[n-2];）</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] multiply(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] B = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (A.length &lt; <span class="number">2</span>) <span class="keyword">return</span> B;</span><br><span class="line"></span><br><span class="line">    Arrays.fill(B, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++) B[i] = B[i - <span class="number">1</span>] * A[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> multi = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        B[i] *= multi;</span><br><span class="line">        multi *= A[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id><a class="markdownIt-Anchor" href="#"></a> </h3>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/archives/7b216a3b.html</url>
    <content><![CDATA[<h4 id="二叉树先序-中序和后序遍历"><a class="markdownIt-Anchor" href="#二叉树先序-中序和后序遍历"></a> 二叉树先序、中序和后序遍历</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] threeOrders(TreeNode root) &#123;</span><br><span class="line">    <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][getSize(root)];</span><br><span class="line">    order(res, root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">(<span class="keyword">int</span>[][] res, TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    res[<span class="number">0</span>][i++] = root.val;</span><br><span class="line"></span><br><span class="line">    order(res, root.left);</span><br><span class="line"></span><br><span class="line">    res[<span class="number">1</span>][j++] = root.val;</span><br><span class="line"></span><br><span class="line">    order(res, root.right);</span><br><span class="line"></span><br><span class="line">    res[<span class="number">2</span>][k++] = root.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + getSize(root.left) + getSize(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="二叉树中和为某一值的路径"><a class="markdownIt-Anchor" href="#二叉树中和为某一值的路径"></a> 二叉树中和为某一值的路径</h4>
<div class="note "><p>输入一颗二叉树的根节点和一个整数，按字典序打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ArrayList&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> paths;</span><br><span class="line"></span><br><span class="line">    path.add(root.val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span> &amp;&amp; root.val == target) &#123;</span><br><span class="line">        paths.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FindPath(root.left, target - root.val);</span><br><span class="line">    FindPath(root.right, target - root.val);</span><br><span class="line"></span><br><span class="line">    path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> paths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的下一节点"><a class="markdownIt-Anchor" href="#二叉树的下一节点"></a> 二叉树的下一节点</h4>
<div class="note "><p>给定一个二叉树其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的next指针。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode pNode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pNode == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        pNode = pNode.right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (pNode.left != <span class="keyword">null</span>) pNode = pNode.left;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pNode.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pNode.next.left == pNode) <span class="keyword">return</span> pNode.next;</span><br><span class="line"></span><br><span class="line">        pNode = pNode.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉搜索树的第-k-小节点"><a class="markdownIt-Anchor" href="#二叉搜索树的第-k-小节点"></a> 二叉搜索树的第 k 小节点</h4>
<div class="note "><p>给定一棵二叉搜索树，请找出其中的第 k 小的结点。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode <span class="title">KthNode</span><span class="params">(TreeNode pRoot, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pRoot == <span class="keyword">null</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    ArrayList&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pRoot != <span class="keyword">null</span> || !list.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pRoot != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(<span class="number">0</span>, pRoot);</span><br><span class="line">            pRoot = pRoot.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">            TreeNode node = list.get(<span class="number">0</span>);</span><br><span class="line">            list.remove(<span class="number">0</span>);</span><br><span class="line">            cnt ++;</span><br><span class="line">            <span class="keyword">if</span> (cnt == k) <span class="keyword">return</span> node;</span><br><span class="line">            pRoot = node.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的所有路径和"><a class="markdownIt-Anchor" href="#二叉树的所有路径和"></a> 二叉树的所有路径和</h4>
<div class="note "><p>给定一个仅包含数字 0−9 的二叉树，每一条从根节点到叶子节点的路径都可以用一个数字表示。例如根节点到叶子节点的一条路径是 1→2→3，那么这条路径就用 123 来代替。找出根节点到叶子节点的所有路径表示的数字之和。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumNumbers2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    dfs(root, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> curSum)</span> </span>&#123;</span><br><span class="line">    curSum += root.val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) sum += curSum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) dfs(root.left, curSum * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) dfs(root.right, curSum * <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树的最大路径和"><a class="markdownIt-Anchor" href="#二叉树的最大路径和"></a> 二叉树的最大路径和</h4>
<div class="note "><p>给定一个二叉树，请计算节点值之和最大的路径的节点值之和是多少。这个路径的开始节点和结束节点可以是二叉树中的任意节点。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> maxSum = Integer.MIN_VALUE;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    getPathSum(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">        maxSum = Math.max(maxSum, root.val);</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = getPathSum(root.left);</span><br><span class="line">    <span class="keyword">int</span> right = getPathSum(root.right);</span><br><span class="line"></span><br><span class="line">    maxSum = Math.max(maxSum, root.val);</span><br><span class="line">    maxSum = Math.max(maxSum, left + root.val);</span><br><span class="line">    maxSum = Math.max(maxSum, right + root.val);</span><br><span class="line">    maxSum = Math.max(maxSum, left + right + root.val);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把当前子树能得到的最大 pathSum 返回</span></span><br><span class="line">    <span class="keyword">return</span> Math.max(root.val, Math.max(left + root.val, right + root.val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉搜索树中两个错误的节点"><a class="markdownIt-Anchor" href="#二叉搜索树中两个错误的节点"></a> 二叉搜索树中两个错误的节点</h4>
<div class="note "><p>一棵二叉树原本是搜索二叉树，但是其中有两个节点调换了位置，使得这棵二叉树不再是搜索二叉树，请按升序输出这两个错误节点的值。(每个节点的值各不相同)</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> val = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findError(TreeNode root) &#123;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    dfs(root.left);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; val) &#123;</span><br><span class="line">        res[<span class="number">0</span>] = root.val;</span><br><span class="line">        res[<span class="number">1</span>] = val;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = root.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="二叉树是否为满二叉树"><a class="markdownIt-Anchor" href="#二叉树是否为满二叉树"></a> 二叉树是否为满二叉树</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFullBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;TreeNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(root);</span><br><span class="line"></span><br><span class="line">    TreeNode lastNode = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        TreeNode node = list.get(<span class="number">0</span>);</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node == lastNode &amp;&amp; list.size() &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123; <span class="comment">// 左节点为空</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 右节点不为空，返回 false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 左节点不为空</span></span><br><span class="line">            list.add(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123; </span><br><span class="line">                list.add(node.right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// node 的右节点为空，其左节点就应该是完全二叉树的最后一个节点</span></span><br><span class="line">                lastNode = node.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="树的直径"><a class="markdownIt-Anchor" href="#树的直径"></a> 树的直径</h4>
<div class="note "><p>给定一棵树，求出这棵树的直径，即树上最远两点的距离。包含n个结点，n-1条边的连通图称为树。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interval</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start = <span class="number">0</span>; end = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Interval</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, Interval[] Tree_edge, <span class="keyword">int</span>[] Edge_value)</span> </span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[]&gt;[] map = <span class="keyword">new</span> ArrayList[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        map[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        map[Tree_edge[i].start].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Tree_edge[i].end, Edge_value[i]&#125;);</span><br><span class="line">        map[Tree_edge[i].end].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Tree_edge[i].start, Edge_value[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(map, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">boolean</span>[n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(List&lt;<span class="keyword">int</span>[]&gt;[] map, <span class="keyword">int</span> pos, <span class="keyword">boolean</span>[] visit)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">    visit[pos] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] num : map[pos]) &#123;</span><br><span class="line">        <span class="keyword">int</span> children = num[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> weight = num[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visit[children]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        weight += dfs(map, children, visit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (weight &gt; left) &#123;</span><br><span class="line">            right = left;</span><br><span class="line">            left = weight;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weight &gt; right)</span><br><span class="line">            right = weight;</span><br><span class="line"></span><br><span class="line">        max = Math.max(left + right, max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.max(left, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最低公共祖先"><a class="markdownIt-Anchor" href="#最低公共祖先"></a> 最低公共祖先</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, <span class="keyword">int</span> o1, <span class="keyword">int</span> o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val == o1) <span class="keyword">return</span> o1;</span><br><span class="line">    <span class="keyword">if</span> (root.val == o2) <span class="keyword">return</span> o2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((findChild(root.left, o1) &amp;&amp; findChild(root.right, o2)) || (findChild(root.left, o2) &amp;&amp; findChild(root.right, o1))) <span class="keyword">return</span> root.val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lowestCommonAncestor(root.left, o1, o2) != -<span class="number">1</span> ? lowestCommonAncestor(root.left, o1, o2) : lowestCommonAncestor(root.right, o1, o2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findChild</span><span class="params">(TreeNode root, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> findChild2(root.left, o) || findChild2(root.right, o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="打印二叉树的右视图"><a class="markdownIt-Anchor" href="#打印二叉树的右视图"></a> 打印二叉树的右视图</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">rightViewNumbers</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;TreeNode&gt; oddLevel = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;TreeNode&gt; evenLevel = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    oddLevel.add(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (oddLevel.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        TreeNode node = oddLevel.get(<span class="number">0</span>);</span><br><span class="line">        oddLevel.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oddLevel.size() == <span class="number">0</span>) res.add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) evenLevel.add(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) evenLevel.add(node.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oddLevel.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (evenLevel.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                node = evenLevel.get(<span class="number">0</span>);</span><br><span class="line">                evenLevel.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (evenLevel.size() == <span class="number">0</span>) res.add(node.val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) oddLevel.add(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) oddLevel.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>树</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/archives/2362a8ea.html</url>
    <content><![CDATA[<h3 id="反转链表"><a class="markdownIt-Anchor" href="#反转链表"></a> 反转链表</h3>
<h4 id="反转整个链表"><a class="markdownIt-Anchor" href="#反转整个链表"></a> 反转整个链表</h4>
<p><a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&amp;tqId=11168&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ15</a></p>
<div class="note "><p>解体思路：</p>
<p><code>reverseList(head)</code> 表示以 <code>head</code> 为表头反转整个链表；</p>
<p>根据递归思想，要反转整个链表，只需以 <code>head.next</code> 为表头反转链表，然后修改 <code>head</code> 节点和 <code>head.next</code> 节点的 <code>next</code> 指针即可。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">  </span><br><span class="line">    ListNode last = ReverseList(head.next);</span><br><span class="line">  </span><br><span class="line">    head.next.next = head;</span><br><span class="line">    head.next = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="反转链表的前-n-个节点"><a class="markdownIt-Anchor" href="#反转链表的前-n-个节点"></a> 反转链表的前 n 个节点</h4>
<div class="note "><p>解题思路和反转整个链表一样，区别之处：</p>
<ul>
<li>递归出口不一样</li>
<li><code>head.next</code> 指向 <code>successor</code>，而不是 <code>null</code></li>
</ul>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode successor = <span class="keyword">null</span>;  <span class="comment">// 第 n 个节点的后继节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseN</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;  </span><br><span class="line">      	successor = head.next;</span><br><span class="line">      	<span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	ListNode last = reverseN(head.next, n - <span class="number">1</span>);</span><br><span class="line">  	</span><br><span class="line">  	head.next.next = head;</span><br><span class="line">  	head.next = successor;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反转链表的一个区间"><a class="markdownIt-Anchor" href="#反转链表的一个区间"></a> 反转链表的一个区间</h4>
<div class="note "><p>解题思路：</p>
<ul>
<li>如果 <code>m == 1</code> ，就是反转链表的前 <code>n</code> 个节点；</li>
<li>如果 <code>m != 1</code>，相对于 <code>head</code> 节点而言，要反转的起始节点是第 <code>m</code> 个节点；相对于 <code>head.next</code> 节点而言，要反转的起始节点是第 <code>m - 1</code> 个节点… 当递归到第 <code>m</code> 个节点，就相当于从头节点开始反转前 <code>n - m + 1</code> 个节点。</li>
</ul>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseM2N</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">if</span> (m == <span class="number">1</span>) <span class="keyword">return</span> reverseN(head, n);</span><br><span class="line">  </span><br><span class="line">  	head.next = reversM2N(head.next, m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseN</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;  </span><br><span class="line">      	successor = head.next;</span><br><span class="line">      	<span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	ListNode last = reverseN(head.next, n - <span class="number">1</span>);</span><br><span class="line">  	</span><br><span class="line">  	head.next.next = head;</span><br><span class="line">  	head.next = successor;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="每-k-个一组反转链表"><a class="markdownIt-Anchor" href="#每-k-个一组反转链表"></a> 每 k 个一组反转链表</h4>
<p><a href="https://www.nowcoder.com/practice/b49c3dc907814e9bbfa8437c251b028e?tpId=117&amp;tqId=37746&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">NC50</a></p>
<div class="note "><p>思路：</p>
<ul>
<li>反转以 <code>head</code> 开头的 <code>k</code> 个节点；</li>
<li>将第 <code>k + 1</code> 节点作为 <code>head</code> 进行 递归</li>
</ul>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">  </span><br><span class="line">  	ListNode a, b;</span><br><span class="line">  	a = b = head;</span><br><span class="line">  	</span><br><span class="line">    <span class="comment">// 找到 b 节点</span></span><br><span class="line">  	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">      	<span class="keyword">if</span> (b == <span class="keyword">null</span>) <span class="keyword">return</span> head; <span class="comment">// b == null 说明链表长度小于 k，不用反转</span></span><br><span class="line">      	b = b.next;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">  	ListNode h = reverse(a, b); </span><br><span class="line">  </span><br><span class="line">  	a.next = reverseKGroup(b, k); <span class="comment">// a 现在是 reverse(a, b) 的尾节点</span></span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转从节点 a 到 b 的子链表（不包括 b）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode a, ListNode b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span> || a.next == <span class="keyword">null</span>) <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">    ListNode p = <span class="keyword">null</span>;</span><br><span class="line">    ListNode h = a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (h != b) &#123;</span><br><span class="line">        ListNode tmp = h.next;</span><br><span class="line">        h.next = p;</span><br><span class="line">        p = h;</span><br><span class="line">        h = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快慢指针"><a class="markdownIt-Anchor" href="#快慢指针"></a> 快慢指针</h3>
<h4 id="找到链表环的入口"><a class="markdownIt-Anchor" href="#找到链表环的入口"></a> 找到链表环的入口</h4>
<p><a href="https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&amp;tqId=11208&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ55</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">EntryNodeOfLoop</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="keyword">null</span> || pHead.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode fast = pHead;</span><br><span class="line">    ListNode slow = pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">            fast = pHead;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">                slow = slow.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> fast;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="判断是否回文单链表"><a class="markdownIt-Anchor" href="#判断是否回文单链表"></a> 判断是否回文单链表</h4>
<p><a href="https://www.nowcoder.com/practice/3fed228444e740c8be66232ce8b87c2f?tpId=117&amp;tqId=37813&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">NC96</a></p>
<div class="note "><p>判断数组、数字或者字符串是否是回文结构很简单，只需要从左右两端向中间遍历，依次判断是否相等即可。而判断单链表是否具有回文结构的难点在于单链表只能单向遍历。</p>
<p>思路一：复制一条新链表并反转，然后同时遍历新旧两条链表，依次判断节点值是否相等。</p>
<p>思路二：有没有什么方法可以不用反转链表做到倒序遍历。做过树的前、中、后序遍历可以联想到递归。</p>
<p>思路三：利用快慢指针，找到中间节点。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListNode left;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">  	left = head;</span><br><span class="line">  	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">traverse</span><span class="params">(ListNode right)</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">if</span> (right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  	</span><br><span class="line">  	<span class="keyword">boolean</span> res = traverse(right.next);</span><br><span class="line">  </span><br><span class="line">  	res &amp;= (left.val == right.val);</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除节点"><a class="markdownIt-Anchor" href="#删除节点"></a> 删除节点</h3>
<h4 id="删除链表倒数第-k-个节点"><a class="markdownIt-Anchor" href="#删除链表倒数第-k-个节点"></a> 删除链表倒数第 k 个节点</h4>
<p><a href="https://www.nowcoder.com/practice/f95dcdafbde44b22a6d741baf71653f6?tpId=117&amp;tqId=37750&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">NC53</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">FindKthToTail</span><span class="params">(ListNode pHead, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    ListNode p = pHead;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        n++;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n &lt; k) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    p = pHead;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i++ &lt;= n - k) p = p.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="删除链表的重复节点"><a class="markdownIt-Anchor" href="#删除链表的重复节点"></a> 删除链表的重复节点</h4>
<p><a href="https://www.nowcoder.com/practice/c087914fae584da886a0091e877f2c79?tpId=117&amp;tqId=37730&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">NC25</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode cur = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur.next != <span class="keyword">null</span> &amp;&amp; cur.next.val == cur.val) &#123;</span><br><span class="line">            cur.next = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="删除链表的重复节点-ii"><a class="markdownIt-Anchor" href="#删除链表的重复节点-ii"></a> 删除链表的重复节点 II</h4>
<p><a href="https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&amp;tqId=11209&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ56</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode pHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="keyword">null</span> || pHead.next == <span class="keyword">null</span>) <span class="keyword">return</span> pHead;</span><br><span class="line"></span><br><span class="line">    ListNode node = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">    node.next = pHead;</span><br><span class="line">    ListNode pre = node, cur = pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.val == cur.next.val) &#123; <span class="comment">// 遇到重复节点</span></span><br><span class="line">            <span class="keyword">int</span> val = cur.val;</span><br><span class="line">          	<span class="comment">// 往后遍历，找到第一个和当前节点不重复的节点</span></span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.val == val) cur = cur.next; </span><br><span class="line">            pre.next = cur; <span class="comment">// 删除所有重复节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并链表"><a class="markdownIt-Anchor" href="#合并链表"></a> 合并链表</h3>
<h4 id="合并两个排序链表"><a class="markdownIt-Anchor" href="#合并两个排序链表"></a> 合并两个排序链表</h4>
<p><a href="https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&amp;tqId=11169&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ16</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">Merge</span><span class="params">(ListNode list1, ListNode list2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list1 == <span class="keyword">null</span>) <span class="keyword">return</span> list2;</span><br><span class="line">    <span class="keyword">if</span> (list2 == <span class="keyword">null</span>) <span class="keyword">return</span> list1;</span><br><span class="line"></span><br><span class="line">    ListNode h = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (list1 != <span class="keyword">null</span> &amp;&amp; list2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">            p.next = list1;</span><br><span class="line">            list1 = list1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.next = list2;</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list1 != <span class="keyword">null</span>) p.next = list1;</span><br><span class="line">    <span class="keyword">if</span> (list2 != <span class="keyword">null</span>) p.next = list2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="合并-k-个排序链表"><a class="markdownIt-Anchor" href="#合并-k-个排序链表"></a> 合并 k 个排序链表</h4>
<p><a href="https://www.nowcoder.com/practice/65cfde9e5b9b4cf2b6bafa5f3ef33fa6?tpId=117&amp;tqId=37747&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">NC51</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ArrayList&lt;ListNode&gt; lists)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lists.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lists.size() == <span class="number">1</span>) <span class="keyword">return</span> lists.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lists.size() % <span class="number">2</span> != <span class="number">0</span>) lists.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;ListNode&gt; mergedLists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lists.size(); i += <span class="number">2</span>) &#123;</span><br><span class="line">        mergedLists.add(mergeTwoLists(lists.get(i), lists.get(i + <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mergeKLists(mergedLists);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">    <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">        l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<h4 id="链表的奇偶重排"><a class="markdownIt-Anchor" href="#链表的奇偶重排"></a> 链表的奇偶重排</h4>
<p><a href="https://www.nowcoder.com/practice/02bf49ea45cd486daa031614f9bd6fc3?tpId=117&amp;tqId=37845&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">NC133</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    ListNode oddList = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    oddList.next = head;</span><br><span class="line">    ListNode evenList = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    evenList.next = head.next;</span><br><span class="line"></span><br><span class="line">    ListNode p1 = head;</span><br><span class="line">    ListNode p2 = head.next;</span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="keyword">null</span> &amp;&amp; p2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.next == p2) &#123;</span><br><span class="line">            p1.next = p2.next;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p2.next == p1) &#123;</span><br><span class="line">            p2.next = p1.next;</span><br><span class="line">            p2 = p2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p1.next = evenList.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oddList.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="复杂链表的复制"><a class="markdownIt-Anchor" href="#复杂链表的复制"></a> 复杂链表的复制</h4>
<p><a href="https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=13&amp;tqId=11178&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ15</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RandomListNode <span class="title">Clone</span><span class="params">(RandomListNode pHead)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 为每个节点 N 创建复制节点 N&#x27;，并放在 N 后面</span></span><br><span class="line">    RandomListNode p = pHead;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        RandomListNode copy = <span class="keyword">new</span> RandomListNode(p.label);</span><br><span class="line">        copy.next = p.next;</span><br><span class="line">        p.next = copy;</span><br><span class="line">        p = copy.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 为 N&#x27; 设置 random 指针</span></span><br><span class="line">    p = pHead;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.random != <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next.random = p.random.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p = p.next.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 拆分链表</span></span><br><span class="line">    p = pHead;</span><br><span class="line">    RandomListNode q;</span><br><span class="line">    RandomListNode h = p.next;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        q = p.next;</span><br><span class="line">        p.next = q.next;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id><a class="markdownIt-Anchor" href="#"></a> </h3>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>CAP和BASE</title>
    <url>/archives/a88d9ff5.html</url>
    <content><![CDATA[<h4 id="cap"><a class="markdownIt-Anchor" href="#cap"></a> <code>CAP</code></h4>
<p>分布式系统不可能同时满足一致性（<code>C：Consistency</code>）、可用性（<code>A：Availability</code>）和分区容忍性（<code>P：Partition Tolerance</code>），最多只能同时满足其中两项。</p>
<span id="more"></span>
<img data-src="/archives/a88d9ff5/CAP.png" alt="CAP" style="zoom:50%;">
<h5 id="c一致性"><a class="markdownIt-Anchor" href="#c一致性"></a> <code>C</code>（一致性）</h5>
<p>一致性指的是系统在执行数据更新操作之后能够从一致性状态转移到另一个一致性状态。</p>
<p>对系统的一个数据更新成功之后，如果所有用户都能够读取到最新的值，该系统就被认为具有强一致性。</p>
<h5 id="a可用性"><a class="markdownIt-Anchor" href="#a可用性"></a> <code>A</code>（可用性）</h5>
<p>可用性指分布式系统在面对各种异常时可以提供正常服务的能力，用系统可用时间占总时间的比值来衡量，4 个 9 的可用性表示系统 99.99% 的时间是高可用的。</p>
<p>在可用性条件下，要求系统对于用户的每一个请求都能够在有限的时间内返回结果。</p>
<h5 id="p分区容忍性"><a class="markdownIt-Anchor" href="#p分区容忍性"></a> <code>P</code>（分区容忍性）</h5>
<p>网络分区指分布式系统中的节点被划分为多个区域，每个区域内部可以通信，但是区域之间无法通信。</p>
<p>在分区容忍性条件下，分布式系统在遇到任何网络分区故障的时候，仍然需要能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障。</p>
<h5 id="cap-不能同时满足"><a class="markdownIt-Anchor" href="#cap-不能同时满足"></a> <code>CAP</code> 不能同时满足</h5>
<p>在分布式系统中，分区容忍性必不可少，因为需要假设网络是不可靠的。因此，<code>CAP</code> 理论实际上要在可用性和一致性之间做权衡。</p>
<p>可用性和一致性往往是冲突的，很难使它们同时满足。在多个节点之间进行数据同步时，</p>
<ul>
<li>为了保证一致性（<code>CP</code>），不能访问未同步完成的节点，也就失去了部分可用性；</li>
<li>为了保证可用性（<code>AP</code>），允许读取所有节点的数据，但是数据可能不一致。</li>
</ul>
<h4 id="base"><a class="markdownIt-Anchor" href="#base"></a> <code>BASE</code></h4>
<p><code>BASE</code> 是基本可用（<code>Basically Available</code>）、软状态（<code>Soft State</code>）和最终一致性（<code>Eventually Consistent</code>）三个短语的缩写。</p>
<p><code>BASE</code> 理论是对 <code>CAP</code> 中一致性和可用性权衡的结果，它的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p>
<h5 id="ba基本可用"><a class="markdownIt-Anchor" href="#ba基本可用"></a> <code>BA</code>（基本可用）</h5>
<p>指分布式系统在出现故障的时候，保证核心服务可用，允许损失部分可用性。</p>
<p>例如，电商在做促销时，为了保证购物系统的稳定性，部分消费者可能会被引导到一个降级的页面。</p>
<h5 id="s软状态"><a class="markdownIt-Anchor" href="#s软状态"></a> <code>S</code>（软状态）</h5>
<p>允许系统不同节点的数据副本的同步存在时延。</p>
<h5 id="e最终一致性"><a class="markdownIt-Anchor" href="#e最终一致性"></a> <code>E</code>（最终一致性）</h5>
<p>系统中所有的数据副本，在经过一段时间后，最终能达到一致的状态。</p>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>系统设计</tag>
        <tag>CAP</tag>
        <tag>BASE</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/archives/cdcc4eae.html</url>
    <content><![CDATA[<p>指事务的操作位于不同的节点上，需要保证事务的 ACID 特性。</p>
<p>例如在下单场景下，库存和订单如果不在同一个节点上，就涉及分布式事务。</p>
<span id="more"></span>
<h4 id="2pc"><a class="markdownIt-Anchor" href="#2pc"></a> <code>2PC</code></h4>
<p>两阶段提交（<code>Two-phase Commit，2PC</code>），通过引入协调者（<code>Coordinator</code>）来协调参与者的行为，并最终决定这些参与者是否要真正执行事务。</p>
<h5 id="准备阶段"><a class="markdownIt-Anchor" href="#准备阶段"></a> 准备阶段</h5>
<p>协调者询问参与者事务是否执行成功，参与者发回事务执行结果。询问可以看成一种投票，需要参与者都同意才能执行。</p>
<img data-src="/archives/cdcc4eae/%E6%8A%95%E7%A5%A8%E9%98%B6%E6%AE%B5.png" alt="投票阶段" style="zoom:50%;">
<h5 id="提交阶段"><a class="markdownIt-Anchor" href="#提交阶段"></a> 提交阶段</h5>
<p>如果事务在每个参与者上都执行成功，事务协调者发送通知让参与者提交事务；否则，协调者发送通知让参与者回滚事务。</p>
<img data-src="/archives/cdcc4eae/%E6%8F%90%E4%BA%A4%E9%98%B6%E6%AE%B5.png" alt="提交阶段" style="zoom:50%;">
<h5 id="存在的问题"><a class="markdownIt-Anchor" href="#存在的问题"></a> 存在的问题</h5>
<h6 id="同步阻塞"><a class="markdownIt-Anchor" href="#同步阻塞"></a> 同步阻塞</h6>
<p>所有事务参与者在等待其它参与者响应的时候都处于同步阻塞等待状态，无法进行其它操作。</p>
<h6 id="单点问题"><a class="markdownIt-Anchor" href="#单点问题"></a> 单点问题</h6>
<p>协调者在 <code>2PC</code> 中起到非常大的作用，发生故障将会造成很大影响。</p>
<p>特别是在提交阶段发生故障，所有参与者会一直同步阻塞等待，无法完成其它操作。</p>
<h6 id="数据不一致"><a class="markdownIt-Anchor" href="#数据不一致"></a> 数据不一致</h6>
<p>在提交阶段，如果协调者只发送了部分 <code>Commit</code> 消息，此时网络发生异常，那么只有部分参与者接收到 <code>Commit</code> 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</p>
<h6 id="太过保守"><a class="markdownIt-Anchor" href="#太过保守"></a> 太过保守</h6>
<p>任意一个节点失败就会导致整个事务失败，没有完善的容错机制。</p>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/archives/4eb3381c.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>系统设计</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>负载均衡</title>
    <url>/archives/c9acdb25.html</url>
    <content><![CDATA[<p>集群中的服务器（节点）通常是设计成无状态的，用户可以向任何一个节点发起请求。</p>
<p>集群中一般会有一个负载均衡器来协调节点的负载情况。</p>
<span id="more"></span>
<h4 id="负载均衡算法"><a class="markdownIt-Anchor" href="#负载均衡算法"></a> 负载均衡算法</h4>
<h5 id="随机"><a class="markdownIt-Anchor" href="#随机"></a> 随机</h5>
<p>把请求随机发送到服务器上。</p>
<p>这个算法比较适合服务器性能差不多的场景。</p>
<h5 id="轮询"><a class="markdownIt-Anchor" href="#轮询"></a> 轮询</h5>
<p>轮询算法把每个请求轮流发送到每个服务器上。</p>
<p>下图中，一共有 6 个客户端产生了 6 个请求，这 6 个请求按 (1, 2, 3, 4, 5, 6) 的顺序发送。(1, 3, 5) 的请求会被发送到服务器 1，(2, 4, 6) 的请求会被发送到服务器 2。</p>
<img data-src="/archives/c9acdb25/%E8%BD%AE%E8%AF%A2.png" alt="轮询" style="zoom:50%;">
<p>这个算法比较适合每个服务器的性能差不多的场景，如果有性能存在差异的情况下，那么性能较差的服务器可能无法承担过大的负载。</p>
<h5 id="加权轮询"><a class="markdownIt-Anchor" href="#加权轮询"></a> 加权轮询</h5>
<p>加权轮询是在轮询的基础上，根据服务器的性能差异，为服务器赋予一定的权值，性能高的服务器分配更高的权值。</p>
<p>例如下图中，服务器 1 被赋予的权值为 5，服务器 2 被赋予的权值为 1，那么 (1, 2, 3, 4, 5) 请求会被发送到服务器 1，(6) 请求会被发送到服务器 2。</p>
<img data-src="/archives/c9acdb25/%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2.png" alt="加权轮询" style="zoom:50%;">
<h5 id="最少连接"><a class="markdownIt-Anchor" href="#最少连接"></a> 最少连接</h5>
<p>由于每个请求的连接时间不一样，使用轮询或者加权轮询算法的话，可能会让一台服务器当前连接数过大，而另一台服务器的连接过小，造成负载不均衡。</p>
<p>最少连接算法就是将请求发送给当前连接数最少的服务器。</p>
<h5 id="加权最少连接"><a class="markdownIt-Anchor" href="#加权最少连接"></a> 加权最少连接</h5>
<p>在最少连接的基础上，根据服务器的性能为每台服务器分配权重，再根据权重计算出每台服务器能处理的连接数。</p>
<h5 id="原地址哈希"><a class="markdownIt-Anchor" href="#原地址哈希"></a> 原地址哈希</h5>
<p>源地址哈希通过对客户端 <code>IP</code> 计算哈希值之后，再对服务器数量取模得到目标服务器的序号。</p>
<p>可以保证同一 <code>IP</code> 的客户端的请求会转发到同一台服务器上，用来实现会话粘滞（<code>Sticky Session</code>）。</p>
<h4 id="集群下的-session-管理"><a class="markdownIt-Anchor" href="#集群下的-session-管理"></a> 集群下的 <code>session</code> 管理</h4>
<p>一个用户的 <code>session</code> 如果存储在一个服务器上，那么当负载均衡器把用户的下一个请求转发到另一个服务器，由于该服务器没有用户的 <code>session</code> ，那么该用户就需要重新进行登录等操作。</p>
<h5 id="sticky-session"><a class="markdownIt-Anchor" href="#sticky-session"></a> <code>Sticky Session</code></h5>
<p>负载均衡器通过原地址哈希算法，将同一个用户的请求都转发到同一服务器，这样就实现了会话粘滞。</p>
<p>缺点：</p>
<ul>
<li>一台服务器宕机后，其上的所有 <code>session</code> 都会丢失。</li>
</ul>
<h5 id="session-replication"><a class="markdownIt-Anchor" href="#session-replication"></a> <code>Session Replication</code></h5>
<p>在服务器之间进行 <code>session</code> 同步操作，每个服务器都有所有用户的 <code>session</code> 信息，因此用户可以向任何一个服务器进行请求。</p>
<p>缺点：</p>
<ul>
<li>占用过多内存；</li>
<li>同步过程占用网络带宽以及服务器处理器时间。</li>
</ul>
<h5 id="session-server"><a class="markdownIt-Anchor" href="#session-server"></a> <code>Session Server</code></h5>
<p>使用一个单独的服务器存储 <code>session</code>。</p>
<p>优点：</p>
<ul>
<li>为了使得大型网站具有伸缩性，集群中的应用服务器通常需要保持无状态，那么应用服务器不能存储用户的会话信息。<code>Session Server</code> 将用户的会话信息单独进行存储，从而保证了应用服务器的无状态。</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要去实现存取 <code>session</code> 的代码。</li>
</ul>
]]></content>
      <categories>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>系统设计</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础</title>
    <url>/archives/5e5baec5.html</url>
    <content><![CDATA[<p>前端三要素：</p>
<ul>
<li>HTML（结构）：超文本标记语言，决定网页的结构和内容</li>
<li>CSS（表现）：层叠样式表，设定网页的表现形式</li>
<li>JavaScript（行为）：一种弱类型脚本语言，代码不需要编译，由浏览器解释运行，控制网页的行为</li>
</ul>
<span id="more"></span>
<p>JavaScript 框架&amp;库：</p>
<ul>
<li>jQuery：JS 库，优点是简化了 DOM 操作，缺点是 DOM 操作太频繁，影响性能</li>
<li>Angular：模块化开发</li>
<li>React：虚拟 DOM</li>
<li>Vue：渐进式框架，综合了 Angular 和 React 的优点</li>
<li>Axios：通信框架</li>
</ul>
<p>UI 框架：</p>
<ul>
<li>Ant-Design：阿里出品，基于 React</li>
<li>Element-UI：饿了么出品，基于 Vue</li>
<li>Bootstrap：Twitter 出品</li>
<li>Layui：</li>
<li>Sementic-UI</li>
</ul>
<p>JavaScript 构建工具：</p>
<ul>
<li>webpack</li>
</ul>
<h3 id="1-快速入门"><a class="markdownIt-Anchor" href="#1-快速入门"></a> 1. 快速入门</h3>
<h4 id="11-引入-javascript"><a class="markdownIt-Anchor" href="#11-引入-javascript"></a> 1.1 引入 JavaScript</h4>
<ol>
<li>
<p>内部标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 代码</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>外部引入</p>
<p>js 文件：abc.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码</span></span><br></pre></td></tr></table></figure>
<p>在 html 文件中引入 js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="12-基本语法"><a class="markdownIt-Anchor" href="#12-基本语法"></a> 1.2 基本语法</h4>
<h4 id="13-数据类型"><a class="markdownIt-Anchor" href="#13-数据类型"></a> 1.3 数据类型</h4>
<ul>
<li>
<p>number：</p>
</li>
<li>
<p>字符串：</p>
</li>
<li>
<p>数组：可以同时存储任何类型的值</p>
</li>
<li>
<p>NaN、null、undefined</p>
<blockquote>
<p>NaN 和任何数据都不相等</p>
<p>null 也是一种值，可以存入变量或数组</p>
</blockquote>
</li>
<li>
<p>对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;ABC&quot;</span>,</span><br><span class="line">  age: <span class="number">3</span>,</span><br><span class="line">  hobby: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<h4 id="14-运算符"><a class="markdownIt-Anchor" href="#14-运算符"></a> 1.4 运算符</h4>
<ul>
<li>
<p>比较运算符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==  类型不一样但值一样，结果为 <span class="keyword">true</span></span><br><span class="line">=== 只有类型一样值也一样，结果才为 <span class="keyword">true</span></span><br></pre></td></tr></table></figure>
<p><strong>PS：坚持使用 <code>===</code> 进行比较</strong></p>
</li>
<li></li>
</ul>
<h4 id="15-严格检查模式"><a class="markdownIt-Anchor" href="#15-严格检查模式"></a> 1.5 严格检查模式</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">  &#x27;use strict&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义变量用 let</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-数据类型"><a class="markdownIt-Anchor" href="#2-数据类型"></a> 2. 数据类型</h3>
<h4 id="21-字符串"><a class="markdownIt-Anchor" href="#21-字符串"></a> 2.1 字符串</h4>
<ol>
<li>
<p>正常使用单引号或双引号包裹</p>
</li>
<li>
<p>转义字符</p>
<ul>
<li>\n：换行</li>
<li>\t：制表符</li>
<li>\u####：Unicode 字符</li>
<li>\x##：ASCII 字符</li>
</ul>
</li>
<li>
<p>多行字符串编写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = <span class="string">`hello</span></span><br><span class="line"><span class="string">world`</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>字符串拼接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> hello = <span class="string">`hello, <span class="subst">$&#123;msg&#125;</span>`</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>字符串长度：<code>str.length</code></p>
</li>
<li>
<p><mark>字符串不可变</mark></p>
</li>
</ol>
<h4 id="22-数组"><a class="markdownIt-Anchor" href="#22-数组"></a> 2.2 数组</h4>
<ol>
<li>可以包含任意数据类型</li>
<li>长度可变：可以给 <code>arr.length</code> 赋值</li>
<li><code>slice</code>：相当于 <code>substring</code></li>
<li><code>push</code> 和 <code>pop</code>：在数组尾部添加和删除元素</li>
<li><code>unshift</code> 和 <code>shift</code>：在数组头部添加和删除元素</li>
<li><code>sort</code> 和 <code>reverse</code>：排序和反转数组，会修改数组</li>
<li><code>concat</code>：拼接数组，不会修改原数组，返回一个新的数组</li>
</ol>
<h4 id="23-对象"><a class="markdownIt-Anchor" href="#23-对象"></a> 2.3 对象</h4>
<ol>
<li>
<p>定义对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;z3&quot;</span>,</span><br><span class="line">  age: <span class="number">5</span>,</span><br><span class="line">  sex: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>对象属性赋值：<code>person.age = 10</code></p>
</li>
<li>
<p>删除属性：<code>delete person.sex</code></p>
</li>
<li>
<p>添加属性：<code>person.addr = “杭州”</code></p>
</li>
<li>
<p>判断是否存在某个属性，</p>
<ul>
<li>包括继承的属性：<code>‘toString’ in person</code>，结果为 <code>true</code></li>
<li>自己定义的属性：<code>person.hasOwnProperty('toString')</code>，结果为 false</li>
</ul>
</li>
<li>
<p>判断是否存在某个属性</p>
</li>
</ol>
<h4 id="24-流程控制"><a class="markdownIt-Anchor" href="#24-流程控制"></a> 2.4 流程控制</h4>
<p>数组循环：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">10</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>for</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; number.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(number[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>for in</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> number) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(number[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>for of</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> number) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>forEach</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">number.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="25-map-和-set"><a class="markdownIt-Anchor" href="#25-map-和-set"></a> 2.5 Map 和 Set</h4>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;z3&#x27;</span>, <span class="number">10</span>], [<span class="string">&#x27;l4&#x27;</span>, <span class="number">7</span>]]);</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<p>使用<code>for of</code> 遍历</p>
<h3 id="3-函数"><a class="markdownIt-Anchor" href="#3-函数"></a> 3. 函数</h3>
<h4 id="31-函数定义"><a class="markdownIt-Anchor" href="#31-函数定义"></a> 3.1 函数定义</h4>
<p>方式一：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参数问题：JavaScript 可以传递任意个参数</p>
<p>对于上面的 abs 函数，可以加上一个判断：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x != <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Not a number&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="32-参数"><a class="markdownIt-Anchor" href="#32-参数"></a> 3.2 参数</h4>
<ul>
<li>
<p>arguments：包含所有参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a: &quot;</span>, a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b: &quot;</span>, b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;arguments: &quot;</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/arguments.png" alt="arguments"></p>
</li>
<li>
<p>rest：只包含额外的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a, b, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a: &quot;</span>, a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;b: &quot;</span>, b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;rest: &quot;</span>, rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/rest.png" alt="rest"></p>
</li>
</ul>
<h4 id="33-变量的作用域"><a class="markdownIt-Anchor" href="#33-变量的作用域"></a> 3.3 变量的作用域</h4>
<p>提升变量的作用域：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">&quot;y&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F1.png" alt="变量作用域1"></p>
<p>相当于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">var</span> y;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">    y = <span class="string">&quot;y&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果将 <code>var</code> 改为 <code>let</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">&quot;y&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F2.png" alt="变量作用域2"></p>
<p>改为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">let</span> y;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&quot;x&quot;</span> + y;</span><br><span class="line">    y = <span class="string">&quot;y&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F1-2735322.png" alt="变量作用域1"></p>
<p>小结：</p>
<ul>
<li>尽量使用 <code>let</code> 定义变量</li>
<li>尽量把所有变量定义在最其他语句之前</li>
</ul>
<h4 id="34-名字空间"><a class="markdownIt-Anchor" href="#34-名字空间"></a> 3.4 名字空间</h4>
<p>JavaScript 只有一个全局作用域：<code>window</code>，如常用的 <code>alert()</code> 等价于 <code>window.alert()</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> x = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">  alert(x); <span class="comment">// 等价于 window.alert(window.x);</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>所有全局变量都会绑定到 <code>window</code> 上，如果不同的 js 文件使用了相同的变量名字，就会产生冲突。</p>
<p>解决方式：定义自己的名字空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> myNamespace = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    myNamespace.name = <span class="string">&quot;z3&quot;</span>;</span></span><br><span class="line">    alert(myNamespace.name);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="35-常量关键字"><a class="markdownIt-Anchor" href="#35-常量关键字"></a> 3.5 常量关键字</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-常用对象"><a class="markdownIt-Anchor" href="#4-常用对象"></a> 4. 常用对象</h3>
<h4 id="41-date"><a class="markdownIt-Anchor" href="#41-date"></a> 4.1 Date</h4>
<p>基本使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now)</span><br><span class="line"><span class="built_in">console</span>.log(now.getFullYear()) <span class="comment">// 年</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMonth()); <span class="comment">// 月</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getDate()); <span class="comment">// 日</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getHours()); <span class="comment">// 时</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getMinutes()); <span class="comment">// 分</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getSeconds()); <span class="comment">// 秒</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getDay()); <span class="comment">// 星期几</span></span><br><span class="line"><span class="built_in">console</span>.log(now.getTime()); <span class="comment">// 时间戳</span></span><br></pre></td></tr></table></figure>
<h4 id="42-json"><a class="markdownIt-Anchor" href="#42-json"></a> 4.2 JSON</h4>
<p>JSON：JavaScript Object Notation，是一种轻量级数据交换格式，易于阅读和编写，易于机器解析和生成，并能有效提升网络传输效率。</p>
<p>JSON 字符串和 JS 对象之间的转换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;z3&#x27;</span>,</span><br><span class="line">    age: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象转化为 JSON 字符串</span></span><br><span class="line"><span class="keyword">let</span> jsonPerson = <span class="built_in">JSON</span>.stringify(person);</span><br><span class="line"><span class="built_in">console</span>.log(jsonPerson);</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON 字符串转化为 对象</span></span><br><span class="line"><span class="keyword">let</span> parsePerson = <span class="built_in">JSON</span>.parse(jsonPerson);</span><br><span class="line"><span class="built_in">console</span>.log(parsePerson);</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/JSON.png" alt="JSON"></p>
<h3 id="5-面向对象编程"><a class="markdownIt-Anchor" href="#5-面向对象编程"></a> 5. 面向对象编程</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; run...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> z3 = &#123;</span><br><span class="line">    name: <span class="string">&#x27;z3&#x27;</span>,</span><br><span class="line">    age: <span class="number">28</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">z3.__proto__ = user;</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/%E5%8E%9F%E5%9E%8B.png" alt="原型"></p>
<p>ES6 引入的 class：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, sex</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="keyword">new</span> Person(<span class="string">&#x27;z3&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aPerson);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, sex, grade</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, sex);</span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">myGrade</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> l4 = <span class="keyword">new</span> Student(<span class="string">&#x27;l4&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;一年级&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(l4)</span><br></pre></td></tr></table></figure>
<p><img data-src="/archives/5e5baec5/%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF.png" alt="类和继承"></p>
<p>原型链：</p>
<img data-src="/archives/5e5baec5/%E5%8E%9F%E5%9E%8B%E9%93%BE.png" alt="原型链" style="zoom:50%;">
<h3 id="6-操作-bom-元素"><a class="markdownIt-Anchor" href="#6-操作-bom-元素"></a> 6. 操作 <code>BOM</code> 元素</h3>
<p><code>BOM：Browser Object Model</code>（浏览器对象模型），用于管理浏览器窗口，核心对象是 <code>window</code> 对象</p>
<p>其他常用对象：</p>
<ul>
<li>
<p>screen：屏幕尺寸</p>
</li>
<li>
<p>location：当前网页 url 信息</p>
<img data-src="/archives/5e5baec5/BOM_location.png" alt="BOM_location" style="zoom:50%;">
</li>
<li>
<p>document: 当前网页信息</p>
<blockquote>
<p>常见用法：</p>
<ul>
<li>获取文档树节点：<code>document.getElemntById()</code></li>
<li>获取 <code>cookie</code>： <code>document.cookie</code>（不建议使用）</li>
</ul>
</blockquote>
</li>
<li>
<p>history</p>
</li>
</ul>
<h3 id="7-操作-dom-元素"><a class="markdownIt-Anchor" href="#7-操作-dom-元素"></a> 7. 操作 <code>DOM</code> 元素</h3>
<p><code>DOM：Document Object Model</code>（文档对象模型）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。</p>
<p>浏览器网页就是一个 <code>DOM</code> 树形结构。</p>
<h4 id="71-获取-dom-节点"><a class="markdownIt-Anchor" href="#71-获取-dom-节点"></a> 7.1 获取 <code>DOM</code> 节点：</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 根据不同的 CSS 选择器获取 DOM 节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(h1);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p1);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p2);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> children = div.children;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(children);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img data-src="/archives/5e5baec5/DOM%E8%8A%82%E7%82%B9.png" alt="DOM节点" style="zoom:50%;">
<p>更新节点：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">    abc</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>操作文本：</p>
<p><code>innerText='123'</code></p>
<img data-src="/archives/5e5baec5/innerText1.png" alt="innerText1" style="zoom:50%;">
<p><code>innerText='&lt;strong&gt;123&lt;/strong&gt;'</code></p>
<img data-src="/archives/5e5baec5/innerText2.png" alt="innerText2" style="zoom:50%;">
<p><code>innerHTML='&lt;strong&gt;123&lt;/strong&gt;'</code></p>
<img data-src="/archives/5e5baec5/innerHTML.png" alt="innerHTML" style="zoom:50%;">
<p>操作样式：</p>
<img data-src="/archives/5e5baec5/%E6%93%8D%E4%BD%9C%E6%A0%B7%E5%BC%8F.png" alt="操作样式" style="zoom:50%;">
<h4 id="72-删除-dom-节点"><a class="markdownIt-Anchor" href="#72-删除-dom-节点"></a> 7.2 删除 <code>DOM</code> 节点</h4>
<p>通过父节点删除子节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 根据不同的 CSS 选择器获取 DOM 节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(h1);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p1);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p2);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> children = parent.children;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(children);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>
<p><code>parent.removeChild(p1)</code></p>
</li>
<li>
<p><code>parent.removeChild(parent.children[1])</code></p>
<blockquote>
<p>这种方式在删除多个子节点时要注意下标，因为删除是一个动态的过程。</p>
</blockquote>
</li>
</ul>
</blockquote>
<h4 id="73-插入-dom-节点"><a class="markdownIt-Anchor" href="#73-插入-dom-节点"></a> 7.3 插入 <code>DOM</code> 节点</h4>
<p>创建一个节点：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">p.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">p.setAttribute(<span class="string">&#x27;innerText&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>插入节点：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">parent.appendChild(p);</span><br></pre></td></tr></table></figure>
<h3 id="8-表单验证"><a class="markdownIt-Anchor" href="#8-表单验证"></a> 8. 表单验证</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/blueimp-md5/2.16.0/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据 f() 返回的结果决定是否跳转 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return f()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span>: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span>: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input_password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> username = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> input_password = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input_password&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> password = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;password&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// md5 加密密码</span></span></span><br><span class="line">        password.value = md5(password.value);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 校验表单内容</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="9-jquery"><a class="markdownIt-Anchor" href="#9-jquery"></a> 9. jQuery</h3>
<p>使用方法：<code>$('选择器').action( function (&#123;&#125;) )</code></p>
<p>选择器：</p>
<ul>
<li>标签选择器：<code>$('p').click();</code></li>
<li>id 选择器：<code>$('#id').click();</code></li>
<li>class 选择器：<code>$('.class').click();</code></li>
</ul>
<p>事件：</p>
<p><a href="https://jquery.cuishifeng.cn/">jQuery 中文文档</a></p>
<p><a href="https://www.bootcdn.cn/">BootCDN</a></p>
<h3 id="10-总结"><a class="markdownIt-Anchor" href="#10-总结"></a> 10. 总结</h3>
<ol>
<li>
<p>如何巩固 HTML &amp; CSS</p>
<ul>
<li>扒网站，修改看效果</li>
</ul>
</li>
<li>
<p>如何巩固 JavaScript</p>
<ul>
<li>看 JQuery 源码</li>
<li>看网页小游戏源码（<a href="https://www.mycodes.net/">源码之家</a>）</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/archives/599b70c0.html</url>
    <content><![CDATA[<p>层叠样式表（Cascading Style Sheets，CSS）：定义网页的表现，美化网页。具体来说，就是用于设置网页中元素（标签）的样式。</p>
<p>优点：</p>
<ul>
<li>内容（HTML）与表现（CSS）分离</li>
<li>可以实现复用</li>
<li>样式丰富</li>
</ul>
<span id="more"></span>
<h4 id="定义-css-的三种方式"><a class="markdownIt-Anchor" href="#定义-css-的三种方式"></a> 定义 CSS 的三种方式</h4>
<h5 id="行内样式"><a class="markdownIt-Anchor" href="#行内样式"></a> 行内样式</h5>
<p>在标签内部通过 <code>style</code> 属性设置标签的样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;font-size: 20px;&quot;</span>&gt;</span>行内样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>问题：只能控制当前的 <code>&lt;p&gt;</code> 标签</p>
<h5 id="内部样式"><a class="markdownIt-Anchor" href="#内部样式"></a> 内部样式</h5>
<p>在 <code>&lt;head&gt;</code> 标签中通过 <code>&lt;style&gt;</code> 标签定义样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>内部样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>问题：可以控制当前 html 页面中的所有 <code>&lt;p&gt;</code> 标签的样式，但是不能在其他 html 页面中进行复用。</p>
<h5 id="外部样式"><a class="markdownIt-Anchor" href="#外部样式"></a> 外部样式</h5>
<p>创建单独的 css 文件，并在其中定义样式，然后在 html 页面中引入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 引用外部 css 文件，一般建议使用这种方式--&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>优点：编写外部样式表，不仅可以进行复用，而且可以使用浏览器的缓存机制，从而加快网页的加载速度，提升用户的体验。</p>
<mark class="label primary">优先级：**就近原则**，哪个样式离选择器最近，就使用哪个样式。</mark>
<h4 id="选择器"><a class="markdownIt-Anchor" href="#选择器"></a> 选择器</h4>
<p>作用：选择页面中某一个或某一类元素。</p>
<h5 id="基本选择器"><a class="markdownIt-Anchor" href="#基本选择器"></a> 基本选择器</h5>
<h6 id="标签选择器"><a class="markdownIt-Anchor" href="#标签选择器"></a> 标签选择器</h6>
<p>用于选择一类标签，如：选择所有的 <code>&lt;p&gt;</code> 标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: red;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="类选择器"><a class="markdownIt-Anchor" href="#类选择器"></a> 类选择器</h6>
<p>用于选择 class 属性值一致的标签，可以跨标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .h &#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h&quot;</span>&gt;</span>class 选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h&quot;</span>&gt;</span>class 选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>PS：<code>class</code> 属性可以有多个值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .h &#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        .p &#123;</span><br><span class="line"><span class="css">						<span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;h&quot;</span>&gt;</span>class 选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;h p&quot;</span>&gt;</span>class 选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="id-选择器"><a class="markdownIt-Anchor" href="#id-选择器"></a> ID 选择器</h6>
<p>根据 id 属性的值选择标签，全局唯一</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #p1 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>id 选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>id 选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>优先级：id &gt; class &gt; 标签</strong></p>
<h5 id="复合选择器"><a class="markdownIt-Anchor" href="#复合选择器"></a> 复合选择器</h5>
<h6 id="交集选择器"><a class="markdownIt-Anchor" href="#交集选择器"></a> 交集选择器</h6>
<p>语法：<code>选择器1选择器2选择器3 &#123;&#125;</code></p>
<h6 id="并集选择器"><a class="markdownIt-Anchor" href="#并集选择器"></a> 并集选择器</h6>
<p>语法：<code>选择器1, 选择器2, 选择器3 &#123;&#125;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span>, <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">color</span>: red;</span></span><br><span class="line">       &#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>并集层次选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>并集层次选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="关系选择器"><a class="markdownIt-Anchor" href="#关系选择器"></a> 关系选择器</h5>
<p>几个概念：</p>
<ul>
<li>父元素</li>
<li>子元素</li>
<li>祖先元素</li>
<li>后代元素</li>
<li>兄弟元素</li>
</ul>
<h6 id="子元素选择器"><a class="markdownIt-Anchor" href="#子元素选择器"></a> 子元素选择器</h6>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 选中子元素，会选中 p1、p2、p3 和 p7 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: aquamarine;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="后代元素选择器"><a class="markdownIt-Anchor" href="#后代元素选择器"></a> 后代元素选择器</h6>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 后代选择器，会选中 body 下的所有 p 标签 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: blueviolet;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="兄弟选择器选中第一个"><a class="markdownIt-Anchor" href="#兄弟选择器选中第一个"></a> 兄弟选择器：选中第一个</h6>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 兄弟（向下）选择器，选中相邻的下一个 p 标签  */</span></span></span><br><span class="line"><span class="css">      	<span class="comment">/* 如果下一个不是 p 标签，就什么也不做 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> + <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: brown;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="兄弟选择器选中所有"><a class="markdownIt-Anchor" href="#兄弟选择器选中所有"></a> 兄弟选择器：选中所有</h6>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 相邻（向下）选择器，选中 p3、p7 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.active</span> ~ <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>p6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="属性选择器"><a class="markdownIt-Anchor" href="#属性选择器"></a> 属性选择器</h5>
<p>语法：</p>
<ul>
<li><code>[属性]&#123;&#125;</code>：选中包含该属性的所有标签</li>
<li><code>p[属性]&#123;&#125;</code>：选中包含该属性的所有 p 标签</li>
<li><code>p[属性=&quot;属性值&quot;]</code>：选中“属性=‘属性值’”的 p 标签</li>
<li><code>p[属性^=&quot;属性值&quot;]</code>：选中以属性值开头的 p 标签</li>
<li><code>p[属性$=&quot;属性值&quot;]</code>：选中以属性值结尾的 p 标签</li>
<li><code>p[属性*=&quot;属性值&quot;]</code>：选中包含属性值的 p 标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">p</span><span class="selector-attr">[title]</span> &#123;</span></span><br><span class="line"><span class="css">           <span class="attribute">color</span>: red;</span></span><br><span class="line">       &#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;p&quot;</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="伪类选择器"><a class="markdownIt-Anchor" href="#伪类选择器"></a> 伪类选择器</h5>
<p>伪类一般用 <code>:</code> 开头，如：</p>
<ul>
<li>
<p><code>:first-child</code>：第一个子元素</p>
</li>
<li>
<p><code>:last-child</code>：最后一个子元素</p>
</li>
<li>
<p><code>:nth-child()</code>：第 n 个子元素</p>
<blockquote>
<p><code>:nth-child(n)</code> ：所有子元素</p>
<p><code>:nth-child(2n)</code>：偶数位子元素</p>
<p><code>:nth-child(2n+1)</code>：奇数位子元素</p>
</blockquote>
</li>
</ul>
<p><strong>ps：以上这些伪类根据所有子元素排序</strong></p>
<p>如：<code>body p:first-child &#123;&#125;</code>，如果 body 的第一个子元素不是 p，那这个 css 样式就不起作用</p>
<ul>
<li><code>:first-of-type</code>：</li>
<li><code>:last-of-type</code>：</li>
<li><code>:nth-of-type</code>：</li>
</ul>
<p><strong>ps：以上这些伪类则是根据标签类型进行排序</strong></p>
<ul>
<li><code>:not(:first-child)</code></li>
</ul>
<p>如：<code>body p:first-of-type &#123;&#125;</code>，就会对 body 下的第一个 p 标签起作用，不管 p 标签前面是否有其他标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 伪类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: springgreen;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: darkorchid;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">            <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: darkseagreen;</span></span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line"><span class="css">            <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">color</span>: hotpink;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p7<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="选择器权重"><a class="markdownIt-Anchor" href="#选择器权重"></a> 选择器权重</h5>
<table>
<thead>
<tr>
<th>样式</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>内联样式</td>
<td>1000</td>
</tr>
<tr>
<td>id 选择器样式</td>
<td>100</td>
</tr>
<tr>
<td>类和伪类选择器样式</td>
<td>10</td>
</tr>
<tr>
<td>元素选择器样式</td>
<td>1</td>
</tr>
<tr>
<td>通配选择器样式</td>
<td>0</td>
</tr>
<tr>
<td>继承的样式</td>
<td>🌫️</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>比较样式的优先级时，需要将选择器的权重相加再比较。</p>
<p>如果比较厚优先级相同，离元素距离越近的样式优先级越高。</p>
<h4 id="盒模型"><a class="markdownIt-Anchor" href="#盒模型"></a> 盒模型</h4>
<p>CSS 盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p>
<img data-src="/archives/599b70c0/%E7%9B%92%E6%A8%A1%E5%9E%8B.png" alt="盒模型" style="zoom:50%;">
<ul>
<li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li>
<li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li>
<li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li>
<li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 盒模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            .outer &#123;</span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: white;</span></span><br><span class="line"></span><br><span class="line"><span class="css">                <span class="attribute">padding</span>: <span class="number">50px</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css">                <span class="attribute">border-width</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">border-color</span>: black;</span></span><br><span class="line"><span class="css">                <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            .inner &#123;</span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>盒模型<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>width</code> 和 <code>height</code> 用于设置盒子 Content 的大小</p>
</li>
<li>
<p><code>border-width</code>、<code>border-color</code>、<code>border-style</code> 用于设置盒子 Border 的样式</p>
</li>
<li>
<p><code>border-width: 10px 20px 30px 40px</code>：</p>
<ul>
<li>四个值：上 右 下左</li>
<li>三个值：上 左/右 下</li>
<li>两个值：上/下 左/右</li>
<li>一个值：上下左右</li>
</ul>
</li>
</ul>
<blockquote>
<p>类似属性：<code>border-top-width</code>、<code>border-bottom-width</code>、<code>border-left-width</code>、<code>border-right-width</code></p>
</blockquote>
<p>要分别显示定义 <code>border-width</code>、<code>border-color</code>、<code>border-style</code> 会特别麻烦，可以简写：</p>
<p><code>border: 5px red solid</code> ，width、color、style 没有先后顺序</p>
<p>元素水平方向上的布局：</p>
<p>一个元素在其父元素中水平方向上的位置由以下几个属性共同决定：</p>
<ul>
<li><code>margin-left</code></li>
<li><code>border-left</code></li>
<li><code>padding-left</code></li>
<li><code>width</code></li>
<li><code>padding-right</code></li>
<li><code>border-right</code></li>
<li><code>margin-right</code></li>
</ul>
<p>如果父元素中只有一个子元素，需要满足以下等式：</p>
<p><code>margin-left</code> + <code>border-left</code> + <code>padding-left</code> + <code>width</code>  + <code>padding-right</code> + <code>border-right</code> + <code>margin-right</code> = 父元素的 <code>width</code></p>
<p>如果以上等式不满足，浏览器会自动跳转 <code>margin-right</code> 的值以使等式成立。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/archives/fe29e710.html</url>
    <content><![CDATA[<h4 id="redis-概述"><a class="markdownIt-Anchor" href="#redis-概述"></a> <code>Redis</code> 概述</h4>
<p><code>Redis</code> 是速度非常快的非关系型（<code>NoSQL</code>）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>
<mark class="label primary">键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</mark>
<p><code>Redis</code> 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>
<span id="more"></span>
<h4 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h4>
<h5 id="string"><a class="markdownIt-Anchor" href="#string"></a> <code>STRING</code></h5>
<p><code>STRING</code> 可以存储字符串、整数或者浮点数。</p>
<p>支持的操作：</p>
<ul>
<li>对整个字符串或者字符串的一部分执行操作</li>
<li>对整数和浮点数执行自增或者自减操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> hello world</span><br><span class="line">OK</span><br><span class="line">&gt; get hello</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">&gt; del hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; get hello</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>
<h5 id="list"><a class="markdownIt-Anchor" href="#list"></a> <code>LIST</code></h5>
<p>列表，支持的操作：</p>
<ul>
<li>从两端压入或者弹出元素。</li>
<li>对单个或者多个元素进行修剪。</li>
<li>只保留一个范围内的元素。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rpush list-key item</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; rpush list-key item2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">&gt; rpush list-key item</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br><span class="line">&gt; lrange list-key 0 -1</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">2) <span class="string">&quot;item2&quot;</span></span><br><span class="line">3) <span class="string">&quot;item&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; lindex list-key 1</span><br><span class="line"><span class="string">&quot;item2&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; lpop list-key</span><br><span class="line"><span class="string">&quot;item&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; lrange list-key 0 -1</span><br><span class="line">1) <span class="string">&quot;item2&quot;</span></span><br><span class="line">2) <span class="string">&quot;item&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> <code>HASH</code></h5>
<p>无序散列表，支持的操作：</p>
<ul>
<li>
<p>添加、获取、移除单个键值对</p>
</li>
<li>
<p>获取所有键值对</p>
</li>
<li>
<p>检查某个键是否存在</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; hset hash-key key1 value1</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hset hash-key key2 value2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hset hash-key key1 value1</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; hgetall hash-key</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;value1&quot;</span><br><span class="line">3) &quot;key2&quot;</span><br><span class="line">4) &quot;value2&quot;</span><br><span class="line"></span><br><span class="line">&gt; hdel hash-key key2</span><br><span class="line">(integer) 1</span><br><span class="line">&gt; hdel hash-key key2</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">&gt; hget hash-key key1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line"></span><br><span class="line">&gt; hgetall hash-key</span><br><span class="line">1) &quot;key1&quot;</span><br><span class="line">2) &quot;value1&quot;</span><br></pre></td></tr></table></figure>
<h5 id="set"><a class="markdownIt-Anchor" href="#set"></a> <code>SET</code></h5>
<p>无序集合，支持的操作：</p>
<ul>
<li>添加、获取、移除单个元素</li>
<li>检查一个元素是否存在于集合中</li>
<li>计算交集、并集、差集</li>
<li>从集合里面随机获取元素</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; sadd set-key item</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; sadd set-key item2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; sadd set-key item3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; sadd set-key item</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">&gt; smembers set-key</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">2) <span class="string">&quot;item2&quot;</span></span><br><span class="line">3) <span class="string">&quot;item3&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; sismember set-key item4</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">&gt; sismember set-key item</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">&gt; srem set-key item2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; srem set-key item2</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">&gt; smembers set-key</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">2) <span class="string">&quot;item3&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="zset"><a class="markdownIt-Anchor" href="#zset"></a> <code>ZSET</code></h5>
<p>有序集合，支持的操作：</p>
<ul>
<li>添加、获取、删除元素</li>
<li>根据分值范围或者成员来获取元素</li>
<li>计算一个键的排名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; zadd zset-key 728 member1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; zadd zset-key 982 member0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; zadd zset-key 982 member0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">&gt; zrange zset-key 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;member1&quot;</span></span><br><span class="line">2) <span class="string">&quot;728&quot;</span></span><br><span class="line">3) <span class="string">&quot;member0&quot;</span></span><br><span class="line">4) <span class="string">&quot;982&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; zrangebyscore zset-key 0 800 withscores</span><br><span class="line">1) <span class="string">&quot;member1&quot;</span></span><br><span class="line">2) <span class="string">&quot;728&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; zrem zset-key member1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">&gt; zrem zset-key member1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">&gt; zrange zset-key 0 -1 withscores</span><br><span class="line">1) <span class="string">&quot;member0&quot;</span></span><br><span class="line">2) <span class="string">&quot;982&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h4>
<h5 id="字典"><a class="markdownIt-Anchor" href="#字典"></a> 字典</h5>
<p><code>dictht</code> 是一个散列表结构，使用拉链法解决哈希冲突。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class="line"><span class="comment"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> sizemask;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;</span><br><span class="line">&#125; dictht;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">        <span class="keyword">double</span> d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure>
<p><code>Redis</code> 的字典 <code>dict</code> 中包含两个哈希表 <code>dictht</code>，这是为了方便进行 <code>rehash</code> 操作。</p>
<p>在扩容时，将其中一个 <code>dictht</code> 上的键值对 <code>rehash</code> 到另一个 <code>dictht</code> 上面，完成之后释放空间并交换两个 <code>dictht</code> 的角色。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type;</span><br><span class="line">    <span class="keyword">void</span> *privdata;</span><br><span class="line">    dictht ht[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">long</span> rehashidx; <span class="comment">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> iterators; <span class="comment">/* number of iterators currently running */</span></span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure>
<p><code>rehash</code> 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 <code>rehash</code> 操作给服务器带来过大的负担。</p>
<p>渐进式 <code>rehash</code> 通过记录 <code>dict</code> 的 <code>rehashidx</code> 完成，它从 0 开始，每执行一次 <code>rehash</code> 都会递增。</p>
<p>在 <code>rehash</code> 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 <code>rehash</code>。</p>
<h5 id="跳表"><a class="markdownIt-Anchor" href="#跳表"></a> 跳表</h5>
<p>有序集合的底层实现之一。</p>
<p>跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。</p>
<img data-src="/archives/fe29e710/%E8%B7%B3%E8%A1%A8.png" alt="跳表" style="zoom:50%;">
<p>与红黑树等平衡树相比，跳跃表具有以下优点：</p>
<ul>
<li>插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；</li>
<li>更容易实现；</li>
<li>支持无锁操作。</li>
</ul>
<h4 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h4>
<h5 id="计数器"><a class="markdownIt-Anchor" href="#计数器"></a> 计数器</h5>
<h5 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h5>
<h5 id="消息队列"><a class="markdownIt-Anchor" href="#消息队列"></a> 消息队列</h5>
<h5 id="会话缓存"><a class="markdownIt-Anchor" href="#会话缓存"></a> 会话缓存</h5>
<h5 id="分布式锁"><a class="markdownIt-Anchor" href="#分布式锁"></a> 分布式锁</h5>
<h4 id="数据淘汰策略"><a class="markdownIt-Anchor" href="#数据淘汰策略"></a> 数据淘汰策略</h4>
<h4 id="持久化"><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h4>
<p><code>Redis</code> 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>
<h5 id="rdb"><a class="markdownIt-Anchor" href="#rdb"></a> <code>RDB</code></h5>
<p>将某个时间点的所有数据都存放到硬盘上。</p>
<p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>
<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>
<p>如果数据量很大，保存快照的时间会很长。</p>
<h5 id="aof"><a class="markdownIt-Anchor" href="#aof"></a> <code>AOF</code></h5>
<p>将写命令添加到 <code>AOF</code> 文件（<code>Append Only File</code>）的末尾。</p>
<p>使用 <code>AOF</code> 持久化需要设置同步选项，从而确保写命令同步到磁盘文件上的时机。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>
<ul>
<li><code>always</code>：每个写命令都同步</li>
<li><code>everysec</code>：每秒同步一次</li>
<li><code>no</code>：让操作系统决定何时同步</li>
</ul>
<h4 id="缓存问题"><a class="markdownIt-Anchor" href="#缓存问题"></a> 缓存问题</h4>
<h5 id="缓存穿透"><a class="markdownIt-Anchor" href="#缓存穿透"></a> 缓存穿透</h5>
<p>指的是对某个一定不存在的数据进行请求，该请求将会穿透缓存到达数据库。</p>
<p>解决方案：</p>
<ul>
<li>对这些不存在的数据缓存一个空数据；</li>
<li>对这类请求进行过滤。</li>
</ul>
<h5 id="缓存雪崩"><a class="markdownIt-Anchor" href="#缓存雪崩"></a> 缓存雪崩</h5>
<p>指的是由于数据没有被加载到缓存中，或者缓存数据在同一时间大面积失效（过期），又或者缓存服务器宕机，导致大量的请求都到达数据库。</p>
<p>在有缓存的系统中，系统非常依赖于缓存，缓存分担了很大一部分的数据请求。当发生缓存雪崩时，数据库无法处理这么大的请求，导致数据库崩溃。</p>
<p>解决方案：</p>
<ul>
<li>为了防止缓存在同一时间大面积过期导致的缓存雪崩，可以通过观察用户行为，合理设置缓存过期时间来实现；</li>
<li>为了防止缓存服务器宕机出现的缓存雪崩，可以使用分布式缓存，分布式缓存中每一个节点只缓存部分的数据，当某个节点宕机时可以保证其它节点的缓存仍然可用。</li>
<li>也可以进行缓存预热，避免在系统刚启动不久由于还未将大量数据进行缓存而导致缓存雪崩。</li>
</ul>
<h4 id="与-memcached-的比较"><a class="markdownIt-Anchor" href="#与-memcached-的比较"></a> 与 <code>Memcached</code> 的比较</h4>
<p>两者都是非关系型内存键值数据库，主要有以下不同：</p>
<ul>
<li>
<p>数据类型：<code>Memcached</code> 仅支持字符串类型；<code>Redis</code> 支持五种不同的数据类型。</p>
</li>
<li>
<p>数据持久化：<code>Memcached</code> 不支持持久化；<code>Redis</code> 支持两种持久化策略：<code>RDB</code> 快照和 <code>AOF</code> 日志。</p>
</li>
<li>
<p>分布式：<code>Memcached</code> 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点；<code>Redis Cluster</code> 实现了分布式的支持。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
        <tag>Redis 基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Explain</title>
    <url>/archives/b32c9fde.html</url>
    <content><![CDATA[<h4 id="安装测试数据库"><a class="markdownIt-Anchor" href="#安装测试数据库"></a> 安装测试数据库</h4>
<ol>
<li>克隆 <code>test_db.git</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:datacharmer/test_db.git</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>去到 <code>test_db</code> 目录，并安装 <code>employees</code> 数据库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># p 后跟数据库秘密</span></span><br><span class="line">mysql -uroot -p -t &lt; employees.sql</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="explain-输出"><a class="markdownIt-Anchor" href="#explain-输出"></a> <code>Explain</code> 输出</h4>
<p>执行 <code>explain select * from employees where emp_no='10001';</code> 输出：</p>
<p><img data-src="/archives/b32c9fde/Explain%E7%9A%84%E8%BE%93%E5%87%BA.png" alt="Explain输出"></p>
<p>下图来自 <code>MySQL</code> 官方参考手册：</p>
<img data-src="/archives/b32c9fde/Explain%20Column.png" alt="Explain Column" style="zoom:50%;">
<p>比较重要的字段：</p>
<h5 id="select_type"><a class="markdownIt-Anchor" href="#select_type"></a> <code>select_type</code></h5>
<p><img data-src="/archives/b32c9fde/select_type.png" alt="select_type"></p>
<p>最常见的查询类型就是 <code>SIMPLE</code>，如 <code>explain select * from employees where emp_no='10001';</code></p>
<p>如果是 <code>union</code> 查询，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from employees where emp_no between &#39;10001&#39; and &#39;10005&#39;</span><br><span class="line">union</span><br><span class="line">select * from employees where emp_no between &#39;10006&#39; and &#39;10010&#39;;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p><img data-src="/archives/b32c9fde/union_select.png" alt="union查询"></p>
<h5 id="type"><a class="markdownIt-Anchor" href="#type"></a> <code>type</code></h5>
<p>The <code>type</code> column of <a href="https://dev.mysql.com/doc/refman/8.0/en/explain.html"><code>EXPLAIN</code></a> output describes how tables are joined.</p>
<p>The following list describes the join types, ordered from the best type to the worst:</p>
<h6 id="system"><a class="markdownIt-Anchor" href="#system"></a> <code>system</code></h6>
<p>表中只有一条数据。这个类型是特殊的 <code>const</code> 类型。</p>
<h6 id="const"><a class="markdownIt-Anchor" href="#const"></a> <code>const</code></h6>
<p>针对主键或唯一索引的等值查询扫描， 最多只返回一行数据。</p>
<p><code>const</code> 查询速度非常快, 因为它仅仅读取一次即可。</p>
<h6 id="eq_ref"><a class="markdownIt-Anchor" href="#eq_ref"></a> <code>eq_ref</code></h6>
<p>One row is read from this table for each combination of rows from the previous tables.</p>
<p>It is used when all parts of an index are used by the join and the index is a <code>PRIMARY KEY</code> or <code>UNIQUE NOT NULL</code> index.</p>
<p>假设有两张表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &#96;user_info&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) not null auto_increment,</span><br><span class="line">    &#96;name&#96; varchar(50) not null default &#39;&#39;,</span><br><span class="line">    &#96;age&#96; int(11) default null,</span><br><span class="line">    primary key (&#96;id&#96;),</span><br><span class="line">    key name_idx (&#96;name&#96;)</span><br><span class="line">) engine &#x3D; InnoDB, charset &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">create table &#96;order_info&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) not null auto_increment,</span><br><span class="line">    &#96;user_id&#96; bigint(20) default null,</span><br><span class="line">    &#96;product_name&#96; varchar(50) not null default &#39;&#39;,</span><br><span class="line">    &#96;productor&#96; varchar(30) default null,</span><br><span class="line">    primary key (&#96;id&#96;),</span><br><span class="line">    key &#96;user_product_detail_index&#96; (&#96;user_id&#96;, &#96;product_name&#96;, &#96;productor&#96;)</span><br><span class="line">) engine &#x3D; InnoDB, charset &#x3D; utf8;</span><br></pre></td></tr></table></figure>
<p>查询语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from user_info, order_info where user_info.id &#x3D; order_info.user_id;</span><br></pre></td></tr></table></figure>
<p>执行计划为：</p>
<center><img data-src="/archives/b32c9fde/eq_ref.png" alt="eq_ref" style="zoom:50%;"><img data-src="/archives/b32c9fde/eq_ref%E7%BB%AD.png" alt="eq_ref续" style="zoom:35%;"></center>
<h6 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> <code>ref</code></h6>
<p>All rows with matching index values are read from this table for each combination of rows from the previous tables. <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#jointype_ref"><code>ref</code></a> is used if the join uses only a leftmost prefix of the key or if the key is not a <code>PRIMARY KEY</code> or <code>UNIQUE</code> index (in other words, if the join cannot select a single row based on the key value). If the key that is used matches only a few rows, this is a good join type.</p>
<p>此类型通常出现在多表的 join 查询, 针对于非唯一或非主键索引, 或者是使用了 <code>最左前缀</code> 规则索引的查询.</p>
<h6 id="range"><a class="markdownIt-Anchor" href="#range"></a> <code>range</code></h6>
<p>表示使用索引范围查询, 通过索引字段范围获取表中部分数据记录. 这个类型通常出现在<code>=, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN()</code> 操作中.</p>
<p>当 <code>type</code> 是 <code>range</code> 时, 那么 <code>EXPLAIN</code> 输出的 <code>ref</code> 字段为 <code>NULL</code>, 并且 <code>key_len</code> 字段是此次查询中使用到的索引的最长的那个.</p>
<p>如查询语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from employees.employees where emp_no between &#39;10001&#39; and &#39;10010&#39;;</span><br></pre></td></tr></table></figure>
<p>执行计划为 ：</p>
<center><img data-src="/archives/b32c9fde/range.png" alt="range" style="zoom:50%;"><img data-src="/archives/b32c9fde/range%E7%BB%AD.png" alt="range续" style="zoom:40%;"></center>
<h6 id="index"><a class="markdownIt-Anchor" href="#index"></a> <code>index</code></h6>
<p>The <code>index</code> join type is the same as <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#jointype_all"><code>ALL</code></a>, except that the index tree is scanned. This occurs two ways:</p>
<ul>
<li>If the index is a covering index for the queries and can be used to satisfy all data required from the table, only the index tree is scanned. In this case, the <code>Extra</code> column says <code>Using index</code>. An index-only scan usually is faster than <a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#jointype_all"><code>ALL</code></a> because the size of the index usually is smaller than the table data.</li>
<li>A full table scan is performed using reads from the index to look up data rows in index order. <code>Uses index</code> does not appear in the <code>Extra</code> column.</li>
</ul>
<p>如查询语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select dept_no from employees.dept_manager;</span><br></pre></td></tr></table></figure>
<p>的执行计划为：</p>
<center><img data-src="/archives/b32c9fde/index.png" alt="index" style="zoom:50%;"><img data-src="/archives/b32c9fde/index%E7%BB%AD.png" alt="index续" style="zoom:40%;"></center>
<h6 id="all"><a class="markdownIt-Anchor" href="#all"></a> <code>all</code></h6>
<p>全表扫描。</p>
<p>如查询语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from employees.employees where first_name like &#39;G%&#39;;</span><br></pre></td></tr></table></figure>
<p>的执行计划为：</p>
<center><img data-src="/archives/b32c9fde/all.png" alt="all" style="zoom:50%;"><img data-src="/archives/b32c9fde/all%E7%BB%AD.png" alt="all续" style="zoom:40%;"></center>
<h5 id="possible_keys"><a class="markdownIt-Anchor" href="#possible_keys"></a> <code>possible_keys</code></h5>
<p><code>MySQL</code> 在查询时，可能用到的索引。</p>
<h5 id="key"><a class="markdownIt-Anchor" href="#key"></a> <code>key</code></h5>
<p><code>MySQL</code> 在查询时，真正用到的索引。</p>
<h5 id="key_len"><a class="markdownIt-Anchor" href="#key_len"></a> <code>key_len</code></h5>
<p>表示查询优化器使用了索引的字节数。</p>
<p>这个字段可以评估组合索引是否完全被使用，或只有最左部分字段被使用到。</p>
<p><code>key_len</code> 的计算规则如下:</p>
<ul>
<li>字符串
<ul>
<li><code>char(n)</code>: <code>n</code> 字节长度。</li>
<li><code>varchar(n)</code>: 如果是 <code>utf8</code> 编码, 则是 <code>3n + 2</code> 字节；如果是 <code>utf8mb4</code> 编码，则是 <code>4n + 2</code> 字节。</li>
</ul>
</li>
<li>数值类型:
<ul>
<li><code>TINYINT</code>: 1 字节</li>
<li><code>SMALLINT</code>: 2 字节</li>
<li><code>MEDIUMINT</code>: 3 字节</li>
<li><code>INT</code>: 4  字节</li>
<li><code>BIGINT</code>: 8字节</li>
</ul>
</li>
<li>时间类型
<ul>
<li><code>DATE</code>: 3 字节</li>
<li><code>TIMESTAMP</code>: 4 字节</li>
<li><code>DATETIME</code>: 8 字节</li>
</ul>
</li>
<li>字段属性: <code>NULL</code> 属性占用一个字节。 如果一个字段是 <code>NOT NULL</code> 的，则没有此属性.</li>
</ul>
<p>如对表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &#96;order_info&#96; (</span><br><span class="line">    &#96;id&#96; bigint(20) not null auto_increment,</span><br><span class="line">    &#96;user_id&#96; bigint(20) default null,</span><br><span class="line">    &#96;product_name&#96; varchar(50) not null default &#39;&#39;,</span><br><span class="line">    &#96;productor&#96; varchar(30) default null,</span><br><span class="line">    primary key (&#96;id&#96;),</span><br><span class="line">    key &#96;user_product_detail_index&#96; (&#96;user_id&#96;, &#96;product_name&#96;, &#96;productor&#96;)</span><br><span class="line">) engine &#x3D; InnoDB, charset &#x3D; utf8;</span><br></pre></td></tr></table></figure>
<p>进行如下查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from order_info where user_id &lt; 3 and product_name &#x3D; &#39;p1&#39; and productor &#x3D; &#39;WHH&#39;;</span><br></pre></td></tr></table></figure>
<p>执行计划为：</p>
<center><img data-src="/archives/b32c9fde/key_len.png" alt="key_len" style="zoom:50%;"><img data-src="/archives/b32c9fde/key_len%E7%BB%AD.png" alt="key_len续" style="zoom:39%;"></center>
<p>从结果中可以看出，因为 <code>where</code> 子句中使用了范围查询，根据<mark class="label primary">最左前缀原则</mark>，只会使用联合索引的第一个字段，也就是 <code>user_id</code>。</p>
<p>而 <code>user_id</code> 是 <code>bigint</code> 类型，占 8 个字节；字段可以为 <code>null</code>，占 1 个字节；所以 <code>key_len</code> 为 9 个字节。</p>
<h5 id="ref-2"><a class="markdownIt-Anchor" href="#ref-2"></a> <code>ref</code></h5>
<p>The <code>ref</code> column shows which columns or constants are compared to the index named in the <code>key</code> column to select rows from the table.</p>
<p>If the value is <code>func</code>, the value used is the result of some function. To see which function, use <a href="https://dev.mysql.com/doc/refman/8.0/en/show-warnings.html"><code>SHOW WARNINGS</code></a> following <a href="https://dev.mysql.com/doc/refman/8.0/en/explain.html"><code>EXPLAIN</code></a> to see the extended <a href="https://dev.mysql.com/doc/refman/8.0/en/explain.html"><code>EXPLAIN</code></a> output. The function might actually be an operator such as an arithmetic operator.</p>
<h5 id="rows"><a class="markdownIt-Anchor" href="#rows"></a> <code>rows</code></h5>
<p>估计的需要扫描读取的行数。</p>
<h5 id="filtered"><a class="markdownIt-Anchor" href="#filtered"></a> <code>filtered</code></h5>
<p>The <code>filtered</code> column indicates an estimated percentage of table rows that are filtered by the table condition. The maximum value is 100, which means no filtering of rows occurred. Values decreasing from 100 indicate increasing amounts of filtering. <code>rows</code> shows the estimated number of rows examined and <code>rows</code> × <code>filtered</code> shows the number of rows that are joined with the following table. For example, if <code>rows</code> is 1000 and <code>filtered</code> is 50.00 (50%), the number of rows to be joined with the following table is 1000 × 50% = 500.</p>
<h5 id="extra"><a class="markdownIt-Anchor" href="#extra"></a> <code>extra</code></h5>
<p>常见的有 <code>Using where</code>、<code>Using index</code> 等。</p>
<p>如果查询语句有 <code>order by</code> 子句，且子句中的字段没有建索引，<code>extra</code> 会出现 <code>Using filesort</code>。显然，查询时需要排序临时排序会严重影响性能，需要优化。</p>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">EXPLAIN Output Format</a></p>
</li>
<li>
<p><a href="https://segmentfault.com/a/1190000008131735">Explain 使用分析</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>Explain</tag>
      </tags>
  </entry>
  <entry>
    <title>InnoDB</title>
    <url>/archives/2b2295bb.html</url>
    <content><![CDATA[<p>在 <code>InnoDB</code> 中，表是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。</p>
<p>每一个索引在 <code>InnoDB</code> 里面对应一棵 B+ 树。</p>
<p>索引类型包括主键索引和非主键索引：</p>
<ul>
<li><strong>主键索引 - 也称聚簇索引</strong>，叶子节点存储存储的是整行数据。</li>
<li><strong>非主键索引 - 也称辅助索引、普通索引、二级索引</strong>，叶子节点存储的是主键的值。</li>
</ul>
<p>基于主键索引的查询通过查询主键索引树可以直接得到整行数据；</p>
<p>而基于普通索引，得先查询普通索引树，得到主键的值，然后根据主键的值去查询主键索引树才能得到想要的数据，这个过称为<strong>回表</strong>。</p>
<p>显然，基于普通索引的查询比基于主键索引的查询需要多扫描一颗索引树，因此建议尽量通过主键查询。</p>
<span id="more"></span>
<h4 id="innodb-四大特性"><a class="markdownIt-Anchor" href="#innodb-四大特性"></a> <code>InnoDB</code> 四大特性</h4>
<h4 id="与-myisam-的区别"><a class="markdownIt-Anchor" href="#与-myisam-的区别"></a> 与 <code>MyISAM</code> 的区别</h4>
<p>主要有两点：</p>
<ul>
<li><code>InnoDB</code> 支持行锁，<code>MyISAM</code> 不支持</li>
<li><code>InnoDB</code> 支持事务，<code>MyISAM</code> 不支持</li>
</ul>
<p><code>MyISAM</code> 适合读多写少的表，<code>InnoDB</code> 适合更新多表。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>存储引擎</tag>
        <tag>InnoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MVCC实现原理</title>
    <url>/archives/baf496e5.html</url>
    <content><![CDATA[<h4 id="mvcc-概述"><a class="markdownIt-Anchor" href="#mvcc-概述"></a> <code>MVCC</code> 概述</h4>
<p>多版本并发控制（<code>Multiversion Concurrency Control</code>，<code>MVCC</code>）是 <code>InnoDB</code> 实现的一种提高并发的技术。</p>
<p>早期的数据库系统，只有读读之间可以并发，读写，写读，写写都会阻塞。引入 <code>MVCC</code> 之后，只有写写之间相互阻塞，其他三种操作都可以并发，大幅度挺高了数据库的并发能力。</p>
<p>在内部实现中，<code>InnoDB</code> 通过 <code>undo log</code> 保存每条数据的多个版本，通过 <code>undo log</code> 可以找回数据历史版本提供给用户读。</p>
<p>在同一个事务中，用户只能看到该事务创建快照之前已经提交的修改和该事务本身做的修改。</p>
<p><code>InnoDB</code> 通过 <mark class="label primary">行级锁和 MVCC</mark> 实现提交读（<code>Read Commited</code>，<code>RC</code>）和可重复读（<code>Repeatable Read</code>，<code>RR</code>）。</p>
<span id="more"></span>
<h4 id="mvcc-实现"><a class="markdownIt-Anchor" href="#mvcc-实现"></a> <code>MVCC</code> 实现</h4>
<p><code>MVCC</code> 的实现基于：隐藏字段、<code>Read View</code> 和 <code>Undo log</code>。</p>
<h5 id="隐藏字段"><a class="markdownIt-Anchor" href="#隐藏字段"></a> 隐藏字段</h5>
<p><code>InnoDB</code> 会为每行数据添加三个隐藏字段：</p>
<ul>
<li><code>DB_TRX_ID</code>：最近插入或更新这条记录的<code>事务 ID</code>。</li>
<li><code>DB_ROLL_PTR</code>：指向回滚段（<code>roll segment</code>）中的记录的上一个版本（<code>undo log</code>）</li>
<li><code>DB_ROW_ID</code>：如果没有指定主键，会将该字段作为主键。</li>
</ul>
<h5 id="read-view"><a class="markdownIt-Anchor" href="#read-view"></a> <code>Read View</code></h5>
<p>在 <code>RR</code> 隔离级别下，执行第一个 <code>select</code> 语句时，会生成一个 <code>ReadView</code>，保存当前系统中活跃事务的 <code>ID</code>。</p>
<p>通过比较行记录当前版本和 <code>undo log</code> 中的旧版本中的 <code>DB_TRX_ID</code> 和事务的 <code>ReadView</code> 活跃事务的 <code>ID</code>，可以判断出哪个版本的数据对于该事务时可见的。</p>
<p><a href="https://github.com/facebook/mysql-5.6/blob/42a5444d52f264682c7805bf8117dd884095c476/storage/innobase/include/read0read.h#L125">Read View 结构源码</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">read_view_t</span>&#123;</span></span><br><span class="line">	ulint		type;	<span class="comment">/*!&lt; VIEW_NORMAL, VIEW_HIGH_GRANULARITY */</span></span><br><span class="line">	<span class="keyword">undo_no_t</span>	undo_no;<span class="comment">/*!&lt; 0 or if type is</span></span><br><span class="line"><span class="comment">				VIEW_HIGH_GRANULARITY</span></span><br><span class="line"><span class="comment">				transaction undo_no when this high-granularity</span></span><br><span class="line"><span class="comment">				consistent read view was created */</span></span><br><span class="line">	<span class="keyword">trx_id_t</span>	low_limit_no;</span><br><span class="line">				<span class="comment">/*!&lt; The view does not need to see the undo</span></span><br><span class="line"><span class="comment">				logs for transactions whose transaction number</span></span><br><span class="line"><span class="comment">				is strictly smaller (&lt;) than this value: they</span></span><br><span class="line"><span class="comment">				can be removed in purge if not needed by other</span></span><br><span class="line"><span class="comment">				views */</span></span><br><span class="line">	<span class="keyword">trx_id_t</span>	low_limit_id;</span><br><span class="line">				<span class="comment">/*!&lt; The read should not see any transaction</span></span><br><span class="line"><span class="comment">				with trx id &gt;= this value. In other words,</span></span><br><span class="line"><span class="comment">				this is the &quot;high water mark&quot;. */</span></span><br><span class="line">	<span class="keyword">trx_id_t</span>	up_limit_id;</span><br><span class="line">				<span class="comment">/*!&lt; The read should see all trx ids which</span></span><br><span class="line"><span class="comment">				are strictly smaller (&lt;) than this value.</span></span><br><span class="line"><span class="comment">				In other words,</span></span><br><span class="line"><span class="comment">				this is the &quot;low water mark&quot;. */</span></span><br><span class="line">	ulint		n_trx_ids;</span><br><span class="line">				<span class="comment">/*!&lt; Number of cells in the trx_ids array */</span></span><br><span class="line">	<span class="keyword">trx_id_t</span>*	trx_ids;<span class="comment">/*!&lt; Additional trx ids which the read should</span></span><br><span class="line"><span class="comment">				not see: typically, these are the read-write</span></span><br><span class="line"><span class="comment">				active transactions at the time when the read</span></span><br><span class="line"><span class="comment">				is serialized, except the reading transaction</span></span><br><span class="line"><span class="comment">				itself; the trx ids in this array are in a</span></span><br><span class="line"><span class="comment">				descending order. These trx_ids should be</span></span><br><span class="line"><span class="comment">				between the &quot;low&quot; and &quot;high&quot; water marks,</span></span><br><span class="line"><span class="comment">				that is, up_limit_id and low_limit_id. */</span></span><br><span class="line">	<span class="keyword">trx_id_t</span>	creator_trx_id;</span><br><span class="line">				<span class="comment">/*!&lt; trx id of creating transaction, or</span></span><br><span class="line"><span class="comment">				0 used in purge */</span></span><br><span class="line">	<span class="built_in">UT_LIST_NODE_T</span>(<span class="keyword">read_view_t</span>) view_list;</span><br><span class="line">				<span class="comment">/*!&lt; List of read views in trx_sys */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>重要字段：</p>
<ul>
<li><code>low_limit_id</code>：当前最大事务 <code>ID</code> 加 1，即下一个将被分配的事务 <code>ID</code></li>
<li><code>trx_ids</code>：<code>Read View</code> 创建时其他未提交的活跃事务 <code>ID</code> 列表</li>
<li><code>up_limit_id</code>：<code>trx_ids</code> 中最小的事务 <code>ID</code>，如果 <code>trx_ids</code> 为空，则 <code>up_limit_id</code> 为 <code>low_limit_id</code></li>
<li><code>creator_trx_id</code>：当前事务 <code>ID</code></li>
</ul>
<h5 id="undo-log"><a class="markdownIt-Anchor" href="#undo-log"></a> <code>undo log</code></h5>
<p><code>undo log</code> 记录的是数据行的旧版本信息，如果数据行对于当前事务不可见，可以根据 <code>undo log</code> 找到对于事务可见的数据版本。</p>
<p><code>InnoDB</code> 将 <code>undo log</code> 分为两类：</p>
<ul>
<li><code>insert undo log</code>：事务 <code>insert</code> 新记录时产生的 <code>undo log</code>，只在事务回滚时需要，事务提交后就可以立即丢弃。</li>
<li><code>update undo log</code>：通常用于一致性读中，只有在创建了快照的事务不再需要 <code>update undo log</code> 来构建数据的旧版本时，才能丢弃 <code>update undo log</code>。</li>
</ul>
<p><code>update undo log</code> 中包括删除操作，因为需要保证一致性读，数据的删除不是立即执行的。</p>
<p><code>InnoDB</code> 在可以丢弃关于删除的 <code>update undo log</code> 时才真正删除数据。</p>
<h5 id="记录的版本链"><a class="markdownIt-Anchor" href="#记录的版本链"></a> 记录的版本链</h5>
<p>假设有一条记录行如下，插入这条记录的事务 <code>ID</code> 是 1</p>
<img data-src="/archives/baf496e5/MVCC1.png" alt="MVCC1" style="zoom:50%;">
<p>现在有一个事务 <code>ID</code> 为 2 的事务要将这条记录的 <code>Honor</code> 修改为 <code>fmvp</code>，执行步骤如下：</p>
<ul>
<li>对这条记录加写锁（排他锁、独占锁）</li>
<li>将该记录复制到 <code>undo log</code></li>
<li>修改 <code>Honor</code>，修改 <code>DB_TRX_ID</code> 为 2，让 <code>DB_ROLL_PTR</code> 指向 <code>undo log</code> 中的旧版本</li>
<li>事务提交，释放写锁</li>
</ul>
<img data-src="/archives/baf496e5/MVCC2.png" alt="记录的版本链" style="zoom:50%;">
<p>可以看出，不同事务或者相同事务的对同一记录行的修改，会使该记录行的 <code>undo log</code> 成为一条链表，<code>undo log</code> 的链首就是最新的旧记录，链尾就是最早的旧记录。</p>
<h4 id="记录版本可见性规则"><a class="markdownIt-Anchor" href="#记录版本可见性规则"></a> 记录版本可见性规则</h4>
<p><code>ReadView</code> 保存了事务开始时系统中活跃事务的 <code>ID</code>，其中最小值时 <code>up_limit_id</code>，最大值是 <code>low_limit_id</code>。通过记录的 <code>DB_TRX_ID</code> 和 <code>up_limit_id</code>、<code>low_limit_id</code> 的比较，可以判断该版本记录对于当前事务是否可见，具体判断流程如下：</p>
<ol>
<li>
<p><code>DB_TRX_ID &lt; up_limit_id</code>：说明生成该版本记录的事务在当前事务创建 <code>ReadView</code> 前已经提交，对于当前事务可见；</p>
</li>
<li>
<p><code>DB_TRX_ID &gt; low_limit_id</code>：说明生成该版本记录的事务是在当前事务创建 <code>ReadView</code> 后才开始，对于当前事务不可见；</p>
</li>
<li>
<p><code>up_limit_id &lt; DB_TRX_ID &lt; low_limit_id</code>：此时需要判断 <code>DB_TRX_ID</code> 是否在 <code>ReadView</code> 的活跃事务 <code>ID</code> 列表中</p>
<ol>
<li><code>DB_TRX_ID</code> 不在列表内：说明生成该版本记录的事务在当前事务创建 <code>ReadView</code> 前已经提交，对于当前事务可见；</li>
<li><code>DB_TRX_ID</code> 在列表内：说明生成该版本记录的事务在当前事务创建 <code>ReadView</code> 前已经开始，但还未提交，对于当前事务不可见；</li>
</ol>
</li>
</ol>
<img data-src="/archives/baf496e5/%E8%AE%B0%E5%BD%95%E7%89%88%E6%9C%AC%E5%8F%AF%E8%A7%81%E6%80%A7%E5%88%A4%E6%96%AD.png" alt="记录版本可见性判断" style="zoom:50%;">
<h4 id="快照读与当前读"><a class="markdownIt-Anchor" href="#快照读与当前读"></a> 快照读与当前读</h4>
<p>事实上，提交读和可重复读指的都是基于 <code>ReadView</code> 的快照读，即通过记录的 <code>DB_TRX_ID</code> 判断记录的可见性。而更新数据时，需要当前读（<code>current read</code>）。</p>
<p>换句话说，当前读（<code>current read</code>）返回的是记录的当前版本；而快照读是通过判断返回数据可见的版本（利用 <code>DB_ROLL_PTR</code> 和 <code>undo log</code> ，可以找到对于当前事务可见的数据版本）。</p>
<p>前读（<code>current read</code>）需要加锁，下面这些语句都要进行当前读：</p>
<ul>
<li><code>select k from t where id=1 lock in share mode;</code></li>
<li><code>select k from t where id=1 for update;</code></li>
<li><code>update</code></li>
<li><code>insert</code></li>
<li><code>delete</code></li>
</ul>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li>
<p><a href="http://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html">InnoDB Multi-Versioning</a></p>
</li>
<li>
<p><a href="https://chenjiayang.me/2019/06/22/mysql-innodb-mvcc/">MVCC 的原理及实现</a></p>
</li>
<li>
<p><a href="https://www.leviathan.vip/2019/03/20/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-MVCC/">InnoDB 事务分析-MVCC</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>InnoDB</tag>
        <tag>MVCC</tag>
        <tag>当前读</tag>
        <tag>快照读</tag>
        <tag>undo log</tag>
        <tag>redo log</tag>
        <tag>binlog</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分库分表</title>
    <url>/archives/5ea8028d.html</url>
    <content><![CDATA[<h4 id="分表"><a class="markdownIt-Anchor" href="#分表"></a> 分表</h4>
<h5 id="水平切分"><a class="markdownIt-Anchor" href="#水平切分"></a> 水平切分</h5>
<p>水平切分又称为 <code>Sharding</code>，它是将同一个表中的记录拆分到多个结构相同的表中。</p>
<p>当一个表的数据不断增多时，<code>Sharding</code> 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p>
<span id="more"></span>
<img data-src="/archives/5ea8028d/%E6%B0%B4%E5%B9%B3%E5%88%87%E5%88%86.png" alt="水平切分" style="zoom:50%;">
<h5 id="垂直切分"><a class="markdownIt-Anchor" href="#垂直切分"></a> 垂直切分</h5>
<p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p>
<p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。</p>
<img data-src="/archives/5ea8028d/%E5%9E%82%E7%9B%B4%E5%88%87%E5%88%86.png" alt="垂直切分" style="zoom:50%;">
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li><a href="https://mp.weixin.qq.com/s/sRFmW57KUY3yyyRkyw0L4A">MySQL 深入学习总结</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>水平切分</tag>
        <tag>sharding</tag>
        <tag>垂直切分</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/archives/bce68613.html</url>
    <content><![CDATA[<h4 id="sql-分类"><a class="markdownIt-Anchor" href="#sql-分类"></a> <code>SQL</code> 分类</h4>
<h5 id="ddl"><a class="markdownIt-Anchor" href="#ddl"></a> <code>DDL</code></h5>
<p>数据定义语言（<code>Data Ddefinition Language, DDL</code>）：<code>CREATE，DROP，ALTER</code>。</p>
<p>操作表结构、视图和索引。</p>
<h5 id="dql"><a class="markdownIt-Anchor" href="#dql"></a> <code>DQL</code></h5>
<p>数据查询语言（<code>Data Query Language, DQL</code>）：<code>SELECT</code>。</p>
<p>查询数据。</p>
<span id="more"></span>
<h5 id="dml"><a class="markdownIt-Anchor" href="#dml"></a> <code>DML</code></h5>
<p>数据操纵语言（<code>Data Manipulation Language, DML</code>）：<code>INSERT，UPDATE，DELETE</code>。</p>
<p>操作数据。</p>
<h5 id="dcl"><a class="markdownIt-Anchor" href="#dcl"></a> <code>DCL</code></h5>
<p>数据控制功能（<code>Data Control Language, DCL</code>）：<code>GRANT，REVOKE，COMMIT，ROLLBACK</code>。</p>
<p>权限控制。</p>
<h4 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h4>
<h5 id="整数"><a class="markdownIt-Anchor" href="#整数"></a> 整数</h5>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>无符号数取值范围</th>
<th>有符号数取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>TINYINT</code></td>
<td>1</td>
<td>0~255</td>
<td>-128~127</td>
</tr>
<tr>
<td><code>SMALLINT</code></td>
<td>2</td>
<td>0~65535</td>
<td>-32768~32767</td>
</tr>
<tr>
<td><code>MEDIUMINT</code></td>
<td>3</td>
<td>0~16777215</td>
<td>-8388608~8388607</td>
</tr>
<tr>
<td><code>INT</code></td>
<td>4</td>
<td>0~4294967295</td>
<td>-2147483648~ 2147483647</td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td>8</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="浮点数和定点数"><a class="markdownIt-Anchor" href="#浮点数和定点数"></a> 浮点数和定点数</h5>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>无符号数取值范围</th>
<th>有符号数取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FLOAT</code></td>
<td>4</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>DOUBLE</code></td>
<td>8</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>DECIMAL(M,D)</code></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h5 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h5>
<h5 id="日期与时间"><a class="markdownIt-Anchor" href="#日期与时间"></a> 日期与时间</h5>
<table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>取值范围</th>
<th>格式</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>YEAR</code></td>
<td>1</td>
<td></td>
<td><code>YYYY</code></td>
</tr>
<tr>
<td><code>DATE</code></td>
<td>4</td>
<td></td>
<td><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td><code>TIME</code></td>
<td>3</td>
<td></td>
<td><code>HH:MM:SS</code></td>
</tr>
<tr>
<td><code>DATETIME</code></td>
<td>8</td>
<td></td>
<td><code>YYYY-MM-DD HH:MM:SS</code></td>
</tr>
<tr>
<td><code>TIMESTAMP</code></td>
<td>4</td>
<td></td>
<td><code>YYYY-MM-DD HH:MM:SS</code></td>
</tr>
</tbody>
</table>
<h5 id="文本"><a class="markdownIt-Anchor" href="#文本"></a> 文本</h5>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>TINYTEXT</code></td>
<td>0~255字节</td>
</tr>
<tr>
<td><code>TEXT</code></td>
<td>0~65535字节</td>
</tr>
<tr>
<td><code>MEDIUMTEXT</code></td>
<td>0~16777215字节</td>
</tr>
<tr>
<td><code>LONGTEXT</code></td>
<td>0~4294967295字节</td>
</tr>
</tbody>
</table>
<h5 id="二进制"><a class="markdownIt-Anchor" href="#二进制"></a> 二进制</h5>
<table>
<thead>
<tr>
<th>类型</th>
<th>存储范围</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>TINYBLOB</code></td>
<td>0~255字节</td>
</tr>
<tr>
<td><code>BLOB</code></td>
<td>0~65535字节</td>
</tr>
<tr>
<td><code>MEDIUMBLOB</code></td>
<td>0~16777215字节</td>
</tr>
<tr>
<td><code>LONGBLOB</code></td>
<td>0~4294967295字节</td>
</tr>
</tbody>
</table>
<h4 id="数据库基本操作"><a class="markdownIt-Anchor" href="#数据库基本操作"></a> 数据库基本操作</h4>
<h5 id="创建数据库"><a class="markdownIt-Anchor" href="#创建数据库"></a> 创建数据库</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database db_name;</span><br></pre></td></tr></table></figure>
<h5 id="删除数据库"><a class="markdownIt-Anchor" href="#删除数据库"></a> 删除数据库</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database db_name;</span><br></pre></td></tr></table></figure>
<h5 id="使用数据库"><a class="markdownIt-Anchor" href="#使用数据库"></a> 使用数据库</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use db_name;</span><br><span class="line"></span><br><span class="line">-- 查看当前使用的是哪个数据库</span><br><span class="line">select database();</span><br></pre></td></tr></table></figure>
<h4 id="表基本操作"><a class="markdownIt-Anchor" href="#表基本操作"></a> 表基本操作</h4>
<h5 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;table_name&#96; (</span><br><span class="line">  # int 类型，不为空，自增</span><br><span class="line">  &#96;id&#96; INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  # int 类型，不可为空，默认值为 1，不为空</span><br><span class="line">  &#96;col1&#96; INT NOT NULL DEFAULT 1,</span><br><span class="line">  # 变长字符串类型，最长为 45 个字符，可以为空</span><br><span class="line">  &#96;col2&#96; VARCHAR(45) NULL,</span><br><span class="line">  # 日期类型，可为空</span><br><span class="line">  &#96;col3&#96; DATE NULL,</span><br><span class="line">  # 设置主键为 id</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h5 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table table_name;</span><br></pre></td></tr></table></figure>
<h5 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h5>
<p>可以修改表名、字段、字段数据类型、索引等。</p>
<h6 id="修改表名"><a class="markdownIt-Anchor" href="#修改表名"></a> 修改表名</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table old_table_name rename new_table_name;</span><br></pre></td></tr></table></figure>
<h6 id="修改字段"><a class="markdownIt-Anchor" href="#修改字段"></a> 修改字段</h6>
<p>修改字段数据类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table table_name modify column column_name 数据类型;</span><br></pre></td></tr></table></figure>
<p>修改字段名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table table_name change column old_column_name new_column_name;</span><br></pre></td></tr></table></figure>
<h6 id="添加字段"><a class="markdownIt-Anchor" href="#添加字段"></a> 添加字段</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table table_name add column_name 数据类型;</span><br></pre></td></tr></table></figure>
<h6 id="删除字段"><a class="markdownIt-Anchor" href="#删除字段"></a> 删除字段</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table table_name drop column column_name;</span><br></pre></td></tr></table></figure>
<h5 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h5>
<h6 id="添加索引"><a class="markdownIt-Anchor" href="#添加索引"></a> 添加索引</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 添加主键索引</span><br><span class="line">alter table table_name add primary key(&#96;col&#96;);</span><br><span class="line"></span><br><span class="line">-- 添加唯一索引</span><br><span class="line">alter table table_name add unique(&#96;col&#96;);</span><br><span class="line">create unique index index_name on table_name(&#96;col&#96;);</span><br><span class="line"></span><br><span class="line">-- 添加普通索引</span><br><span class="line">alter table table_name add index index_name(&#96;col&#96;);</span><br><span class="line">create index index_name on table_name(&#96;col&#96;);</span><br></pre></td></tr></table></figure>
<h6 id="删除索引"><a class="markdownIt-Anchor" href="#删除索引"></a> 删除索引</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 删除主键索引</span><br><span class="line">alter table table_name drop primary key ;</span><br><span class="line"></span><br><span class="line">-- 删除普通索引</span><br><span class="line">alter table table_name drop index index_name ;</span><br><span class="line">drop index index_name on table_name ;</span><br></pre></td></tr></table></figure>
<h4 id="表约束"><a class="markdownIt-Anchor" href="#表约束"></a> 表约束</h4>
<ul>
<li>主键约束</li>
<li>唯一性约束</li>
<li>外键约束</li>
</ul>
<p>创建外键方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 在建表时语法如下：</span><br><span class="line">constraint 外键名 foreign key (从表外键字段) references 主表 (主键字段)</span><br><span class="line"></span><br><span class="line">-- 建表后添加外键语法如下：</span><br><span class="line">alter table 从表名 add constraint 外键名 foreign key (从表外键字段) references 主表 (主键字段);</span><br></pre></td></tr></table></figure>
<ul>
<li>非空约束</li>
<li>默认值约束</li>
</ul>
<h4 id="表数据基本操作"><a class="markdownIt-Anchor" href="#表数据基本操作"></a> 表数据基本操作</h4>
<h5 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into table_name(col1, col2) values(val1, val2);</span><br></pre></td></tr></table></figure>
<h5 id="删除-2"><a class="markdownIt-Anchor" href="#删除-2"></a> 删除</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from table_name where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># 删除所有行</span><br><span class="line">delete from table_name;</span><br><span class="line"></span><br><span class="line"># 清空表</span><br><span class="line">truncate table table_name;</span><br></pre></td></tr></table></figure>
<p><code>delete</code> 和 <code>truncate</code> 的区别:</p>
<ul>
<li><code>delete</code> 可以删除指定行数据；<code>truncate</code> 清空整张表。</li>
<li><code>delete</code> 删除表中所有数据后，再次插入数据时自增字段的值是删除数据前该字段最大值加 1；<code>truncate</code> 清空表后，再次插入数据时自增字段的值重新从 1 开始。</li>
</ul>
<h5 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update table_name set col &#x3D; val where id &#x3D; 1;</span><br></pre></td></tr></table></figure>
<h5 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h5>
<h6 id="distinct"><a class="markdownIt-Anchor" href="#distinct"></a> <code>distinct</code></h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 同时作用于 col1 和 col2</span><br><span class="line">select distinct col1, col2</span><br><span class="line">from table_name;</span><br></pre></td></tr></table></figure>
<h6 id="limit"><a class="markdownIt-Anchor" href="#limit"></a> <code>limit</code></h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 返回前 5 行</span><br><span class="line">select * from table_name limit 5;</span><br><span class="line"></span><br><span class="line"># 返回前 5 行</span><br><span class="line">select * from table_name limit 0, 5;</span><br></pre></td></tr></table></figure>
<h4 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数"></a> 聚合函数</h4>
<p>所谓聚合，就是将多行汇总成一行；所有的聚合函数均如此——输入多行，输出一行。</p>
<p>聚合函数具有自动滤空的功能，若某一个值为 <code>null</code>，那么会自动过滤该行。</p>
<mark class="label primary"> 只有 select 子句和 having 子句、order by 子句中能够使用聚合函数。</mark>
<h5 id="count"><a class="markdownIt-Anchor" href="#count"></a> <code>count()</code></h5>
<p>统计行数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from table_name;</span><br></pre></td></tr></table></figure>
<h5 id="max"><a class="markdownIt-Anchor" href="#max"></a> <code>max()</code></h5>
<p>返回指定列的最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select max(col) from table_name;</span><br></pre></td></tr></table></figure>
<h6 id="min"><a class="markdownIt-Anchor" href="#min"></a> <code>min()</code></h6>
<p>返回指定列的最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select min(col) from table_name;</span><br></pre></td></tr></table></figure>
<h6 id="sum"><a class="markdownIt-Anchor" href="#sum"></a> <code>sum()</code></h6>
<p>计算指定列的数值和，如果指定列类型不是数值类型则计算结果为 0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sum(col) from table_name;</span><br></pre></td></tr></table></figure>
<h6 id="avg"><a class="markdownIt-Anchor" href="#avg"></a> <code>avg()</code></h6>
<p>计算指定列的平均值，如果指定列类型不是数值类型则计算结果为 0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select avg(col) from table_name;</span><br></pre></td></tr></table></figure>
<h4 id="条件查询"><a class="markdownIt-Anchor" href="#条件查询"></a> 条件查询</h4>
<h5 id="where"><a class="markdownIt-Anchor" href="#where"></a> <code>where</code></h5>
<p>使用 <code>where</code> 子句过滤数据。</p>
<p><code>where</code> 子句中常用关系运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code>、<code>&gt;</code>、<code>&lt;</code></td>
<td style="text-align:center">等于、大于、小于</td>
</tr>
<tr>
<td><code>!=</code>、<code>&lt;&gt;</code></td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td><code>&gt;=</code>、<code>!&lt;</code></td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td><code>&lt;=</code>、<code>!&gt;</code></td>
<td style="text-align:center">小于等于</td>
</tr>
</tbody>
</table>
<p><code>where</code> 子句中常用关键字：</p>
<ul>
<li><code>in</code>：判断某个字段的值是否在指定集合中</li>
<li><code>between and</code>：判断某个字段的值是否在指定范围中</li>
<li><code>like</code>：模糊查询</li>
</ul>
<div class="note "><ul>
<li>
<p><code>%</code>：匹配 0 个或多个任意字符</p>
</li>
<li>
<p><code>_</code> ：匹配 1 个任意字符</p>
</li>
<li>
<p><code>[]</code>：匹配集合内的字符，如 <code>[ab]</code> 表示可以匹配 <code>a</code> 或 <code>b</code>。</p>
<p>​       如果加上 <code>^</code> 表示否定，不匹配集合内任何字符，如 <code>[^ab]</code> 表示字符不能时 <code>a</code> 和 <code>b</code>。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找 name 不以 a 和 b 开头的记录</span><br><span class="line">select * </span><br><span class="line">from table_name</span><br><span class="line">where name like &#39;[^ab]%&#39;</span><br></pre></td></tr></table></figure>
</div>
<h5 id="group-by"><a class="markdownIt-Anchor" href="#group-by"></a> <code>group by</code></h5>
<p>分组规定：</p>
<ul>
<li><code>group by</code> 子句出现在 <code>where</code> 子句之后，<code>order by</code> 子句之前；</li>
<li>除了汇总字段外，<code>select</code> 语句中的每一字段都必须在 <code>group by</code> 子句中给出；</li>
<li><code>null</code> 的行会单独分为一组；</li>
<li>大多数 <code>SQL</code> 实现不支持 <code>group by</code> 列具有可变长度的数据类型。</li>
</ul>
<p><code>group by</code> 经常和 <code>having</code> 一起使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询部门工资总和大于 8000 的部门</span><br><span class="line">select sum(salary),dept_no </span><br><span class="line">from employee </span><br><span class="line">group by dept_no </span><br><span class="line">having sum(salary)&gt;8000;</span><br></pre></td></tr></table></figure>
<h5 id="order-by"><a class="markdownIt-Anchor" href="#order-by"></a> <code>order by</code></h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table_name</span><br><span class="line">order by col1 [asc | desc], col2 [asc | desc];</span><br></pre></td></tr></table></figure>
<h4 id="表的关联关系"><a class="markdownIt-Anchor" href="#表的关联关系"></a> 表的关联关系</h4>
<h5 id="多对一"><a class="markdownIt-Anchor" href="#多对一"></a> 多对一</h5>
<p>如：员工与部门之间的关系，一个部门可以有多个员工；而一个员工只属于某一个部门。</p>
<p>在多对一的表关系中，应将外键建在多的一方，否则会造成数据的冗余。</p>
<h5 id="多对多"><a class="markdownIt-Anchor" href="#多对多"></a> 多对多</h5>
<p>如：学生与老师之间的关系，一个学生可以有多个老师，一个老师也可以有多个学生。</p>
<p>通常情况下，为了实现这种关系需要定义一张中间表（亦称为连接表），该表会存在两个外键分别参照老师表和学生表。</p>
<h5 id="一对一"><a class="markdownIt-Anchor" href="#一对一"></a> 一对一</h5>
<p>一对一的关联关系在数据库中并不常见，因为以这种方式存储的信息通常会放在同一张表中。</p>
<h4 id="多表连接查询"><a class="markdownIt-Anchor" href="#多表连接查询"></a> 多表连接查询</h4>
<h5 id="交叉连接"><a class="markdownIt-Anchor" href="#交叉连接"></a> 交叉连接</h5>
<p>交叉连接返回的结果是被连接的两个表中所有数据行的笛卡儿积。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table1 cross join table2;</span><br></pre></td></tr></table></figure>
<h5 id="内连接"><a class="markdownIt-Anchor" href="#内连接"></a> 内连接</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select A.col1, B.vcol1</span><br><span class="line">from tableA as A inner join tableB as B</span><br><span class="line">on A.col &#x3D; B.col;</span><br><span class="line"></span><br><span class="line"># 等价</span><br><span class="line">select A.col1, B.vcol1</span><br><span class="line">from tableA as A, tableB as B</span><br><span class="line">where A.col &#x3D; B.col;</span><br></pre></td></tr></table></figure>
<h5 id="外连接"><a class="markdownIt-Anchor" href="#外连接"></a> 外连接</h5>
<p>在使用内连接查询时我们发现：返回的结果只包含符合查询条件和连接条件的数据。但是，有时还需要在返回查询结果中包含左表、右表或两个表中的所有数据，此时就需要使用外连接查询。</p>
<p>外连接分为左(外)连接、右(外)连接和全外连接。</p>
<h6 id="左外连接"><a class="markdownIt-Anchor" href="#左外连接"></a> 左外连接</h6>
<p>左(外)连接：返回包括左表中的所有记录和右表中符合连接条件的记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table1 left join table2 on table1.col&#x3D;table2.col</span><br></pre></td></tr></table></figure>
<h6 id="右外连接"><a class="markdownIt-Anchor" href="#右外连接"></a> 右外连接</h6>
<p>右(外)连接：返回包括右表中的所有记录和左表中符合连接条件的记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table1 right join table2 on table1.col&#x3D;table2.col</span><br></pre></td></tr></table></figure>
<h6 id="全外连接"><a class="markdownIt-Anchor" href="#全外连接"></a> 全外连接</h6>
<p><code>MySQL</code> 不支持。</p>
<h5 id="自然连接"><a class="markdownIt-Anchor" href="#自然连接"></a> 自然连接</h5>
<p><strong>自然连接是一种特殊的等值连接</strong>，要求进行连接的两个关系表中必须有相同的属性列（名字相同），无须添加连接条件，<strong>并且在结果中消除重复的属性列。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table1 natural join table2;</span><br></pre></td></tr></table></figure>
<h4 id="查询语句的执行顺序"><a class="markdownIt-Anchor" href="#查询语句的执行顺序"></a> 查询语句的执行顺序</h4>
<ol>
<li><code>from</code> 子句：将表文件加载到内存中</li>
<li><code>where</code> 子句：根据条件进行过滤，为符合条件的行生成一张临时表</li>
<li><code>group by</code> 子句：根据字段将临时表进行拆分，为每个字段值再生成一张临时表；此时生成的临时表包含字段 <code>name</code> 和 <code>num</code></li>
<li><code>having</code> 子句：对第 3 步生成的临时表进行过滤，去掉不符合条件的行</li>
<li><code>order by</code> 子句：第 4 步生成的临时表进行排序</li>
<li><code>limit</code> 子句：返回限定行数</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>MySQL数据类型</tag>
        <tag>连接查询</tag>
        <tag>查询语句的执行顺序</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引</title>
    <url>/archives/43a71ae4.html</url>
    <content><![CDATA[<p><code>MySQL</code> 官方对索引的定义为：索引（<code>Index</code>）是帮助 <code>MySQL</code> 高效获取数据的数据结构。</p>
<p>在 <code>MySQL</code> 中，<mark class="label primary">索引是在存储引擎层实现的</mark>，因此不同的存储引擎可能有不一样的索引实现。</p>
<p>实现索引可以有多种方式，常用的有<strong>哈希表</strong>、<strong>B+树</strong>。</p>
<ul>
<li>
<p>哈希表</p>
<p>哈希表是一种存储键值对的数据结构，根据 <code>key</code> 可以在 <code>O(1)</code> 时间内找到对应的 <code>value</code>。</p>
<p>哈希表在<mark class="label primary">等值（单个）查询</mark>时表现很好，但是因为哈希表不是有序的，因此在做<mark class="label primary">区间查询</mark>时性能就很差。</p>
</li>
<li>
<p><a href="/archives/f3d84fed.html">B+树</a></p>
<p>B+树的的所有叶节点是排序的，天然支持范围。</p>
</li>
</ul>
<span id="more"></span>
<p>哈希表索引和B+树索引的比较：</p>
<ul>
<li>哈希索引不支持索引排序；</li>
<li>哈希索引不支持模糊查询；</li>
<li>哈希索引虽然在等值查询上较快，但是性能不稳定（考虑到哈希碰撞）；而B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子节点，且树的高度较低。</li>
</ul>
<h4 id="索引原理"><a class="markdownIt-Anchor" href="#索引原理"></a> 索引原理</h4>
<h5 id="磁盘-io-与预读"><a class="markdownIt-Anchor" href="#磁盘-io-与预读"></a> 磁盘 <code>IO</code> 与预读</h5>
<h5 id="索引的数据结构b树"><a class="markdownIt-Anchor" href="#索引的数据结构b树"></a> 索引的数据结构：B+树</h5>
<h4 id="索引类型"><a class="markdownIt-Anchor" href="#索引类型"></a> 索引类型</h4>
<h5 id="主键索引"><a class="markdownIt-Anchor" href="#主键索引"></a> 主键索引</h5>
<p>主键包含的列不允许重复，不允许为 <code>NULL</code>，一个表只能有一个主键。</p>
<p>可以通过 <code>alter table table_name add primary key (column);</code> 创建主键索引。</p>
<h5 id="唯一索引"><a class="markdownIt-Anchor" href="#唯一索引"></a> 唯一索引</h5>
<p>数据列不允许重复，允许为 <code>NULL</code> 值，一个表允许多个列创建唯一索引。</p>
<p>可以通过 <code>alter table table_name add unique (column);</code> 创建唯一索引，唯一索引可以包含多列。</p>
<h5 id="普通索引"><a class="markdownIt-Anchor" href="#普通索引"></a> 普通索引</h5>
<p>基本的索引类型，没有唯一性的限制，允许为 <code>NULL</code> 值。</p>
<p>可以通过 <code>alter table table_name add index index_name (column);</code> 创建唯一索引，唯一索引可以包含多列。</p>
<h5 id="全文索引"><a class="markdownIt-Anchor" href="#全文索引"></a> 全文索引</h5>
<p>目前搜索引擎使用的一种关键技术。</p>
<p>可以通过 <code>alter table table_name add fulltext (column);</code> 创建全文索引。</p>
<h4 id="建立索引的原则"><a class="markdownIt-Anchor" href="#建立索引的原则"></a> 建立索引的原则</h4>
<ul>
<li>
<p>为频繁查询的字段建立索引</p>
</li>
<li>
<p>为外键字段建立索引</p>
</li>
<li>
<p>最左前缀匹配原则，<code>mysql</code> 会一直向右匹配直到遇到范围查询 <code>(&gt;、&lt;、between、like)</code> 就停止匹配。比如 <code>a = 1 and b = 2 and c &gt; 3 and d = 4</code> 如果建立 <code>(a,b,c,d)</code> 顺序的索引，<code>d</code> 是用不到索引的，如果建立 <code>(a,b,d,c)</code> 的索引则都可以用到，<code>a,b,d</code> 的顺序可以任意调整。</p>
</li>
<li>
<p><code>=</code> 和 <code>in</code> 可以乱序，比如 <code>a = 1 and b = 2 and c = 3</code> 建立 <code>(a,b,c)</code> 索引可以任意顺序，<code>mysql</code> 的查询优化器会帮你优化成索引可以识别的形式。</p>
</li>
<li>
<p>选择区分度高的列作为索引，区分度的公式是 <code>count(distinct col)/count(*)</code>，表示字段不重复的比例，比例越大我们扫描的记录数越少。</p>
</li>
<li>
<p>索引列不能参与计算，比如 <code>from_unixtime(create_time) = ’2014-05-29’</code> 就不能使用到索引。</p>
<p>原因很简单，B+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成 <code>create_time = unix_timestamp(’2014-05-29’)</code>。</p>
</li>
<li>
<p>尽量扩展索引，不要新建索引。比如表中已经有 <code>a</code> 的索引，现在要加 <code>(a,b)</code> 的索引，那么只需要修改原来的索引即可。</p>
</li>
<li>
<p>更新频繁的字段不要建立索引。</p>
</li>
<li>
<p>数据类型为 <code>text、image</code> 和 <code>bit</code> 的字段不要建立索引。</p>
</li>
</ul>
<h4 id="索引失效"><a class="markdownIt-Anchor" href="#索引失效"></a> 索引失效</h4>
<ul>
<li>在索引列上有计算、函数、类型转换，会使索引失效进而扫描全表</li>
<li>组合索引中对某列进行范围查找，会使该列右边的列不能使用</li>
<li>使用不等于（<code>!= or &lt;&gt;</code>）会使索引失效</li>
<li>组合索引中对某列进行模糊匹配，会使该列右边的列不能使用</li>
</ul>
<h4 id="覆盖索引"><a class="markdownIt-Anchor" href="#覆盖索引"></a> 覆盖索引</h4>
<p>假如有这样一条查询语句：<code>select * from T where k between 3 and 5;</code> 并且为 <code>k</code> 建立了索引。</p>
<p>因为要查全字段，所以在 <code>k</code> 索引树上查完，得到主键值后，要根据主键值回到主键索引树上去查全字段数据，这个过程称为回表。</p>
<p>而如果查询语句是：<code>select ID from T where k between 3 and 5;</code> <code>ID</code> 是主键。</p>
<p>此时 <code>k</code> 索引树可以直接提供查询结果，就不需要回表了。在这个查询中，索引 <code>k</code> 已经覆盖了查询请求，称为覆盖索引。</p>
<p>虽然维护索引需要额外开销，但是基于覆盖索引的特性，有时我们需要为查询频率较高的字段建立联合索引，以期让这个联合索引覆盖查询请求，减少回表的次数，提高查询效率。</p>
<h4 id="最左前缀原则"><a class="markdownIt-Anchor" href="#最左前缀原则"></a> 最左前缀原则</h4>
<p><code>mysql</code> 会一直向右匹配直到遇到范围查询（<code>&gt;、&lt;、between、like</code> 等）就停止匹配。</p>
<p>比如 <code>a = 1 and b = 2 and c &gt; 3 and d = 4</code>， 如果建立的索引是 <code>(a,b,c,d)</code>，<code>d</code> 是用不到索引的；如果建立的索引是 <code>(a,b,d,c)</code>， 则都可以用到。</p>
<hr>
<p>版权声明：本文为CSDN博主「ThinkWon」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：<a href="https://blog.csdn.net/ThinkWon/article/details/104778621">https://blog.csdn.net/ThinkWon/article/details/104778621</a></p>
<mark class="label primary">最左前缀可以是组合索引的前 `N` 个字段，也可以是字符串索引的前 `N` 个字符</mark>。
<p><strong>组合索引如何安排字段顺序</strong></p>
<ul>
<li>
<p><strong>复用能力</strong> - 因为有最左前缀原则，有了组合索引（<code>a, b</code>），就不用为 <code>a</code> 单独建立索引了。也就说，应该优先考虑可以减少一个索引的字段顺序。</p>
</li>
<li>
<p><strong>空间</strong> - 如果既有联合查询，又有基于 <code>a</code> 和 <code>b</code> 各自的查询，基于 <code>b</code> 的查询是无法使用联合索引 （<code>a, b</code>）的，不得不为 <code>b</code> 另建一个索引。这时就需要考虑空间因素，如果字段 <code>a</code> 比 <code>b</code> 大，就应该考虑建立索引</p>
<p>（<code>a, b</code>）和 <code>b</code>，否则，就建立索引（<code>b, a</code>）和 <code>a</code>。</p>
</li>
</ul>
<h4 id="索引下推"><a class="markdownIt-Anchor" href="#索引下推"></a> 索引下推</h4>
<p>有一张 <code>user</code> 表，建表语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table user (</span><br><span class="line">ID int primary key,</span><br><span class="line">name char(20) not null,</span><br><span class="line">age int not null,</span><br><span class="line">ismale char(1) not null default 1,</span><br><span class="line">index k(name, age)</span><br><span class="line">) engine&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
<p>除了主键索引，还有一个组合索引（<code>name, age</code>）。</p>
<p>现有查询语句：<code>select * from user where name like ‘张%’ and age=10 and ismale=1;</code></p>
<p>在 <code>MySQL 5.6</code> 之前，根据最左前缀原则，在找到以“张”开头的数据后，需要逐个回表，到主键索引树上找到对应的数据行，再比较后面字段值。</p>
<p>而 <code>MySQL 5.6</code> 开始，引入了<strong>索引下推</strong>，找到以“张”开头的数据后，并不是直接回表，而是会再根据组合索引中包含的字段再判断，过滤掉不符合条件的记录，减少回表次数。</p>
<h4 id="重建索引"><a class="markdownIt-Anchor" href="#重建索引"></a> 重建索引</h4>
<p>索引可能因为删除，或者页分裂等原因，导致数据页有空洞，重建索引的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。</p>
<ul>
<li>重建普通索引</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table T drop index k;</span><br><span class="line">alter table T add index(k);</span><br></pre></td></tr></table></figure>
<ul>
<li>重建主键索引</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table T engine&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
<h4 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h4>
<p>有这样一个建表语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;t&#96; (</span><br><span class="line">  &#96;a&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;b&#96; int(11) NOT NULL,</span><br><span class="line">  &#96;c&#96; int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;a&#96;,&#96;b&#96;),</span><br><span class="line">  KEY &#96;c&#96; (&#96;c&#96;),</span><br><span class="line">  KEY &#96;ca&#96; (&#96;c&#96;,&#96;a&#96;),</span><br><span class="line">  KEY &#96;cb&#96; (&#96;c&#96;,&#96;b&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
<p>请问 <code>ca</code> 和 <code>cb</code> 这两个索引是否有必要。</p>
<div class="note "><p>主键（聚簇）索引先根据 <code>a</code> 排序，再根据 <code>b</code> 排序，<code>c</code> 无序；</p>
<p>普通索引 <code>c</code> 根据 <code>c</code> 排序，叶子节点记录主键 (<code>a</code>, <code>b</code>)；</p>
<p>组合索引 <code>ca</code> 先根据 <code>c</code> 排序，再根据 <code>a</code> 排序，叶子节点记录 <code>b</code>，事实上这跟索引 <code>c</code> 完全一样；</p>
<p>组合索引 <code>cb</code> 先根据 <code>c</code> 排序，再根据 <code>b</code> 排序，叶子节点记录 <code>a</code>，和索引 <code>c</code> 不一样；</p>
<p>所以所以 <code>ca</code> 可以删除，<code>cb</code> 需要保留。</p>
<p>而如果主键索引是 (<code>b</code>, <code>a</code>)，那需要保留的就是 <code>ca</code>。</p>
</div>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></li>
<li><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">MySQL索引原理及慢查询优化</a></li>
<li><a href="https://mp.weixin.qq.com/s/3tlhF7t97mQmhIRrZq21ww">MySQL索引原理</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>B+树</tag>
        <tag>MySQL</tag>
        <tag>索引</tag>
        <tag>最左前缀原则</tag>
        <tag>覆盖索引</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL锁</title>
    <url>/archives/d940f18d.html</url>
    <content><![CDATA[<p>锁的设计是为了处理并发问题。根据锁的范围（粒度），<code>MySQL</code> 中的锁可以分为三类：</p>
<ul>
<li>全局锁</li>
<li>表锁</li>
<li>行锁</li>
</ul>
<span id="more"></span>
<h4 id="全局锁"><a class="markdownIt-Anchor" href="#全局锁"></a> 全局锁</h4>
<p>全局锁锁的是整个数据库，<code>MySQL</code> 中加全局读锁的命令是：<code>Flush tables with read lock (FTWRL)</code>。</p>
<p>之后对数据库中表的结构的更改或对表数据的更改都会被阻塞。</p>
<p>全局加锁常用于数据库的逻辑备份。</p>
<p>当库中所有的表用的存储引擎都是 <code>InnoDB</code>，做全库备份也可以用 <code>mysql -single-transaction</code>。</p>
<p>该命令可以保证导数据前先拿到库的一致性视图，并且由于 <code>MVCC</code>，导数据的过程中还可以正常更新数据。</p>
<h4 id="表锁"><a class="markdownIt-Anchor" href="#表锁"></a> 表锁</h4>
<p><code>MySQL</code> 中有两种表级锁：</p>
<ul>
<li>表锁</li>
<li>元数据锁（<code>metadata lock</code>，<code>MDL</code>）</li>
</ul>
<h5 id="表锁-2"><a class="markdownIt-Anchor" href="#表锁-2"></a> 表锁</h5>
<p>表级锁加锁块、开销小；但粒度较大，发生锁冲突的概率高，并发度低。</p>
<p>使用语法：<code>lock tables read/write</code>。</p>
<p>如果一个事务开启前执行 <code>lock tables A read, B write</code>：</p>
<ul>
<li>其他事务可以读 <code>A</code>，不能写 <code>A</code>，不能读写 <code>B</code></li>
<li>当前事务可以读 <code>A</code>，不能写 <code>A</code>，可以读写 <code>B</code></li>
</ul>
<h5 id="元数据锁"><a class="markdownIt-Anchor" href="#元数据锁"></a> 元数据锁</h5>
<p><code>MySQL 5.5</code>引入了 <code>MDL</code>。</p>
<p><code>MDL</code> 不需要显示使用，在访问一张表时会自动加上，并在事务提交时自动释放。</p>
<ul>
<li>对表数据做增删改查时，加 <code>MDL</code> 读锁</li>
<li>对表结构做变更时，加 <code>MDL</code> 写锁</li>
</ul>
<p><code>MDL</code> 读锁之间不互斥；读锁与写锁，写锁与写锁之间是互斥的。</p>
<p>如果操作不当，给一个表加一个字可能会导致整个库挂掉。</p>
<p>考虑这样一种情况：表 <code>T</code> 是一张热点表，对这个表的查询很频繁。如果在一个线程 <code>A</code> 查询表 <code>T</code> 时，有一个线程 <code>B</code> 想往 <code>T</code> 中加一个字段，此时线程 <code>B</code> 会被阻塞。单单 <code>B</code> 被阻塞也没什么，但是因为 <code>T</code> 是热点表，后面可能持续会有新的线程来查询 <code>T</code>，后续的线程会被 <code>B</code> 阻塞，很快线程会爆满。</p>
<p>那如何安全地修改表结构呢，比较推荐的是在 <code>alter table</code> 语句中设定等待时间，在这个时间内，拿到 <code>MDL</code> 写锁就可以修改表结构，拿不到就先结束，不要阻塞后面的业务语句。</p>
<p>具体的使用是：<code>alter table table_name wait_time add col col_name ...;</code></p>
<h4 id="行锁"><a class="markdownIt-Anchor" href="#行锁"></a> 行锁</h4>
<p>行级锁加锁慢、开销大；但粒度较小，发生锁冲突的概率低，并发度高。</p>
<p><code>MySQL</code> 中的行锁是由存储引擎实现的，有些引擎不支持行锁，如 <code>MyISAM</code>。</p>
<h5 id="两阶段锁"><a class="markdownIt-Anchor" href="#两阶段锁"></a> <strong>两阶段锁</strong></h5>
<p>在 <code>MySQL</code> 中，使用 <code>InnoDB</code> 的表在更新某行记录时会持有该行的锁，但并不是更新完后就释放行锁，而是要等待事务提交后才释放行锁。</p>
<p><strong>因此，如果一个事务执行期间会锁住多行，要把最可能造成冲突、影响并发度的行放在事务的最后执行。</strong></p>
<h5 id="死锁"><a class="markdownIt-Anchor" href="#死锁"></a> <strong>死锁</strong></h5>
<p>两阶段锁可能会导致死锁。考虑这样一种情况：</p>
<p>事务 <code>A</code> 要执行如下更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin;</span><br><span class="line">update t set k &#x3D; k + 1 where id &#x3D; 1;</span><br><span class="line">update t set k &#x3D; k + 1 where id &#x3D; 2;</span><br></pre></td></tr></table></figure>
<p>事务 <code>B</code> 要执行如下更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">begin;</span><br><span class="line">update t set k &#x3D; k + 1 where id &#x3D; 1;</span><br><span class="line">update t set k &#x3D; k + 1 where id &#x3D; 2;</span><br></pre></td></tr></table></figure>
<p>在 <code>A</code> 持有 <code>id = 1</code> 的行锁并更新时，<code>B</code> 持有 <code>id = 2</code> 的行锁并更新。 <code>A</code> 和 <code>B</code> 一直等待对方持有的行锁， 但 <code>InnoDB</code> 的行锁要等事务结束后才释放，因此 <code>A</code> 和 <code>B</code> 就永远得不到对方持有的行锁，进入死锁状态。</p>
<p>为了应对出现死锁，有两种策略：</p>
<ul>
<li>用 <code>innodb_lock_wait_timeout</code> 来设置超时时间 - 不过这个时间不好把握</li>
<li><strong>死锁检测</strong> - 将 <code>innodb_deadlock_detect</code> 设置为 <code>on</code>。</li>
</ul>
<div class="note "><p>发现死锁后，回滚其中一个事务，让其他事务得以先执行。</p>
<p>死锁检测可以让事务得以继续执行，但是有时候死锁的代价也是很大的。</p>
<p>因为死锁是由于多个线程间资源循环依赖，线程和资源形成了一个环，每个线程都在等待下一个线程的资源。在形成这个环之前（死锁发生），每个线程加入都要检查是否会形成死锁，但是直接最后一个线程加入才能检测到发生死锁，如果这个环很大，死锁检测就回占用大量的 <code>CPU</code> 时间，造成 <code>CPU</code> 利用率很高，但是每秒却执行不了几个事务。</p>
<p>解决思路：</p>
<ul>
<li>控制并发度 - 如果环不大，死锁检测就不用花那么多时间</li>
<li>将一行改为逻辑上的多行</li>
</ul>
</div>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li><a href="https://tonydong.blog.csdn.net/article/details/103324323">MySQL 的各种锁 </a></li>
<li><a href="https://zhuanlan.zhihu.com/p/29150809">MySQL 锁总结</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL锁</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL更新语句的执行流程</title>
    <url>/archives/cf5bf327.html</url>
    <content><![CDATA[<p>与查询一样，执行更新要经过的步骤：</p>
<ul>
<li>连接数据库 - 获取权限</li>
<li>分析 <code>SQL</code> 语句 - 分析 <code>SQL</code> 语句是否正确，以及 <code>SQL</code> 语句要执行什么操作</li>
<li>优化 - 是否有索引可用，以及使用哪个索引</li>
<li>执行更新</li>
</ul>
<p>与查询不一样的是，更新涉及两个重要的日志模块：</p>
<ul>
<li><code>redo log</code> - <code>InnoDB</code> 特有</li>
<li><code>binlog</code> - <code>MySQL Server</code></li>
</ul>
<span id="more"></span>
<h4 id="redo-log-和-binlog"><a class="markdownIt-Anchor" href="#redo-log-和-binlog"></a> <code>redo log</code> 和 <code>binlog</code></h4>
<p>在磁盘中查找数据并更新的开销是很可观的，如果每一次更新都需要写进磁盘，那成本就太大了。</p>
<p><code>MySQL</code> 的做法是：使用 **<code>WAL</code>（<code>Write-Ahead Logging</code>）**技术，先写更新日志，等不忙的时候再更新磁盘中对应的内容。</p>
<p>具体来说，就是将更新写入 <code>redo log</code>，刷新内存，更新就算完成了，<code>InnoDB</code> 会在适当的时候将更新同步到磁盘。</p>
<p>但是 <code>InnoDB</code> 中的 <code>redo log</code> 大小是固定的。如果 <code>redo log</code> 空间用完了，此时再有更新，就需要先将 <code>redo log</code> 中的更新记录同步到磁盘，再写此次的更新。</p>
<p><strong><code>redo log</code> 和 <code>binlog</code> 的区别</strong></p>
<ul>
<li>
<p><code>redo log</code> 是 <code>InnoDB</code> 特有的；</p>
<p><code>binlog</code> 是 <code>MySQL Server</code> 层实现的，所有存储引擎都可以用。</p>
</li>
<li>
<p><code>redo log</code> 是物理日志，记录物理页做了什么改动；</p>
<p><code>binlog</code> 是逻辑日志，有三种模式：</p>
<ul>
<li>
<p><code>statement</code> 模式 - 记录 <code>sql</code> 语句。</p>
<p>不需要记录每一行的变化，减少了 <code>binlog</code> 日志内容，减少了<code>IO</code>，提高了性能。由于 <code>sql</code> 的执行是有上下文的，因此在保存的时候需要保存相关的信息，同时还有一些使用了函数之类的语句无法被记录复制。</p>
</li>
<li>
<p><code>row</code> 模式 - 记录更新前和更新后的行数据。</p>
<p>需要记录每一行的变化，会产生大量的日志内容。</p>
</li>
<li>
<p><code>mixed</code> 模式 - 前两种模式的结合。</p>
<p>遇到表结构变更的时候就会以 <code>statement</code> 模式来记录；</p>
<p><code>update</code> 或者 <code>delete</code> 等修改数据的语句以 <code>row</code> 模式来记录。</p>
</li>
</ul>
</li>
<li>
<p><code>redo log</code> 可以循环写，但空间大小固定，满了之后需要写回磁盘；</p>
<p><code>binlog</code> 是追加写的，写满一个文件后会新建一个文件接着写，不会覆盖之前的日志。</p>
</li>
</ul>
<p><code>innodb_flush_log_at_trx_commit</code>：这个参数置为 1 时表示每次事务的 <code>redo log</code> 都直接持久化到磁盘。</p>
<p><code>sync_binlog</code>：这个参数置为 1 时表示每次事务的 <code>binlog</code> 都持久化到磁盘。</p>
<h4 id="更新语句的执行流程"><a class="markdownIt-Anchor" href="#更新语句的执行流程"></a> 更新语句的执行流程</h4>
<p>有了对 <code>redo log</code> 和 <code>binlog</code> 的初步认识，现在来看看更新语句的执行流程。</p>
<p>假设有一张表的建表语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table T (</span><br><span class="line">ID int primary key,</span><br><span class="line">c int</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>更新语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update T set c&#x3D;c+1 where ID&#x3D;2;</span><br></pre></td></tr></table></figure>
<p>执行流程如下：</p>
<ol>
<li>执行器调用 <code>InnoDB</code> 接口取 <code>ID=2</code> 这行数据。如果这行数据所在的页已经在内存中，直接返回给执行器；否则，从磁盘中读入内存再返回。</li>
<li>执行器执行加 1 操作。</li>
<li>执行器调用 <code>InnoDB</code> 接口更新内存中的数据，同时将更新操作写入 <code>redo log</code>，此时 <code>redo log</code> 处于 <code>prepare</code> 状态，随时可提交。</li>
<li>执行器生成更新操作的 <code>binlog</code>，并把 <code>binlog</code> 写入磁盘。</li>
<li>执行器调用 <code>InnoDB</code> 接口提交事务，并把 <code>redo log</code> 的状态改为 <code>commit</code>，更新完成。</li>
</ol>
<p>其中 <code>redo log</code> 的状态从 <code>prepare</code> 变为 <code>commit</code>，这就是著名的<strong>两阶段提交</strong>。</p>
<h4 id="两阶段提交"><a class="markdownIt-Anchor" href="#两阶段提交"></a> 两阶段提交</h4>
<p>两阶段提交的目的是为了保持 <code>redo log</code> 和 <code>binlog</code> 的逻辑一致性。</p>
<p>假设 <code>redo log</code> 不是两阶段提交，我们看看会出现什么情况：</p>
<ul>
<li>写完 <code>redo log</code> 并提交后，在还未写 <code>binlog</code> 前，系统崩溃了</li>
</ul>
<div class="note "><p>因为 <code>redo log</code> 具有 <code>crash-safe</code> 能力，所以系统恢复后，能恢复数据库更新后的数据；</p>
<p>但是因为在写 <code>binlog</code> 之前系统就崩溃了，因此 <code>binlog</code> 并没有记录下此次更新，如果之后用这个 <code>binlog</code> 来恢复临时库，就会少一次更新。</p>
</div>
<ul>
<li>写完 <code>binlog</code> 后，还为写 <code>redo log</code> 前，系统崩溃了</li>
</ul>
<div class="note "><p>因为 <code>InnoDB</code> 是根据 <code>redo log</code> 的状态来提交事务的，如果一次更新操作在写 <code>redo log</code> 之前，系统就奔溃了，那此次更新（事务）是无效的。系统恢复时，根据 <code>redo log</code> 恢复数据库也不会有这次更新。但是 <code>binlog</code> 是记录了此次更新的，之后如果这个 <code>binlog</code> 来恢复临时库，就会多一次更新。</p>
</div>
<p>总结：如果没有两阶段提交，数据库的状态就可能会和用 <code>binlog</code> 恢复的临时库状态不一致。</p>
<h4 id="备份周期"><a class="markdownIt-Anchor" href="#备份周期"></a> 备份周期</h4>
<p>一周一备，数据恢复需要的时间更长；</p>
<p>一天一备，数据恢复时间更短，但频繁备份需要占用多的存储空间；</p>
<p>因此备份周期需要在恢复时间和存储空间之间做权衡。</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>redo log</tag>
        <tag>binlog</tag>
        <tag>两阶段提交</tag>
      </tags>
  </entry>
  <entry>
    <title>查询优化</title>
    <url>/archives/fa313643.html</url>
    <content><![CDATA[<ol>
<li>考虑在 <code>where</code> 及 <code>order by</code> 涉及的列上建立索引，以避免全表扫描。</li>
<li>避免在 <code>where</code> 子句中对字段进行 <code>null</code> 值判断，否则将导致全表扫描。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 全表扫描</span><br><span class="line">select id from t where num is null;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>
<p>避免在 <code>where</code> 子句中使用 <code>!=</code> 或 <code>&lt;&gt;</code> 操作符，否则将导致全表扫描。</p>
<span id="more"></span>
</li>
<li>
<p>避免在 <code>where</code> 子句中使用 <code>or</code> 来连接条件，否则将导致全表扫描。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 全表扫描</span><br><span class="line">select id from t where num&#x3D;10 or num&#x3D;20;</span><br><span class="line"></span><br><span class="line">-- 可以这样查询：</span><br><span class="line">select id from t where num&#x3D;10 union all select id from t where num&#x3D;20;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>
<p>避免在 <code>where</code> 子句中使用 <code>in</code> 和 <code>not in</code> ，否则会导致全表扫描。</p>
<p>可以用 <code>exits</code> 代替 <code>in</code></p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 全表扫描</span><br><span class="line">select id from t where num in(1,2,3) </span><br><span class="line"></span><br><span class="line">-- 对于连续的数值，能用 between 就不要用 in</span><br><span class="line">select id from t where num between 1 and 3</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>避免在 <code>where</code> 子句中对字段进行算术操作，否则会导致全表扫描。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 全面扫描</span><br><span class="line">select id from t where num&#x2F;2&#x3D;100</span><br><span class="line"></span><br><span class="line">-- 应改为</span><br><span class="line">select id from t where num&#x3D;100*2</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>避免在 <code>where</code> 子句中对字段进行函数操作，否则会导致全表扫描。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 全表扫描</span><br><span class="line">select id from t where substring(name,1,3)&#x3D;&#39;abc&#39;;</span><br><span class="line"></span><br><span class="line">-- name以abc开头的id应改为:</span><br><span class="line">select id from t where name like &#39;abc%&#39;;</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>尽量为数值类型字段建立索引，而不要为字符串类型字段建立索引。</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
        <tag>查询优化</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/archives/7b510e10.html</url>
    <content><![CDATA[<div class="note "><p>控制对其它对象的访问。</p>
<p>代理有以下几种：</p>
<ul>
<li>远程代理（<code>Remote Proxy</code>）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。</li>
<li>虚拟代理（<code>Virtual Proxy</code>）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。</li>
<li>保护代理（<code>Protection Proxy</code>）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。</li>
<li>智能代理（<code>Smart Reference</code>）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</li>
</ul>
</div>
<span id="more"></span>
<img data-src="/archives/7b510e10/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt="代理模式" style="zoom:50%;">
<h4 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h4>
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><code>java.lang.reflect.Proxy</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>结构型模式</tag>
        <tag>代理模式</tag>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/archives/f7de8aa8.html</url>
    <content><![CDATA[<div class="note "><p>提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。</p>
</div>
<span id="more"></span>
<img data-src="/archives/f7de8aa8/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png" alt="外观模式" style="zoom:67%;">
<h4 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h4>
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="subsystem"><a class="markdownIt-Anchor" href="#subsystem"></a> <code>SubSystem</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOnTV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;turnOnTV()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCD</span><span class="params">(String cd)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setCD( &quot;</span> + cd + <span class="string">&quot; )&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWatching</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;startWatching()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="facade"><a class="markdownIt-Anchor" href="#facade"></a> <code>Facade</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSystem subSystem = <span class="keyword">new</span> SubSystem();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchMovie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subSystem.turnOnTV();</span><br><span class="line">        subSystem.setCD(<span class="string">&quot;a movie&quot;</span>);</span><br><span class="line">        subSystem.startWatching();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.watchMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>结构型模式</tag>
        <tag>外观模式</tag>
        <tag>Facade</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/archives/df879792.html</url>
    <content><![CDATA[<div class="note "><p>将对象组合成树形结构来表示“整体/部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。</p>
<p>组件（<code>Component</code>）类是组合类（<code>Composite</code>）和叶子类（<code>Leaf</code>）的父类，可以把组合类看成是树的中间节点。</p>
<p>组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。</p>
</div>
<span id="more"></span>
<img data-src="/archives/df879792/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.png" alt="组合模式" style="zoom:50%;">
<h4 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h4>
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="component"><a class="markdownIt-Anchor" href="#component"></a> <code>Component</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="composite"><a class="markdownIt-Anchor" href="#composite"></a> <code>Composite</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; child;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        child = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Composite:&quot;</span> + name);</span><br><span class="line">        <span class="keyword">for</span> (Component component : child) &#123;</span><br><span class="line">            component.print(level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        child.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        child.remove(component);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="leaf"><a class="markdownIt-Anchor" href="#leaf"></a> <code>Leaf</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;left:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); <span class="comment">// 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Composite root = <span class="keyword">new</span> Composite(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Component node1 = <span class="keyword">new</span> Leaf(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Component node2 = <span class="keyword">new</span> Composite(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Component node3 = <span class="keyword">new</span> Leaf(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        root.add(node1);</span><br><span class="line">        root.add(node2);</span><br><span class="line">        root.add(node3);</span><br><span class="line">        Component node21 = <span class="keyword">new</span> Leaf(<span class="string">&quot;21&quot;</span>);</span><br><span class="line">        Component node22 = <span class="keyword">new</span> Composite(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">        node2.add(node21);</span><br><span class="line">        node2.add(node22);</span><br><span class="line">        Component node221 = <span class="keyword">new</span> Leaf(<span class="string">&quot;221&quot;</span>);</span><br><span class="line">        node22.add(node221);</span><br><span class="line">        root.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><code>java.util.Map#putAll(Map)</code></li>
<li><code>java.util.List#addAll(Collection)</code></li>
<li><code>java.util.Set#addAll(Collection)</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>结构型模式</tag>
        <tag>组合模式</tag>
        <tag>Composite</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰者模式</title>
    <url>/archives/a708a60d.html</url>
    <content><![CDATA[<div class="note "><p>为对象动态添加功能。</p>
<p>装饰者（<code>Decorator</code>）和具体组件（<code>ConcreteComponent</code>）都继承自组件（<code>Component</code>），具体组件的方法实现不需要依赖于其它对象，而<mark class="label primary">装饰者组合了一个组件</mark>，这样它可以装饰其它装饰者或者具体组件。</p>
<p>所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。</p>
<p>装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法，从而也保留了被装饰者的功能。</p>
<p>可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p>
</div>
<span id="more"></span>
<img data-src="/archives/a708a60d/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.png" alt="装饰模式" style="zoom:45%;">
<h4 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h4>
<p>开放封闭原则：类对扩展开放，对修改关闭。</p>
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<p>设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。</p>
<img data-src="/archives/a708a60d/%E9%A5%AE%E6%96%99.png" alt="饮料" style="zoom:50%;">
<h5 id="component"><a class="markdownIt-Anchor" href="#component"></a> <code>Component</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretecomponent"><a class="markdownIt-Anchor" href="#concretecomponent"></a> <code>ConcreteComponent</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="decorator"><a class="markdownIt-Anchor" href="#decorator"></a> <code>Decorator</code></h5>
<p>装饰者（<code>Decorator</code>）组合被装饰者（<code>Component</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">implements</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Beverage beverage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretedecorator"><a class="markdownIt-Anchor" href="#concretedecorator"></a> <code>ConcreteDecorator</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> HouseBlend();</span><br><span class="line">        beverage = <span class="keyword">new</span> Mocha(beverage);</span><br><span class="line">        beverage = <span class="keyword">new</span> Milk(beverage);</span><br><span class="line">        System.out.println(beverage.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><code>java.io.BufferedInputStream(InputStream)</code></li>
<li><code>java.io.BufferedOutputStream(OutputStream)</code></li>
<li><code>java.io.DataInputStream(InputStream)</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>结构型模式</tag>
        <tag>装饰者模式</tag>
        <tag>Decorator</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/archives/f5c535ea.html</url>
    <content><![CDATA[<div class="note "><p>把一个类接口转换成另一个用户需要的接口。</p>
<p><code>Target</code>：想要的接口</p>
<p><code>Adaptee</code>：适配器</p>
<p><code>Adapter</code>：现有接口（被适配接口）</p>
</div>
<span id="more"></span>
<img data-src="/archives/f5c535ea/Adapter.png" alt="Adapter" style="zoom:60%;">
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="target"><a class="markdownIt-Anchor" href="#target"></a> <code>Target</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client 想要一个 Duck</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="adapter"><a class="markdownIt-Anchor" href="#adapter"></a> <code>Adapter</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 现在有一个 Turkey</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;gobble!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="adaptee"><a class="markdownIt-Anchor" href="#adaptee"></a> <code>Adaptee</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个 Duck 的实现类，并调用 Turkey 中的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdaptee</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    Turkey turkey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Turkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line">        Duck duck = <span class="keyword">new</span> TurkeyAdaptee(turkey);</span><br><span class="line">        duck.quack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><code>java.util.Arrays#asList()</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>结构型模式</tag>
        <tag>适配器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/archives/781340000000.html</url>
    <content><![CDATA[<div class="note "><p>将命令封装成对象中，具有以下作用：</p>
<ul>
<li>使用命令来参数化其它对象</li>
<li>将命令放入队列中进行排队</li>
<li>将命令的操作记录到日志中</li>
<li>支持可撤销的操作</li>
</ul>
</div>
<span id="more"></span>
<img data-src="/archives/781340000000/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.png" alt="命令模式" style="zoom:50%;">
<ul>
<li>Command：命令</li>
<li>Receiver：命令接收者，命令真正的执行者</li>
<li>Invoker：通过它来调用命令</li>
<li>Client：可以设置命令与命令的接收者</li>
</ul>
<h4 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h4>
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<p>设计一个遥控器，可以控制电灯开关。</p>
<h5 id="command"><a class="markdownIt-Anchor" href="#command"></a> <code>Command</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretecommand"><a class="markdownIt-Anchor" href="#concretecommand"></a> <code>ConcreteCommand</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;  <span class="comment">// Light 是命令真正的执行者</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;  <span class="comment">// Light 是命令真正的执行者</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="receiver"><a class="markdownIt-Anchor" href="#receiver"></a> <code>Receiver</code></h5>
<p>命令真正的执行者。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Light is on!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Light is off!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="invoker"><a class="markdownIt-Anchor" href="#invoker"></a> <code>Invoker</code></h5>
<p><code>Invoker</code> 调用 <code>Command</code>，<code>Command</code> 再调用 <code>Receiver</code> 的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command[] onCommands;</span><br><span class="line">    <span class="keyword">private</span> Command[] offCommands;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> slotNum = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands = <span class="keyword">new</span> Command[slotNum];</span><br><span class="line">        <span class="keyword">this</span>.offCommands = <span class="keyword">new</span> Command[slotNum];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCommand</span><span class="params">(Command command, <span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        onCommands[slot] = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffCommand</span><span class="params">(Command command, <span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        offCommands[slot] = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        onCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        offCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        Command lightOnCommand = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line">        Command lightOffCommand = <span class="keyword">new</span> LightOffCommand(light);</span><br><span class="line">        invoker.setOnCommand(lightOnCommand, <span class="number">0</span>);</span><br><span class="line">        invoker.setOffCommand(lightOffCommand, <span class="number">0</span>);</span><br><span class="line">        invoker.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        invoker.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">java.lang.Runnable</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>命令模式</tag>
        <tag>Command</tag>
      </tags>
  </entry>
  <entry>
    <title>模版方法模式</title>
    <url>/archives/5029c2a3.html</url>
    <content><![CDATA[<div class="note "><p>定义算法框架，并将一些步骤的实现延迟到子类。</p>
<p>通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p>
</div>
<span id="more"></span>
<img data-src="/archives/5029c2a3/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt="模版方法模式" style="zoom:40%;">
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<p>冲咖啡和冲茶都有类似的流程，某些步骤会有点不一样，但可以复用相同步骤的代码。</p>
<img data-src="/archives/5029c2a3/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E7%A4%BA%E4%BE%8B.png" alt="泡茶或泡咖啡" style="zoom:50%;">
<h5 id="abstractclass"><a class="markdownIt-Anchor" href="#abstractclass"></a> <code>AbstractClass</code></h5>
<p>抽象类中定义了模版方法 <code>prepareRecipe()</code>。</p>
<p>其中有两个方法是可以复用的：<code>boilWater()</code> 和 <code>pourInCup()</code>。</p>
<p>另外两个是抽象方法，要求继承类自己实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">prepareRecipe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        addCondiments();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;boilWater&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pourInCup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteclass"><a class="markdownIt-Anchor" href="#concreteclass"></a> <code>ConcreteClass</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Coffee.brew&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Coffee.addCondiments&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">CaffeineBeverage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Tea.brew&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Tea.addCondiments&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><code>java.util.Collections#sort()</code></li>
<li><code>AQS</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>模版方法模式</tag>
        <tag>Template Method</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/archives/8acb1976.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>状态模式</tag>
        <tag>State</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/archives/72e3b671.html</url>
    <content><![CDATA[<div class="note "><p>定义一系列可以互换的算法。</p>
<p><code>Strategy</code> 是一个接口，<code>ConcreteStrategyA</code> 和 <code>ConcreteStrategyB</code> 实现了该接口。</p>
<p><code>Context</code> 可以设置想使用哪个具体的实现类，但不必关心具体实现细节。</p>
<p><code>setStrategy()</code> 用父类指针指向具体的实现类，体现了里氏替换原则的设计思想。</p>
</div>
<span id="more"></span>
<img data-src="/archives/72e3b671/Strategy.png" alt="Strategy" style="zoom:50%;">
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="strategy"><a class="markdownIt-Anchor" href="#strategy"></a> <code>Strategy</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretestrategya"><a class="markdownIt-Anchor" href="#concretestrategya"></a> <code>ConcreteStrategyA</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretestrategyb"><a class="markdownIt-Anchor" href="#concretestrategyb"></a> <code>ConcreteStrategyB</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;squeak!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="context"><a class="markdownIt-Anchor" href="#context"></a> <code>Context</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (quackBehavior != <span class="keyword">null</span>) &#123;</span><br><span class="line">            quackBehavior.quack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Duck duck = <span class="keyword">new</span> Duck();</span><br><span class="line">        duck.setQuackBehavior(<span class="keyword">new</span> Squeak());</span><br><span class="line">        duck.performQuack();</span><br><span class="line">        duck.setQuackBehavior(<span class="keyword">new</span> Quack());</span><br><span class="line">        duck.performQuack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><code>java.util.Comparator#compare()</code></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>策略模式</tag>
        <tag>Strategy</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/archives/9a246216.html</url>
    <content><![CDATA[<div class="note "><p>定义对象之间的一对多依赖，当一个对象状态改变时，所有依赖这个对象的其他对象都会收到通知并且自动更新状态。</p>
<p>主题（<code>Subject</code>）是被观察的对象，而其所有依赖者称为观察者（<code>Observer</code>）。</p>
<p>主题（<code>Subject</code>）通过维护一张观察者（<code>Observer</code>）列表，可以注册和移除观察者、并在状态改变时通知所有观察者。</p>
</div>
<span id="more"></span>
<img data-src="/archives/9a246216/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="观察者模式" style="zoom:50%;">
<h4 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h4>
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<p>天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。</p>
<h5 id="subject"><a class="markdownIt-Anchor" href="#subject"></a> <code>Subject</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretesubject"><a class="markdownIt-Anchor" href="#concretesubject"></a> <code>ConcreteSubject</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        observers.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer o : observers) &#123;</span><br><span class="line">            o.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="observer"><a class="markdownIt-Anchor" href="#observer"></a> <code>Observer</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteobserver"><a class="markdownIt-Anchor" href="#concreteobserver"></a> <code>ConcreteObserver</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatisticsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StatisticsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;StatisticsDisplay.update: &quot;</span> + temp + <span class="string">&quot; &quot;</span> + humidity + <span class="string">&quot; &quot;</span> + pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> </span>&#123;</span><br><span class="line">        weatherData.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temp, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CurrentConditionsDisplay.update: &quot;</span> + temp + <span class="string">&quot; &quot;</span> + humidity + <span class="string">&quot; &quot;</span> + pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 被观察者</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line">        <span class="comment">// 观察者</span></span><br><span class="line">        CurrentConditionsDisplay currentConditionsDisplay = <span class="keyword">new</span> CurrentConditionsDisplay(weatherData);</span><br><span class="line">        <span class="comment">// 观察者</span></span><br><span class="line">        StatisticsDisplay statisticsDisplay = <span class="keyword">new</span> StatisticsDisplay(weatherData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被观察者状态改变时，会通知所有观察者</span></span><br><span class="line">        weatherData.setMeasurements(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Observer.html">java.util.Observer</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>观察者模式</tag>
        <tag>Observer</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/archives/9055d217.html</url>
    <content><![CDATA[<div class="note "><p>提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。</p>
<ul>
<li><code>Aggregate</code> 是聚合类，其中 <code>createIterator()</code> 方法可以产生一个 <code>Iterator</code>；</li>
<li><code>Iterator</code> 主要定义了 <code>hasNext()</code> 和 <code>next()</code> 方法；</li>
<li><code>Client</code> 组合了 <code>Aggregate</code>，为了迭代遍历 <code>Aggregate</code>，也需要组合 <code>Iterator</code>。</li>
</ul>
</div>
<span id="more"></span>
<img data-src="/archives/9055d217/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt="迭代器模式" style="zoom:50%;">
<h4 id="设计原则"><a class="markdownIt-Anchor" href="#设计原则"></a> 设计原则</h4>
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="iterator"><a class="markdownIt-Anchor" href="#iterator"></a> <code>Iterator</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Item <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteiterator"><a class="markdownIt-Anchor" href="#concreteiterator"></a> <code>ConcreteIterator</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Item[] items;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(Item[] items)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[position++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; items.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="aggregate"><a class="markdownIt-Anchor" href="#aggregate"></a> <code>Aggregate</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function">Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteaggregate"><a class="markdownIt-Anchor" href="#concreteaggregate"></a> <code>ConcreteAggregate</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer[] items;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteAggregate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        items = <span class="keyword">new</span> Integer[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">            items[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator&lt;Integer&gt;(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Aggregate aggregate = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = aggregate.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>行为型模式</tag>
        <tag>迭代器模式</tag>
        <tag>Iterator</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/archives/f1601c3e.html</url>
    <content><![CDATA[<div class="note "><p>单例模式确保一个类只有一个实例，并提供该实例的全局访问点。</p>
<p>单例模式的类包括：</p>
<ul>
<li>私有构造函数</li>
<li>私有静态变量</li>
<li>共有静态函数</li>
</ul>
<p>私有构造函数和公有静态函数保证了该类不能通过构造函数生成新的实例，只能通过公有静态函数返回类的唯一实例。</p>
</div>
<span id="more"></span>
<h4 id="恶汉式-线程安全"><a class="markdownIt-Anchor" href="#恶汉式-线程安全"></a> 恶汉式 - 线程安全</h4>
<div class="note "><p>在定义时直接实例化 <code>uniqueInstance</code>，<code>static</code> 保证只会实例化一次，但是如果 <code>uniqueInstance</code> 之后没有被用到，就浪费了资源。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton(); </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> uniqueInstance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="懒汉式-线程不安全"><a class="markdownIt-Anchor" href="#懒汉式-线程不安全"></a> 懒汉式 - 线程不安全</h4>
<div class="note "><p><code>uniqueInstance</code> 延迟初始化，但这个实现在多线程环境下不安全。</p>
<p>如果多个线程先后通过 <code>if (uniqueInstance == null)</code> 判断，然后让出 <code>CPU</code> ，其中某个线程先执行 <code>uniqueInstance = new Singleton()</code> 后，其他线程重新获得执行后依旧会再次执行该语句，导致 <code>uniqueInstance</code> 被多次实例化。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123; </span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton(); </span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> uniqueInstance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="懒汉式-线程安全"><a class="markdownIt-Anchor" href="#懒汉式-线程安全"></a> 懒汉式 - 线程安全</h4>
<div class="note "><p><code>uniqueInstance</code> 延迟初始化，并且是多线程安全的。</p>
<p>在 <code>getUniqueInstance()</code> 之前加上 <code>synchronized</code> 保证同时最多只会有一个线程进入该方法。</p>
<p>第一个进去该方法的线程，会通过 <code>if (uniqueInstance == null)</code> 判断，并执行 <code>uniqueInstance = new Singleton();</code></p>
<p>其他线程再进入该方法时，不能通过 <code>if (uniqueInstance == null)</code>，直接返回 <code>uniqueInstance</code>，保证了 <code>uniqueInstance</code> 不会被多次实例化。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123; </span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton(); </span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> uniqueInstance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="双重校验-线程安全"><a class="markdownIt-Anchor" href="#双重校验-线程安全"></a> 双重校验 - 线程安全</h4>
<div class="note "><p>直接对 <code>getUniqueInstance()</code> 加锁没有必要，因为当 <code>uniqueInstance</code> 实例化之后，只需要判断一下其是否为 <code>null</code> 就可以了，如果已经实例化，直接返回即可；如果没有实例化，再对实例化语句部分加锁以保证只会实例化一次即可。</p>
<p>第 2 个 <code>if (uniqueInstance == null)</code> 是必要的。</p>
<p><code>uniqueInstance</code> 采用 <code>volatile</code> 关键字修饰也是很有必要的，<code>uniqueInstance = new Singleton();</code> 实际上分为三步执行：</p>
<ol>
<li>
<p>为 <code>new Singleton()</code> 对象分配内存空间</p>
</li>
<li>
<p>初始化 <code>new Singleton()</code> 对象</p>
</li>
<li>
<p>将 <code>uniqueInstance</code> 指向分配的内存地址</p>
</li>
</ol>
<p>但是由于 <code>JVM</code> 具有指令重排的特性，执行顺序有可能变成 1&gt;3&gt;2。</p>
<p>指令重排在单线程环境下不会出现问题，但是在多线程环境下会导致一个线程获得还没有初始化的实例。</p>
<p>例如，线程 <code>T1</code> 执行了 1 和 3，<code>uniqueInstance</code> 还未初始化；<code>CPU</code> 切换执行 <code>T2</code> ，<code>T2</code> 调用 <code>getUniqueInstance()</code> 后发现 <code>uniqueInstance</code> 不为空，返回 <code>uniqueInstance</code> 并使用，就有可能出错。</p>
<p>使用 <code>volatile</code> 可以禁止 <code>JVM</code> 的指令重排。</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态内部类实现"><a class="markdownIt-Anchor" href="#静态内部类实现"></a> 静态内部类实现</h4>
<div class="note "><p>在加载 <code>Singleton</code> 时，静态内部类 <code>SingletonHolder</code> 没有被加载</p>
</div>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getUniqueInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举类实现"><a class="markdownIt-Anchor" href="#枚举类实现"></a> 枚举类实现</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String objName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObjName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjName</span><span class="params">(String objName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objName = objName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂方法模式</title>
    <url>/archives/48598499.html</url>
    <content><![CDATA[<div class="note "><p>定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p>
</div>
<span id="more"></span>
<img data-src="/archives/48598499/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt="工厂方法模式" style="zoom:50%;">
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="product"><a class="markdownIt-Anchor" href="#product"></a> <code>Product</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteproduct"><a class="markdownIt-Anchor" href="#concreteproduct"></a> <code>ConcreteProduct</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductC</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="factory"><a class="markdownIt-Anchor" href="#factory"></a> <code>Factory</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Product product = factoryMethod();</span><br><span class="line">        <span class="comment">// do something with the product</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretefactory"><a class="markdownIt-Anchor" href="#concretefactory"></a> <code>ConcreteFactory</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactoryA</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactoryB</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactoryC</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--">java.util.Calendar</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>工厂方法模式</tag>
        <tag>Factory Method</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/archives/9b7d6e62.html</url>
    <content><![CDATA[<div class="note "><p>提供一个接口，用于创建<strong>相关的对象家族</strong> 。</p>
<p>工厂方法模式只是用于创建一个对象；而抽象工厂模式创建的是对象家族，并且这些对象是相关的，也就是说这些对象必须一起创建出来。</p>
<p>抽象工厂模式用到了工厂方法模式来创建单一对象，<code>AbstractFactory</code> 中的 <code>createProductA()</code> 和 <code>createProductB()</code> 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。</p>
</div>
<span id="more"></span>
<img data-src="/archives/9b7d6e62/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="抽象工厂模式" style="zoom:67%;">
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="abstractproducta"><a class="markdownIt-Anchor" href="#abstractproducta"></a> <code>AbstractProductA</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteproducta"><a class="markdownIt-Anchor" href="#concreteproducta"></a> <code>ConcreteProductA</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="abstractproductb"><a class="markdownIt-Anchor" href="#abstractproductb"></a> <code>AbstractProductB</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteproductb"><a class="markdownIt-Anchor" href="#concreteproductb"></a> <code>ConcreteProductB</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="abstractfactory"><a class="markdownIt-Anchor" href="#abstractfactory"></a> <code>AbstractFactory</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concretefactory"><a class="markdownIt-Anchor" href="#concretefactory"></a> <code>ConcreteFactory</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFactory abstractFactory = <span class="keyword">new</span> ConcreteFactory1();</span><br><span class="line">        AbstractProductA productA = abstractFactory.createProductA();</span><br><span class="line">        AbstractProductB productB = abstractFactory.createProductB();</span><br><span class="line">        <span class="comment">// do something with productA and productB</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>抽象工厂模式</tag>
        <tag>Abstract Factory</tag>
      </tags>
  </entry>
  <entry>
    <title>简单工厂模式</title>
    <url>/archives/6b3bea20.html</url>
    <content><![CDATA[<div class="note "><p>提供一个创建对象的通用接口，不向客户暴露内部细节。</p>
<p>简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。</p>
</div>
<span id="more"></span>
<img data-src="/archives/6b3bea20/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt="简单工厂模式" style="zoom:50%;">
<h4 id="简单实现"><a class="markdownIt-Anchor" href="#简单实现"></a> 简单实现</h4>
<h5 id="product"><a class="markdownIt-Anchor" href="#product"></a> <code>Product</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="concreteproduct"><a class="markdownIt-Anchor" href="#concreteproduct"></a> <code>ConcreteProduct</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductC</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="simplefactory"><a class="markdownIt-Anchor" href="#simplefactory"></a> <code>SimpleFactory</code></h5>
<p>向外提供了一个创建 <code>Product</code> 对象的接口 <code>createProduct()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="client"><a class="markdownIt-Anchor" href="#client"></a> <code>Client</code></h5>
<p>使用简单工厂提供的接口来创建对象，不用考虑创建对象的细节。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleFactory simpleFactory = <span class="keyword">new</span> SimpleFactory();</span><br><span class="line">        Product product = simpleFactory.createProduct(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// do something with the product</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jdk-中的应用"><a class="markdownIt-Anchor" href="#jdk-中的应用"></a> <code>JDK</code> 中的应用</h4>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>创建型模式</tag>
        <tag>简单工厂模式</tag>
        <tag>Simple Factory</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL查询语句的执行流程</title>
    <url>/archives/65991c90.html</url>
    <content><![CDATA[<h4 id="mysql-逻辑架构图"><a class="markdownIt-Anchor" href="#mysql-逻辑架构图"></a> <code>MySQL</code> 逻辑架构图</h4>
<img data-src="/archives/65991c90/MySQL%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="MySQL逻辑架构图" style="zoom:60%;">
<span id="more"></span>
<p>大体上，<code>MySQL</code> 可以分为 <code>Server</code> 层和存储引擎层。</p>
<p><code>Server</code> 层涵盖 <code>MySQL</code> 的大多数核心功能，所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等，以及所有的<strong>内置函数（如日期、时间、数学和加密函数等）</strong>。</p>
<p><code>Server</code> 层核心模块包括：</p>
<ul>
<li><strong>连接器</strong></li>
<li><strong>查询缓存</strong></li>
<li><strong>分析器</strong></li>
<li><strong>优化器</strong></li>
<li><strong>执行器</strong></li>
</ul>
<p>存储引擎层则负责的存储和提取。<code>MySQL 5.5.5</code> 开始的默认引擎是 <code>InnoDB</code>。</p>
<p>知道了 <code>MySQL</code> 的基本架构之后，我们通过一条最基本的查询语句 <code>select * from T where ID = 1;</code> 来看看查询语句在 <code>MySQL</code> 中的基本执行流程。</p>
<h5 id="server-层"><a class="markdownIt-Anchor" href="#server-层"></a> <code>Server</code> 层</h5>
<h6 id="连接器"><a class="markdownIt-Anchor" href="#连接器"></a> 连接器</h6>
<p>第 1 步：连接数据库。</p>
<p>连接器会负责<strong>建立连接</strong>、<strong>获取权限</strong>、<strong>维持和管理连接</strong>。</p>
<p>连接分为长连接和短连接，建立连接的过程比较耗时，一般建议使用长连接。</p>
<p><code>MySQL</code> 在执行过程中临时使用的内存由连接管理，并且直到连接断开才会释放这些内存。如果全部使用长连接，随着可能导致内存不够用，会被系统强行杀掉，也就是可能看到的 <code>MySQL</code> 异常重启。</p>
<p>解决方案：</p>
<ul>
<li>定期断开长连接，或者执行完一个大查询后断开连接；</li>
<li><code>MySQL 5.7</code> 以后的版本，可以用 <code>mysql_reset_connection</code> 重新初始化连接。</li>
</ul>
<h6 id="查询缓存"><a class="markdownIt-Anchor" href="#查询缓存"></a> 查询缓存</h6>
<p>第 2 步：查询缓存。</p>
<p><code>MySQL</code> 拿到查询请求之后，会先去缓存中查询。对于执行过的查询，缓存中可能会有 <code>key-value</code> 缓存结果（<code>key</code> 是查询语句，<code>value</code> 是查询结果）。如果这次查询，能在缓存中找到对应的 <code>key</code>，就可以直接返回 <code>value</code>，不用再走后面的操作。</p>
<p>虽然在查询缓存命中时，查询结果能在很短时间内返回，但是一般还是不建议使用查询缓存。</p>
<p>因为查询缓存非常容易失效：只要有一个对表的更新操作，这个表的查询缓存就会全部清空。</p>
<p><code>MySQL 8.0</code> 甚至直接将查询缓存功能删除了。</p>
<h6 id="分析器"><a class="markdownIt-Anchor" href="#分析器"></a> 分析器</h6>
<p>第 3 步：分析 <code>SQL</code> 语句。</p>
<ul>
<li>词法分析 - 分析 <code>SQL</code> 语句中每个字符串代表的意义；</li>
<li>语法分析 - 分析 <code>SQL</code> 语句是否符合 <code>MySQL</code> 的语法规则。</li>
</ul>
<p>在这一步可以分析出 <code>SQL</code> 语句中的<strong>表、列是否存在，别名是否有歧义</strong>等。</p>
<h6 id="优化器"><a class="markdownIt-Anchor" href="#优化器"></a> 优化器</h6>
<p>第 4 步：优化查询。</p>
<p>经过分析之后，<code>MySQL</code> 知道了查询语句具体要做什么，但在真正开始查询之前，需要做一些优化。</p>
<p>优化器做的优化：</p>
<ul>
<li>表有多个索引时，<strong>决定使用哪个索引</strong>；</li>
<li>多表关联查询时，<strong>决定表的查询顺序</strong>。</li>
</ul>
<h6 id="执行器"><a class="markdownIt-Anchor" href="#执行器"></a> 执行器</h6>
<p>第 5 步：执行查询。</p>
<p>在执行查询之前，需要检查是否有查询的权限。如果没有，会返回没有权限错误；如果有，就根据表的引擎定义，调用相应的引擎接口。</p>
<p>如果查询条件中的字段（上面的例子是 <code>ID</code>）没有索引，就全表扫描，从表的第一行开始判断，判断 <code>ID</code> 是否等于 1，将符合条件的行数据存在结果集中返回给客户端。</p>
<h5 id="引擎层"><a class="markdownIt-Anchor" href="#引擎层"></a> 引擎层</h5>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/archives/f7ede91d.html</url>
    <content><![CDATA[<h4 id="java-的跨平台性"><a class="markdownIt-Anchor" href="#java-的跨平台性"></a> Java 的跨平台性</h4>
<p>字节码：</p>
<blockquote>
<p>由 Java 虚拟机（JVM）解释执行的代码，字节码不面向任何具体的操作系统，只面向 JVM。Java 语言通过字节码的形式，一定程度上解决了传统解释型语言执行效率低的问题，同时右保留了解释型语言可移植的特点。</p>
</blockquote>
<p>Java 程序的执行需要先经由 JDK 中的 javac 工具编译成字节码文件（.class 文件），然后再由 JVM 解释执行（没执行一句，把这条语句翻译成机器可以理解的机器码）。解释执行效率相对较低，而程序中通常有些代码会经常被调用执行（热点代码），所以又引入 JIT 编译器，对于热点代码，JIT 编译器会将其对应的机器码保存起来，下次需要的时候直接使用，提高程序执行的效率。</p>
<p><strong>JVM 针对不同的系统有特定的实现，这些不同的实现对于给定的字节码文件，都会给出相同的执行结果。也就是说字节码和 JVM共同实现了 Java “一次编写，到处运行”的特性</strong>。</p>
<span id="more"></span>
<h4 id="switch"><a class="markdownIt-Anchor" href="#switch"></a> switch</h4>
<p>在 Java 5 之前，switch(expr) 中的 expr 只能是 char、byte、short、int；</p>
<p>从 Java 5 开始，引入了枚举类型，expr 也可以是枚举类型；</p>
<p>从 Java 7 开始，expr 还可以是 String 类型。</p>
<p>字符串的 <code>switch</code> 是通过 <code>equals()</code> 和 <code>hashCode()</code> 方法来实现的。</p>
<p>进行 <code>switch</code> 的实际是哈希值，然后通过使用 <code>equals</code> 方法比较进行安全检查，这个检查是必要的，因为哈希可能会发生碰撞。</p>
<p><strong>也就是说目前 expr 的类型可以是 char、byte、short、int、enum、String。</strong></p>
<h4 id="转型"><a class="markdownIt-Anchor" href="#转型"></a> 转型</h4>
<ul>
<li>
<p><code>short s1 = 1; s1 = s1 + 1;</code> 是否正确？</p>
<blockquote>
<p>不对。</p>
<p>因为数值 1 默认是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p>
<p>正确写法是 <code>s1 = (short)(s1 + 1)</code>。</p>
</blockquote>
</li>
<li>
<p><code>short s1 = 1; s1 += 1;</code> 是否正确？</p>
<blockquote>
<p>可以正确编译。</p>
<p>因为 <code>s1 += 1;</code> 就相当于 <code>s1 = (short) (s1 + 1);</code> 其中有<strong>隐含的强制类型转换</strong>。</p>
</blockquote>
</li>
</ul>
<h4 id="访问修饰符"><a class="markdownIt-Anchor" href="#访问修饰符"></a> 访问修饰符</h4>
<blockquote>
<p>访问修饰符用来保护对类、数据、方法的访问，Java 支持 4 种访问权限。</p>
</blockquote>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同包</th>
<th>子类（异包）</th>
<th>异包</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>protected</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✗</td>
</tr>
<tr>
<td>default</td>
<td>✓</td>
<td>✓</td>
<td>✗</td>
<td>✗</td>
</tr>
<tr>
<td>private</td>
<td>✓</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
</tr>
</tbody>
</table>
<h4 id="final"><a class="markdownIt-Anchor" href="#final"></a> final</h4>
<ol>
<li>修饰数据</li>
</ol>
<blockquote>
<p>声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。</p>
<ul>
<li>对于基本类型，final 使数值不变；</li>
<li>对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。</li>
</ul>
</blockquote>
<ol start="2">
<li>修饰方法</li>
</ol>
<blockquote>
<p>声明方法不能被子类重写。</p>
<p><strong>private 方法隐式地被指定为 final</strong>。</p>
<p>如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</p>
</blockquote>
<ol start="3">
<li>修饰类</li>
</ol>
<blockquote>
<p>声明类不能被继承。</p>
</blockquote>
<h4 id="static"><a class="markdownIt-Anchor" href="#static"></a> static</h4>
<ol>
<li>静态变量</li>
</ol>
<blockquote>
<p>又称为类变量，也就是说这个变量属于类的，类所有的实例共享静态变量，可以直接通过类名来访问它。</p>
<p>静态变量在内存中只存在一份。</p>
</blockquote>
<ol start="2">
<li>静态方法</li>
</ol>
<blockquote>
<p>静态方法必须有实现，<strong>不能是抽象方法</strong>。</p>
<p>只能访问所属类的静态字段和静态方法。</p>
<p>静态方法中不能有 this 和 super 关键字，因为这两个关键字与具体对象关联。</p>
</blockquote>
<ol start="3">
<li>静态语句块</li>
</ol>
<blockquote>
<p>在类初始化时运行一次。</p>
</blockquote>
<p>初始化顺序：</p>
<blockquote>
<ol>
<li>
<p>静态变量/静态语句块</p>
</li>
<li>
<p>实例变量/普通语句块</p>
</li>
<li>
<p>构造函数</p>
</li>
</ol>
</blockquote>
<p>存在继承的情况下，初始化顺序为：</p>
<blockquote>
<ol>
<li>基类（静态变量/静态语句块）</li>
<li>子类（静态变量/静态语句块）</li>
<li>基类（实例变量/普通语句块）</li>
<li>基类（构造函数）</li>
<li>子类（实例变量/普通语句块）</li>
<li>子类（构造函数）</li>
</ol>
</blockquote>
<h4 id="面向对象三大特性"><a class="markdownIt-Anchor" href="#面向对象三大特性"></a> 面向对象三大特性</h4>
<ul>
<li>
<p>封装</p>
</li>
<li>
<p>继承</p>
</li>
<li>
<p>多态</p>
<blockquote>
<p>允许不同类的对象对同一消息作出响应。</p>
</blockquote>
<blockquote>
<p>多态存在的三个必要条件</p>
<p>一、继承；</p>
<p>二、方法重写；</p>
<p>三、父类引用指向子类对象。</p>
</blockquote>
</li>
</ul>
<h4 id="面向对象五大原则"><a class="markdownIt-Anchor" href="#面向对象五大原则"></a> 面向对象五大原则</h4>
<ul>
<li>
<p><strong>单一职责原则</strong>（Single Responsibility Principle，SRP）</p>
<blockquote>
<p>类的功能要单一。</p>
</blockquote>
</li>
<li>
<p><strong>开放封闭原则</strong>（Open-Close Principle，OCP）</p>
<blockquote>
<p>一个模块对拓展开放，对修改封闭。</p>
</blockquote>
</li>
<li>
<p><strong>里式替换原则</strong>（the Liskov Substitution Principle，LSP）</p>
<blockquote>
<p>基类出现的任何地方都可以用子类替换。</p>
</blockquote>
</li>
<li>
<p><strong>依赖倒置原则</strong>（the Dependency Inversion Principle，DIP）</p>
<blockquote>
<p>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。</p>
<p>抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</p>
</blockquote>
</li>
<li>
<p>接口分离原则（the Interface Segregation Principle ISP）</p>
</li>
</ul>
<h4 id="java-如何实现多态"><a class="markdownIt-Anchor" href="#java-如何实现多态"></a> Java 如何实现多态</h4>
<ol>
<li>重载（Overload）</li>
</ol>
<blockquote>
<p>多个方法同名，但这些方法的参数在类型、个数、顺序至少有一个不一样。</p>
</blockquote>
<ol start="2">
<li>重写（Override）</li>
</ol>
<blockquote>
<p>存在与继承体系中，指子类对基类的方法进行重新实现。</p>
<p>为了满足里式替换原则，重写有以下三个限制：</p>
<ul>
<li>子类方法的访问权限必须大于等于父类方法；</li>
<li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li>
<li>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。</li>
</ul>
</blockquote>
<p>动态绑定：</p>
<blockquote>
<p>在执行期间判断引用所指对象的实际类型，根据其实际的类型调用其相应的方法。</p>
</blockquote>
<p>多态的实现基于：</p>
<blockquote>
<ol>
<li>类的继承</li>
<li>方法重写</li>
<li>基类引用指向子类对象</li>
<li>动态绑定</li>
</ol>
</blockquote>
<h4 id="抽象类与接口"><a class="markdownIt-Anchor" href="#抽象类与接口"></a> 抽象类与接口</h4>
<ul>
<li>
<p>抽象类</p>
<blockquote>
<p>抽象类和抽象方法都使用 abstract 关键字进行声明。</p>
<p>如果一个类中包含抽象方法，那么这个类必须声明为抽象类。</p>
<p>抽象类不能实例化。</p>
</blockquote>
</li>
<li>
<p>接口</p>
<blockquote>
<p>接口的字段默认是 public static final 的。</p>
<p>接口的方法默认是 public 的。</p>
<p>在 Java 8 之前，接口可以看成是一个完全抽象的类，也就是说接口不能有任何的方法实现。如果接口添加了一个新的方法，所有实现该接口的类都需要实现这个方法。显然这样的设计维护成本太高。所以从 Java 8 之后，接口也可以拥有默认的方法实现。</p>
<p>Java 9 之后允许将方法定义为 private，这样就能定义某些复用的代码又不会把方法暴露出去。</p>
</blockquote>
</li>
<li>
<p>比较</p>
<blockquote>
<p>抽象类是对类特征的抽象，抽象类和其子类之间是 IS-A 关系，满足里式替换原则，即父类对象可以用子类对象替换。</p>
<p>接口是对行为的抽象，接口和其实现类像是 LIKE-A 关系，比如飞机和鸟都有飞的行为，但没有其他明星的共同特征，此时让飞机和鸟继承一个共同的基类显然不太合理。</p>
<p>一个类只能继承一个基类；但可以实现多个接口。</p>
</blockquote>
</li>
</ul>
<h4 id="默认构造函数"><a class="markdownIt-Anchor" href="#默认构造函数"></a> 默认构造函数</h4>
<p>如果一个类没有显示定义构造函数，编译器会默认生成一个无参的默认构造函数。</p>
<p>如果现实定义了有参的构造函数，则不会默认生成无参的构造函数。</p>
<p>如果一个类有子类，则显示定义了有参的构造函数，需要同时显示定义无参构造。</p>
<blockquote>
<p>因为在执行子类的构造函数之前，如果没有用 super() 来调用父类特定的构造函数，则会调用父类中“无参的构造函数”。如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super() 来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不无参构造函数。</p>
</blockquote>
<h4 id="和-equals-的区别"><a class="markdownIt-Anchor" href="#和-equals-的区别"></a> <code>==</code> 和 <code>equals</code> 的区别</h4>
<ul>
<li>
<p>对于基本类型</p>
<p><code>==</code> 判断两个值是否相等，基本类型没有 <code>equals()</code> 方法。</p>
</li>
<li>
<p>对于引用类型</p>
<p><code>==</code> 判断两个变量是否引用同一个对象，而 <code>equals()</code> 判断引用的对象是否等价。</p>
</li>
</ul>
<p><code>equals</code> 的实现分为以下几步：</p>
<blockquote>
<ol>
<li>检查是否为同一个对象的引用，如果是直接返回 true；</li>
<li>检查是否是同一个类型，如果不是，直接返回 false；</li>
<li>将 Object 对象进行转型；</li>
<li>判断每个关键域是否相等。</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EqualExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 1. 检查是否为同一个对象的引用</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 2. 检查是否同一类型</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 转型</span></span><br><span class="line">        EqualExample that = (EqualExample) o;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断引用的对象是否等价，即判断对象的每个字段是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (x != that.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (y != that.y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> z == that.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="hashcode"><a class="markdownIt-Anchor" href="#hashcode"></a> hashCode</h4>
<p><code>equals()</code> 用来判断两个对象是否等价，<code>hashCode()</code> 返回对象的哈希值。</p>
<p>等价的两个对象哈希值一定相等，哈希值相等的两个对象不一定等价。</p>
<p><code>HashSet</code> 、<code>HashMap</code> 等集合类使用 <code>hashCode()</code> 计算对象应该存储的位置，为了正常工作，要存入<code>HashSet</code> 、<code>HashMap</code> 等集合的类也要重写 <code>hashCode()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(a.hashCode());  <span class="comment">// 96354</span></span><br><span class="line">        System.out.println(b.hashCode());  <span class="comment">// 96354</span></span><br><span class="line"></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(a);</span><br><span class="line">        set.add(b);</span><br><span class="line">        System.out.println(set.size());  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">        MyString c = <span class="keyword">new</span> MyString(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        MyString d = <span class="keyword">new</span> MyString(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(c.hashCode());  <span class="comment">// 1846274136</span></span><br><span class="line">        System.out.println(d.hashCode());  <span class="comment">// 1639705018</span></span><br><span class="line"></span><br><span class="line">        HashSet&lt;MyString&gt; set1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set1.add(c);</span><br><span class="line">        set1.add(d);</span><br><span class="line">        System.out.println(set1.size());  <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>String</code> 类实现了 <code>hashCode()</code>，保证了对象 <code>a</code> 和 <code>b</code> 的哈希值相等，因此只会在 <code>HashSet</code> 中保存一个；</p>
<p>而 <code>MyString</code> 没有实现 <code>hashCode()</code>，对象 <code>c</code> 和 <code>d</code> 的哈希值不等，两个就都存入 <code>HashSet</code>。</p>
<h4 id="值传递"><a class="markdownIt-Anchor" href="#值传递"></a> 值传递</h4>
<p>Java 中参数传递方式只有一种，就是值传递，不存在引用传递。</p>
<h4 id="string-和-字符串常量池"><a class="markdownIt-Anchor" href="#string-和-字符串常量池"></a> String 和 字符串常量池</h4>
<p><code>String</code> 被声明为 <code>final</code>，因此不能继承。</p>
<p>在 Java 8 中，<code>String</code> 内部使用 <code>char[]</code> 数组存储数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Java 9 中，<code>String</code> 内部改用 <code>byte[]</code> 数组存储数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The identifier of the encoding used to encode the bytes in &#123;<span class="doctag">@code</span> value&#125;. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> coder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>value</code> 数组被声明为 <code>final</code>，这意味着 <code>value</code> 数组初始化之后就不能再引用其它数组。而 <code>String</code> 内部没有改变 <code>value</code> 数组内容的方法，这就保证了 <code>String</code> 不可变。</p>
<p><strong>字符串常量池</strong></p>
<blockquote>
<p>为了提供执行效率，Java 为 8 种基本类型和 <code>String</code> 类型提供了常量池的概念。</p>
<p>String Pool是一个固定大小的 <code>Hashtable</code>，默认值大小长度是1009，如果放进 String Pool的 String非常多，就会造成 Hash 冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是调用 <code>String.intern</code> 时性能会大幅下降。</p>
</blockquote>
<blockquote>
<p>String Pool 保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定。不仅如此，还可以使用 String 的 intern() 方法在运行过程将字符串添加到 String Pool 中。</p>
<p>当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。</p>
<p>在 Java 7 之前，String Pool 被放在运行时常量池中，属于永久代。Java 7 之后，String Pool 被移到堆中。因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s3 == s1);  <span class="comment">// false</span></span><br><span class="line">String s4 = s2.intern();</span><br><span class="line">System.out.println(s3 == s4);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">String s5 = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line">System.out.println(s3 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s)); <span class="comment">// 1846274136</span></span><br><span class="line">    System.out.println(System.identityHashCode(s.intern())); <span class="comment">// 1639705018</span></span><br><span class="line">    String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s2)); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(s == s2); <span class="comment">// jdk6: false  jdk7: false</span></span><br><span class="line"></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s3)); <span class="comment">// 1627674070</span></span><br><span class="line">    System.out.println(System.identityHashCode(s3.intern())); <span class="comment">// 1627674070</span></span><br><span class="line">    String s4 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s4)); <span class="comment">// 1627674070</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// jdk6: false jdk7: true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s)); <span class="comment">// 1846274136</span></span><br><span class="line">    String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s2)); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(System.identityHashCode(s.intern())); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(s == s2); <span class="comment">// jdk6: false  jdk7: false</span></span><br><span class="line"></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s3)); <span class="comment">// 1627674070</span></span><br><span class="line">    String s4 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s4)); <span class="comment">// 1360875712</span></span><br><span class="line">    System.out.println(System.identityHashCode(s3.intern())); <span class="comment">// 1360875712</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// jdk6: false jdk7: false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>new String(&quot;abc&quot;)</code> 会创建几个对象？</p>
<blockquote>
<p>2 个</p>
</blockquote>
<h4 id="基本类型的包装类型与缓存池"><a class="markdownIt-Anchor" href="#基本类型的包装类型与缓存池"></a> 基本类型的包装类型与缓存池</h4>
<p>基本类型都有对应的包装类型，如：int 类型的包装类型是 Integer。</p>
<p>对于每种包装类型，都有一个缓存池，如：Integer 缓存池默认大小是 -128～127。</p>
<p>基本类型与对应的包装类型之间的赋值通过自动装箱和拆箱完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer x = <span class="number">2</span>;     <span class="comment">// 装箱 调用了 Integer.valueOf(2)</span></span><br><span class="line"><span class="keyword">int</span> y = x;         <span class="comment">// 拆箱 调用了 X.intValue()</span></span><br></pre></td></tr></table></figure>
<p><code>new Integer(123)</code> 和 <code>Integer.valueOf(123)</code> 的区别：</p>
<blockquote>
<ul>
<li><code>new Integer(123)</code> 每次都会新建一个对象；</li>
<li><code>Integer.valueOf(123)</code> 会使用缓存池中的对象，每次调用都返回同一个对象的引用。</li>
</ul>
</blockquote>
<h4 id="浅拷贝与深拷贝"><a class="markdownIt-Anchor" href="#浅拷贝与深拷贝"></a> 浅拷贝与深拷贝</h4>
<ul>
<li>
<p>浅拷贝</p>
<blockquote>
<p>只拷贝对象的地址，即原引用和拷贝后的引用指向同一对象。</p>
</blockquote>
</li>
<li>
<p>深拷贝</p>
<blockquote>
<p>创建新的对象，原引用和新引用指向两个不同的对象。</p>
</blockquote>
</li>
</ul>
<h4 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h4>
<p>通过反射，可以在运行时获得程序中每一个类型的成员和成员的信息。</p>
<p><strong>获取 <code>Class</code> 对象的三种方式：</strong></p>
<ul>
<li>通过继承自 <code>Object</code> 类的 <code>getClass()</code> 方法</li>
<li>通过每个数据类型（包括基本数据类型）静态的 <code>class</code> 属性</li>
<li>通过 <code>Class</code> 类静态的 <code>forName(&quot;path&quot;)</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="keyword">new</span> String(); </span><br><span class="line">        System.out.println(s.getClass());  <span class="comment">// class java.lang.String</span></span><br><span class="line">        System.out.println(String.class);  <span class="comment">// class java.lang.String</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Class.forName(<span class="string">&quot;com.tw.Main&quot;</span>));  <span class="comment">// class com.tw.Main</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>判断是否为某个类的实例</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">    System.out.println(s <span class="keyword">instanceof</span> String);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    Class clazz = s.getClass();</span><br><span class="line"></span><br><span class="line">    System.out.println(clazz.isInstance(s));  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>创建实例：</strong></p>
<ul>
<li>通过 <code>Class</code> 类的 <code>newInstance()</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = String.class;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String s = (String) clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过 <code>Constructor</code> 类的 <code>newInstance()</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = String.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        String s = (String) constructor.newInstance(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法的好处是可以用指定的构造起创建对象。</p>
<p><strong>获取和使用方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods() <span class="keyword">throws</span> SecurityException</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 返回某个类的所有公用（public）方法，包括其继承类的公用方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getMethods() <span class="keyword">throws</span> SecurityException</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</span></span><br><span class="line"><span class="function">           InvocationTargetException</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = ArrayList.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList list = (ArrayList) clazz.newInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Method method = clazz.getMethod(<span class="string">&quot;get&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(method.invoke(list, <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="泛型"><a class="markdownIt-Anchor" href="#泛型"></a> 泛型</h4>
<p>泛型是一种参数化类型的机制，提供了编译期的类型安全，确保只能把正确类型的对象放入集合中，从而避免了在运行时出现 <code>ClassCastException</code>。</p>
<p>通常情况下，一个编译器处理泛型有两种方式：<code>Code specialization</code> 和 <code>Code sharing</code>。</p>
<p><code>C++</code> 和 <code>C#</code> 使用 <code>Code specialization</code> 的处理机制，而 <code>Java</code> 使用的是 <code>Code sharing</code> 机制。</p>
<p><code>Code sharing</code> 方式为每个泛型类型创建唯一的字节码表示，并且将该泛型类型的实例都映射到这个唯一的字节码表示上。</p>
<p>将多种泛型类形实例映射到唯一的字节码表示是通过<strong>类型擦除</strong>实现的。</p>
<h5 id="什么是类型擦除"><a class="markdownIt-Anchor" href="#什么是类型擦除"></a> 什么是类型擦除</h5>
<p>虚拟机中没有泛型，只有普通类和普通方法，所有泛型类的类型参数在编译时都会被擦除，泛型类并没有自己独有的 <code>Class</code> 类对象。</p>
<p>比如并不存在 <code>List&lt;String&gt;.class</code> 或是 <code>List&lt;Integer&gt;.class</code>，而只有 <code>List.class</code>。</p>
<p>类型擦除可以避免类型膨胀。</p>
<h5 id="泛型中的通配符"><a class="markdownIt-Anchor" href="#泛型中的通配符"></a> 泛型中的通配符</h5>
<ul>
<li>
<p>限定通配符</p>
<p>对类型进行了限制，有两种限定通配符：</p>
<ol>
<li>
<p><code>List&lt;? extends T&gt;</code>：通过限定类型必须是 <code>T</code> 的子类来设定类型的上界</p>
</li>
<li>
<p><code>List&lt;? super T&gt;</code>：通过限定类型必须是 <code>T</code> 的父类来设定类型的下界</p>
</li>
</ol>
</li>
<li>
<p>非限定通配符 <code>&lt;?&gt;</code></p>
</li>
</ul>
<p>问题：可以把 <code>List&lt;String&gt;</code> 传递给一个接受 <code>List&lt;Object&gt;</code> 参数的方法吗</p>
<p>不能。但是可以传递给接受 <code>List</code> 或 <code>List&lt;?&gt;</code> 参数的方法。</p>
<h5 id="泛型数组"><a class="markdownIt-Anchor" href="#泛型数组"></a> 泛型数组</h5>
<p><code>Java</code> 中不支持泛型数组，也就是说：<code>List&lt;String&gt;[] ls = new ArrayList&lt;String&gt;[10];</code> 是不允许的。</p>
<p>但支持 <code>List&lt;String&gt;[] ls = new ArrayList[10]</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt;[] lsa = <span class="keyword">new</span> List&lt;String&gt;[<span class="number">10</span>]; <span class="comment">// Not really allowed.</span></span><br><span class="line">Object o = lsa;</span><br><span class="line">Object[] oa = (Object[]) o;</span><br><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">li.add(<span class="keyword">new</span> Integer(<span class="number">3</span>));</span><br><span class="line">oa[<span class="number">1</span>] = li; <span class="comment">// Unsound, but passes run time store check</span></span><br><span class="line">String s = lsa[<span class="number">1</span>].get(<span class="number">0</span>); <span class="comment">// Run-time error: ClassCastException.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;?&gt;[] lsa = <span class="keyword">new</span> List&lt;?&gt;[<span class="number">10</span>]; <span class="comment">// OK, array of unbounded wildcard type.</span></span><br><span class="line">Object o = lsa;</span><br><span class="line">Object[] oa = (Object[]) o;</span><br><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">li.add(<span class="keyword">new</span> Integer(<span class="number">3</span>));</span><br><span class="line">oa[<span class="number">1</span>] = li; <span class="comment">// Correct.</span></span><br><span class="line">String s = (String) lsa[<span class="number">1</span>].get(<span class="number">0</span>); <span class="comment">// Run time error, but cast is explicit.</span></span><br></pre></td></tr></table></figure>
<h4 id="java-8-新特性"><a class="markdownIt-Anchor" href="#java-8-新特性"></a> Java 8 新特性</h4>
<ol>
<li>
<p>接口的默认方法</p>
<blockquote>
<p>Java 8 允许为接口添加非抽象的方法实现，用 <code>default</code> 关键字修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   	<span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li>
<p>函数式编程</p>
<ul>
<li>Lambda 表达式</li>
<li>方法引用</li>
<li>函数式接口</li>
</ul>
</li>
<li>
<p>流编程</p>
</li>
</ol>
<h4 id="java-与-c-的区别"><a class="markdownIt-Anchor" href="#java-与-c-的区别"></a> Java 与 C++ 的区别</h4>
<ol>
<li>
<p>纯面向对象</p>
<blockquote>
<p>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object；</p>
<p>C++ 为了兼容 C 即支持面向对象也支持面向过程。</p>
</blockquote>
</li>
<li>
<p>跨平台</p>
<blockquote>
<p>Java 通过虚拟机从而实现跨平台特性；</p>
<p>C++ 依赖于特定的平台。</p>
</blockquote>
</li>
<li>
<p>指针</p>
<blockquote>
<p>Java 没有指针，它的引用可以理解为安全指针；</p>
<p>C++ 具有和 C 一样的指针。</p>
</blockquote>
</li>
<li>
<p>垃圾回收</p>
<blockquote>
<p>Java 支持自动垃圾回收；</p>
<p>C++ 需要手动回收。</p>
</blockquote>
</li>
<li>
<p>多重继承</p>
<blockquote>
<p>Java 不支持多重继承，但可以通过实现多个接口来达到相同目的；</p>
<p>C++ 支持多重继承。</p>
</blockquote>
</li>
<li>
<p>操作符重载</p>
<blockquote>
<p>Java 不支持操作符重载；</p>
<p>C++ 可以。</p>
</blockquote>
</li>
</ol>
<h4 id="对象的初始化"><a class="markdownIt-Anchor" href="#对象的初始化"></a> 对象的初始化</h4>
<p>假设有个 <code>Dog</code> 类，执行 <code>new Dog()</code> 会执行以下步骤：</p>
<ol>
<li>
<p>如果是<strong>首次创建 <code>Dog</code> 类型的对象</strong>或是<strong>首次访问 <code>Dog</code> 类的静态方法或属性</strong>时，JVM 查找并加载 <code>Dog.class</code>。</p>
</li>
<li>
<p>加载完 <code>Dog.class</code> 后，执行静态初始化语句（块）（只执行一次）。</p>
</li>
<li>
<p>在堆上为 <code>Dog</code> 分配足够的内存空间。</p>
</li>
<li>
<p>分配的存储空间首先会被清零，即会将 <code>Dog</code> 对象中的所有基本类型数据设置为默认值，引用被置为 <code>null</code>。</p>
</li>
<li>
<p>执行所有的初始化语句（块）。</p>
</li>
<li>
<p>执行构造器。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializeDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mug mug1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Mug mug2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 执行普通初始化语句（块），每 new 一个对象就执行一次</span></span><br><span class="line">    &#123;</span><br><span class="line">        mug1 = <span class="keyword">new</span> Mug(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;mug1 initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 1. 执行静态初始化语句（块），只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        mug2 = <span class="keyword">new</span> Mug(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;mug2 initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 执行构造器</span></span><br><span class="line">    InitializeDemo() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializeDemo()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InitializeDemo(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializeDemo(int)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside main()&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> InitializeDemo();</span><br><span class="line">        System.out.println(<span class="string">&quot;new InitializeDemo() completed&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> InitializeDemo(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;new InitializeDemo(1) completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mug</span> </span>&#123;</span><br><span class="line">    Mug(<span class="keyword">int</span> marker) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mug(&quot;</span> + marker + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java容器</title>
    <url>/archives/58b717aa.html</url>
    <content><![CDATA[<h3 id="概览"><a class="markdownIt-Anchor" href="#概览"></a> 概览</h3>
<p>Java 容器主要包括 <code>Collection</code> 和 <code>Map</code>。</p>
<h4 id="collection"><a class="markdownIt-Anchor" href="#collection"></a> <code>Collection</code></h4>
<p><img data-src="/archives/58b717aa/Collection.png" alt="Collection"></p>
<span id="more"></span>
<ol>
<li><strong>Set</strong></li>
</ol>
<ul>
<li>TreeSet：基于<strong>红黑树</strong>实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li>
<li>HashSet：基于<strong>哈希表</strong>实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>
<li>LinkedHashSet：具有 HashSet 的查找效率，并且内部使用<strong>双向链表</strong>维护元素的插入顺序。</li>
</ul>
<ol start="2">
<li><strong>List</strong></li>
</ol>
<ul>
<li>ArrayList：基于<strong>动态数组</strong>实现，支持随机访问。</li>
<li>Vector：和 ArrayList 类似，但它是<strong>线程安全</strong>的。</li>
<li>LinkedList：基于<strong>双向链表</strong>实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li>
</ul>
<ol start="3">
<li><strong>Queue</strong></li>
</ol>
<ul>
<li>LinkedList：可以用它来实现双向队列。</li>
<li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li>
</ul>
<h4 id="map"><a class="markdownIt-Anchor" href="#map"></a> <code>Map</code></h4>
<p><img data-src="/archives/58b717aa/Map.png" alt="Map"></p>
<ul>
<li><code>TreeMap</code>：基于<strong>红黑树</strong>实现。</li>
<li><code>HashMap</code>：基于<strong>哈希表</strong>实现。</li>
<li><code>HashTable</code>：和 <code>HashMap</code> 类似，但它是<strong>线程安全</strong>的，这意味着同一时刻多个线程同时写入 <code>HashTable</code> 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 <code>ConcurrentHashMap</code> 来支持线程安全，<code>ConcurrentHashMap</code> 的效率会更高，因为 <strong><code>ConcurrentHashMap</code> 引入了分段锁</strong>。</li>
<li><code>LinkedHashMap</code>：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（<code>LRU</code>）顺序。</li>
</ul>
<h3 id="源码分析"><a class="markdownIt-Anchor" href="#源码分析"></a> 源码分析</h3>
<h4 id="arraylist"><a class="markdownIt-Anchor" href="#arraylist"></a> <code>ArrayList</code></h4>
<p>基于数组实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用带参构造函数时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用默认构造函数时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来存储数据的数组，如果 elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，</span></span><br><span class="line"><span class="comment"> * 则在添加第一个数据后 ArrayList 的默认容量就为 DEFAULT_CAPACITY</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包含的元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>
<p><strong>添加元素</strong></p>
<p>添加元素时使用 <code>ensureCapacityInternal()</code> 方法来保证容量足够，如果不够，使用 <code>grow()</code> 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Fail-Fast</strong></p>
<p><code>modCount</code> 用来记录 <code>ArrayList</code> 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。</p>
<p>在进行序列化或者迭代等操作时，需要比较操作前后 <code>modCount</code> 是否改变，如果改变了需要抛出 <code>ConcurrentModificationException</code>。</p>
<p><strong>与 <code>Vector</code> 的比较</strong></p>
<ul>
<li><code>Vector</code> 是同步的，开销比 <code>ArrayList</code> 要大。最好使用 <code>ArrayList</code> 而不是 <code>Vector</code>，因为同步操作可以由程序员自己来控制；</li>
<li><code>Vector</code> 如果不带参数，扩容默认是原来大小的 2 倍（也可以通过构造函数设置增长的容量），而 <code>ArrayList</code> 是 1.5 倍。</li>
</ul>
<h4 id="linkedlist"><a class="markdownIt-Anchor" href="#linkedlist"></a> <code>LinkedList</code></h4>
<p>基于双向链表实现，使用 <code>Node</code> 存储节点信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>与 <code>ArrayList</code> 的比较</strong></p>
<p><code>ArrayList</code> 基于动态数组实现，<code>LinkedList</code> 基于双向链表实现。<code>ArrayList</code> 和 <code>LinkedList</code> 的区别可以归结为数组和链表的区别：</p>
<ul>
<li>数组支持随机访问，但插入删除的代价很高，需要移动大量元素，时间复杂度为 <code>O(N)</code>；</li>
<li>链表不支持随机访问，但插入删除只需要改变几个指针指向，时间复杂度为 <code>O(1)</code>。</li>
</ul>
<h4 id="copyonwritearraylist"><a class="markdownIt-Anchor" href="#copyonwritearraylist"></a> <code>CopyOnWriteArrayList</code></h4>
<p><strong>读写分离</strong></p>
<ul>
<li>
<p>写操作在一个<strong>复制数组</strong>上进行，读操作还是在原始数组中进行，读写分离，互不影响。</p>
</li>
<li>
<p>写操作需要<strong>加锁</strong>，防止并发写入时导致写入数据丢失。</p>
</li>
<li>
<p>写操作结束之后需要<strong>把原始数组指向复制数组</strong>。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CopyOnWriteArrayList</code> 在写操作的同时允许读操作，大大提高了读操作的性能，因此很<strong>适合读多写少的应用场景</strong>。</p>
<p><strong>缺陷</strong>：</p>
<ul>
<li>内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；</li>
<li>复制数据占用 <code>CPU</code> 资源：如果数据很多或很复杂，复制数据会很耗时；</li>
<li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。</li>
</ul>
<h4 id="hashmap"><a class="markdownIt-Anchor" href="#hashmap"></a> <code>HashMap</code></h4>
<p>基于 <strong>数组 + 链表 + 红黑树</strong> 实现</p>
<h5 id="存储结构"><a class="markdownIt-Anchor" href="#存储结构"></a> 存储结构</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;  <span class="comment">// 定位 Node[] table 索引位置</span></span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="确定索引位置"><a class="markdownIt-Anchor" href="#确定索引位置"></a> 确定索引位置</h5>
<p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要定位到索引位置，最直接的方法就是用其 <code>hashCode</code> 值对 <code>HashMap</code> 的数组长度进行取模运算，但是取模运算效率较低，<code>HashMap</code> 通过位运算来获取索引位置，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><p>索引位置的计算方式是 <code>i = (n - 1) &amp; hash</code>，而 <code>HashMap</code> 中 <code>n = tab.length</code> 总是 2 的幂方，保证了 <code>(n - 1) &amp; hash</code> 与 <code>hash % n</code> 的结果是一致的，但是 <code>&amp;</code> 运算效率比 <code>%</code> 运算更高，这就是为什么 <code>HashMap</code> 的 <code>capacity</code> 总是 2 的幂方的原因。</p>
</div>
<h5 id="put-方法"><a class="markdownIt-Anchor" href="#put-方法"></a> <code>put()</code> 方法</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 判断 table 是否为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 计算索引位置 i，并判断 p = tab[i] 是否为空。是，直接插入新节点</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">      	<span class="comment">// 判断节点是否已经存在</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">        		e = p;</span><br><span class="line">      	<span class="comment">// 判断是否是红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          	<span class="comment">// 	遍历链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">              	<span class="comment">// 尾插入</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                  	<span class="comment">// 链表长度如果大于阈值，转为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              	<span class="comment">// 找到已存在的节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">// 	已存在节点，更新 value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">  	<span class="comment">// size 加一，并判断是否需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="扩容"><a class="markdownIt-Anchor" href="#扩容"></a> 扩容</h5>
<p>和扩容有关的主要参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>capacity</code></td>
<td><code>table</code> 的容量大小，默认为 16。 <code>capacity</code> 保证为 2 的 n 次方。</td>
</tr>
<tr>
<td><code>size</code></td>
<td>键值对数量</td>
</tr>
<tr>
<td><code>loadFactor</code></td>
<td>装载因子。<code>table</code> 使用比例。</td>
</tr>
<tr>
<td><code>threshold</code></td>
<td><code>size</code> 的临界值，当 <code>size &gt;= threshold</code> 进行扩容操作。<code>threshold</code> = (<code>capacity * loadFactor</code>)</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Initializes or doubles table size. If null, allocates in accord with initial capacity target held in field threshold. Otherwise, because we are using power-of-two expansion, the elements from each bin must either stay at same index, or move with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">Returns: the table</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果原有容量已经是 MAXIMUM_CAPACITY，修改 threshold，这样之后就不会再有扩容操作</span></span><br><span class="line">        <span class="comment">// 然后直接返回旧数组，不扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">// 否则，新容量和新 threshold 都扩大一倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">  	<span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">           Node&lt;K,V&gt; e;</span><br><span class="line">           <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                   newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">               <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                   Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                   Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>Java 1.7</code>，<code>HashMap</code> 扩容后，同一条链表上的元素需要通过重新计算索引位置后，才能知道会被放在新数组的哪个位置。</p>
<p>而在 <code>Java 1.8</code> 中，不需要重新计算索引位置，只需判断之前计算得到的 <code>hashCode</code> 的下一位是 0 还是 1，即可知道在新数组中的位置。这里优化包括：</p>
<ul>
<li>省去重新计算索引位置的时间；</li>
<li>旧数组每个索引位置下的链表或红黑树中的节点会比较均匀地重新划分到新数组中。</li>
</ul>
<p>并且在 <code>Java 1.7</code> 中，<code>HashMap</code> 插入数据时是头插法，这样在 <code>rehash</code> 时，如果数据被分到同一个桶下，数据的相对位置会倒置；而 <code>Java 1.8</code> 采用的尾插法，<code>rehash</code> 不会导致倒置。</p>
<p><strong>与 <code>Hashtable</code> 的比较</strong></p>
<ul>
<li><code>Hashtable</code> 使用 <code>synchronized</code> 来进行同步。</li>
<li><code>HashMap</code> 可以插入键为 <code>null</code> 的 <code>Entry</code>。</li>
<li><code>HashMap</code> 的迭代器是 <code>fail-fast</code> 迭代器。</li>
<li><code>HashMap</code> 不能保证随着时间的推移 <code>Map</code> 中的元素次序是不变的。</li>
</ul>
<h4 id="concurrenthashmap"><a class="markdownIt-Anchor" href="#concurrenthashmap"></a> <code>ConcurrentHashMap</code></h4>
<p><code>ConcurrentHashMap</code> 和 <code>HashMap</code> 实现上类似，最主要的差别是 <code>ConcurrentHashMap</code> 采用了分段锁（<code>Segment</code>，继承 <code>ReentrantLock</code>），每个分段锁维护着几个桶，多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 <code>Segment</code> 的个数）。</p>
<p>与 <code>HashMap</code> 的比较</p>
<ul>
<li>Java 1.7 之前 <code>ConcurrentHashMap</code>对桶数组进行了分段(<code>Segment</code>)，每一个分段上都用 <code>lock</code> 锁进行保护，相对于<code>HashTable</code> 的 <code>synchronized</code> 锁的粒度更细一些，并发性能更好；从 1.8 开始摒弃了<code>Segment</code> 的概念，并发控制使用 <code>synchronized</code> 和 <code>CAS</code> 来实现。<code>HashMap</code> 没有锁机制，不是线程安全的。</li>
<li><code>HashMap</code> 的键值对允许为 <code>null</code>，而 <code>ConCurrentHashMap</code> 都不允许。</li>
</ul>
<img data-src="/archives/58b717aa/Java%207%E7%9A%84ConcurrentHashMap.png" alt="Java 7的ConcurrentHashMap结构" style="zoom:50%;">
<img data-src="/archives/58b717aa/Java%208%E7%9A%84ConcurrentHashMap.png" alt="Java 8的ConcurrentHashMap结构" style="zoom:50%;">
<h4 id="hashset"><a class="markdownIt-Anchor" href="#hashset"></a> <code>HashSet</code></h4>
<h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3>
<h4 id="collection-中的-foreach"><a class="markdownIt-Anchor" href="#collection-中的-foreach"></a> <code>Collection</code> 中的 <code>forEach</code></h4>
<p>以 <code>ArrayList</code> 为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        action.accept(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 <code>forEach</code> 遍历 <code>Collection</code> 时不能改变 <code>Collection</code> 的结构（即不能添加或删除元素），否则会报 <code>ConcurrentModificationException</code> 异常。</p>
<h4 id="hashmap-的-capacity-为什么设计成-2-的幂方"><a class="markdownIt-Anchor" href="#hashmap-的-capacity-为什么设计成-2-的幂方"></a> <code>HashMap</code> 的 <code>capacity</code> 为什么设计成 2 的幂方</h4>
<p>主要是为了在取模和扩容时做优化。同时为了减少冲突，<code>HashMap</code> 定位哈希桶索引位置时，让键的 <code>hashCode</code> 的高位也参与运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由源码可知，<code>HashMap</code> 在插入数据时，索引位置 <code>i = (n - 1) &amp; hash</code>，这也是为什么 <code>HashMap</code> 的 <code>capacity</code> 总是 2 的幂方的原因，因为只有当 <code>n (capacity)</code> 是 2 的幂方时，才能保证 <code>hash % n</code> 的结果与 <code>(n - 1) &amp; hash</code> 一致，而位运算的效率要高于取模运算。</p>
<h4 id="hashmap-是如何解决哈希冲突的"><a class="markdownIt-Anchor" href="#hashmap-是如何解决哈希冲突的"></a> <code>HashMap</code> 是如何解决哈希冲突的</h4>
<p>哈希：通过散列算法把任意长度的输入，变换成固定长度的输出，该输出就是散列值（哈希值）。</p>
<p>哈希冲突：两个不同的输入值，根据同一散列函数计算出相同的散列值的现象。</p>
<p><code>HashMap</code> 底层数据结构是<strong>数组 + 链表 + 红黑树</strong>，数组的每一个存储单元称为一个桶（<code>bucket</code>）。当向 <code>HashMap</code> 添加键值对时，会根据键的哈希值来定位应该放在哪个 <code>bucket</code> 对应的链表上。哈希值相同的对象组成一个链表，链表长度过长时，<code>HashMap</code> 的增删改查性能都会受到影响。为此，Java 1.8 进行了优化，规定当链表长度超过阈值时（默认为8）时，将链表转化为会红黑树，利用红黑树快速增删改查的特点提高 <code>HashMap</code> 的性能。</p>
<p><strong>拉链法</strong>和<strong>扰动</strong>可以让数据在 <code>bucket</code> 分布更均匀，减少哈希碰撞。</p>
<h4 id="hashmap-死循环"><a class="markdownIt-Anchor" href="#hashmap-死循环"></a> <code>HashMap</code> 死循环</h4>
<p>在并发场景中，使用 <code>HashMap</code> 可能导致死循环。</p>
<p>参考资料：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/VtIpj-uuxFj5Bf6TmTJMTw">HashMap 死循环</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java容器</category>
      </categories>
      <tags>
        <tag>Java容器</tag>
        <tag>ArrayList</tag>
        <tag>HashMap</tag>
        <tag>ConcurrentHashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring基础</title>
    <url>/archives/d607e27b.html</url>
    <content><![CDATA[<h4 id="spring-简介"><a class="markdownIt-Anchor" href="#spring-简介"></a> <code>Spring</code> 简介</h4>
<p>The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.</p>
<p>A key element of Spring is infrastructural support at the application level: Spring focuses on the “plumbing” of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.</p>
<span id="more"></span> 
<p><strong>Features</strong></p>
<ul>
<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html">Core technologies</a>: dependency injection, events, resources, i18n, validation, data binding, type conversion, SpEL, AOP.</li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/data-access.html">Data Access</a>: transactions, DAO support, JDBC, ORM, Marshalling XML.</li>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html">Spring MVC</a> and <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html">Spring WebFlux</a> web frameworks.</li>
</ul>
<img data-src="/archives/d607e27b/Spring%20Framework.png" alt="Spring Framework" style="zoom:50%;">
<h4 id="ioc"><a class="markdownIt-Anchor" href="#ioc"></a> <code>IoC</code></h4>
<p>控制反转（<code>Inversion of Control， IoC</code>)，把程序中对象的管理权力转移给外部容器。在 <code>Spring</code> 应用中，由 <code>Spring</code> 的 <code>IoC</code> 容器负责对象（组件）的创建、管理和配置。通过这种方式，降低了程序中对象之间的耦合。</p>
<ul>
<li>
<p>控制反转（<code>IoC</code>） 是一种设计思想。</p>
</li>
<li>
<p>没有 <code>IoC</code> 的面向对象开发中，对象的创建和对象之间的关系完全硬编码在程序中；</p>
<p>使用 <code>IoC</code> 后，对象的创建移交给第三方。</p>
</li>
<li>
<p><code>DI</code> 是 <code>IoC</code> 的一种实现方式。</p>
</li>
</ul>
<img data-src="/archives/d607e27b/Spring%20IoC%20container.png" alt="Spring IoC container" style="zoom:30%;">
<h5 id="ioc-简单示例"><a class="markdownIt-Anchor" href="#ioc-简单示例"></a> <code>IoC</code> 简单示例</h5>
<p><code>pojo</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p><code>dao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>daoImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认 UserDao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMysqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySql UserDao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoOracleImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle UserDao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>service</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>serviceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// userDao 由 Spring 容器注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不用 <code>IoC</code>，<code>userDao</code> 需要在 <code>UserServiceImpl</code> 中显示创建，耦合度高。</p>
<p><code>Spring</code> 中将对象的创建、管理交由容器实现。</p>
<p><code>applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        bean 由 Spring 容器创建的对象</span></span><br><span class="line"><span class="comment">        id 对象名</span></span><br><span class="line"><span class="comment">        property 为对象属性赋值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mysqlImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.dao.impl.UserDaoMysqlImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;oracleImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.dao.impl.UserDaoOracleImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ref 引用容器中配置好的其他 bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;oracleImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>Spring</code> 启动，读取配置文件后会创建三个 <code>bean</code>：<code>mysqlImpl</code>、<code>oracleImpl</code> 和 <code>userServiceImpl</code>。</p>
<p>并把 <code>oracleImpl</code> 注入到 <code>userServiceImpl</code>，这样就不用在 <code>userServiceImpl</code> 中显示创建和管理 <code>oracleImpl</code> 了，一切都交由 <code>Spring</code> 容器实现，开发人员可以把精力放在业务逻辑上。</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取 bean 实例</span></span><br><span class="line">        UserServiceImpl userServiceImpl = (UserServiceImpl) context.getBean(<span class="string">&quot;userServiceImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userServiceImpl.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="di"><a class="markdownIt-Anchor" href="#di"></a> <code>DI</code></h4>
<p><strong>Dependency injection (DI)</strong> is a process whereby objects define their dependencies (that is, the other objects with which they work) only through <strong>constructor arguments</strong>, <strong>arguments to a factory method</strong>, or <strong>properties that are set on the object instance</strong> after it is constructed or returned from a factory method.</p>
<p><strong>The container then injects those dependencies when it creates the bean.</strong> This process is fundamentally the inverse (hence the name, Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies on its own by using direct construction of classes or the Service Locator pattern.</p>
<p>DI exists in two major variants: <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-constructor-injection">Constructor-based dependency injection</a> and <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#beans-setter-injection">Setter-based dependency injection</a>.</p>
<h5 id="constructor-based-di"><a class="markdownIt-Anchor" href="#constructor-based-di"></a> <code>Constructor-based DI</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example 依赖 String</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring 容器通过构造函数注入 String</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Example</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要为这个 <code>Example</code> 注入 <code>String</code> 对象只能通过 <code>&lt;constructor-arg/&gt;</code> 方式，具体可以有三种形式：</p>
<ul>
<li>依赖对象参数位置 <code>index</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;index 注入&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>依赖对象类型 <code>type</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;type 注入&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>依赖对象名字 <code>name</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Example&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">name</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">value</span>=<span class="string">&quot;name 注入&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="setter-based-di"><a class="markdownIt-Anchor" href="#setter-based-di"></a> <code>Setter-based DI</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Example 依赖 String</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spring 容器通过 set 方法注入 String</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要为这个 <code>Example</code> 注入 <code>String</code> 对象只能通过 <code>&lt;property/&gt;</code> 方式。</p>
<p>看一个更具体的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address addr;</span><br><span class="line">    <span class="keyword">private</span> String[] book;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line">    <span class="keyword">private</span> String marry;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// get、set 方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>applicationContext.xml</code> 注入配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// 创建 Address 类型的 bean</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;杭州&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 普通属性名注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- bean 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- array 注入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;book&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- list 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>编程<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- map 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;身份证123&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;银行卡456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- set 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>王者荣耀<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>url<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- null 注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="基于配置文件的自动装配"><a class="markdownIt-Anchor" href="#基于配置文件的自动装配"></a> 基于配置文件的自动装配</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get 和 set 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要为 <code>People</code> 注入 <code>Cat</code> 和 <code>Dog</code>，显示的方式如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过<code>bean</code> 标签的 <code>autowire</code> 属性可以做到自动装配，<code>autowire</code> 可以取值：</p>
<ul>
<li><code>byName</code></li>
<li><code>byType</code></li>
</ul>
<h6 id="byname"><a class="markdownIt-Anchor" href="#byname"></a> <code>byName</code></h6>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>byName</code> 会在容器中查找 <code>id</code> 和 <code>set</code> 方法后面的值相等的 <code>bean</code>。</p>
<p>如 <code>People</code> 中有两个 <code>set</code> 方法：<code>setDog</code> 和 <code>setCat</code>。<code>Spring</code> 容器在为 <code>People</code> 注入 <code>Dog</code> 和 <code>Cat</code> 时会找 <code>id</code> 为 <code>dog</code> 和 <code>cat</code> 的 <code>bean</code>。</p>
<h6 id="bytype"><a class="markdownIt-Anchor" href="#bytype"></a> <code>byType</code></h6>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>byType</code> 会根据类型在容器中 <code>bean</code>，因为是根据类型查找，所以同一类型的 <code>bean</code> 只能有一个。</p>
<h5 id="基于注解的自动装配"><a class="markdownIt-Anchor" href="#基于注解的自动装配"></a> 基于注解的自动装配</h5>
<p>首先要开启注解配置功能，在 <code>applicationContext.xml</code> 配置文件中开启：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建 <code>component</code></p>
<p>在 <code>People</code>、<code>Dog</code>、<code>Cat</code> 类上加 <code>@Component</code> 注解，好让 <code>Spring</code> 能找到这些类并创建 <code>bean</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置类</p>
<ul>
<li><code>@Configuration</code> 注解表示这个类是个配置类，作用类似于配置文件</li>
<li><code>@ComponentScan</code> 注解添加要扫描的包，如果不添加就不能创建包下各个类的 <code>bean</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.tw.pojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">getPeople</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> People();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        People people = context.getBean(<span class="string">&quot;people&quot;</span>, People.class);</span><br><span class="line"></span><br><span class="line">        people.getCat().shout();</span><br><span class="line">        people.getDog().shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意生成 <code>ApplicationContext</code> 的方式是 ：</p>
<p><code>new AnnotationConfigApplicationContext(SpringConfig.class)</code>，</p>
<p>读取配置文件的方式是 ：</p>
<p><code>new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</code>。</p>
<h4 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> <code>AOP</code></h4>
<p><code>AOP</code> 的实现基于代理模式，所以需要先简单了解一下代理。</p>
<h5 id="代理模式"><a class="markdownIt-Anchor" href="#代理模式"></a> 代理模式</h5>
<p>代理分为静态代理和动态代理。</p>
<h6 id="静态代理"><a class="markdownIt-Anchor" href="#静态代理"></a> 静态代理</h6>
<img data-src="/archives/d607e27b/static-proxy.png" alt="静态代理" style="zoom:50%;">
<p>代理（中介）类和被代理（房东）类实现同一接口（接口），代理类为被代理类添加一些功能。</p>
<h6 id="动态代理"><a class="markdownIt-Anchor" href="#动态代理"></a> 动态代理</h6>
<h5 id="aop-概述"><a class="markdownIt-Anchor" href="#aop-概述"></a> <code>AOP</code> 概述</h5>
<p><strong>Aspect-oriented Programming (AOP)</strong> complements Object-oriented Programming (OOP) by providing another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the <strong>aspect</strong>.</p>
<p>AOP is used in the Spring Framework to:</p>
<ul>
<li><strong>Provide declarative enterprise services</strong>. The most important such service is <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/data-access.html#transaction-declarative">declarative transaction management</a>.</li>
<li>Let users <strong>implement custom aspects</strong>, complementing their use of OOP with AOP.</li>
</ul>
<mark class="label primary">简单概括：`Spring AOP` 在 `aspect` 中为满足 `pointcut` 规则的 `join point` 添加 `advice` 操作。</mark>
<h5 id="aop-中的核心概念"><a class="markdownIt-Anchor" href="#aop-中的核心概念"></a> <code>AOP</code> 中的核心概念</h5>
<h6 id="aspect切面"><a class="markdownIt-Anchor" href="#aspect切面"></a> <code>Aspect</code>：切面</h6>
<p><strong>A modularization of a concern that cuts across multiple classes</strong>.</p>
<p>事务管理就是一个很好的例子。</p>
<p>Spring provides simple and powerful ways of writing custom aspects by using either a <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#aop-schema">schema-based approach</a> or the <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/core.html#aop-ataspectj">@AspectJ annotation style</a>.</p>
<h6 id="join-point连接点"><a class="markdownIt-Anchor" href="#join-point连接点"></a> <code>Join Point</code>：连接点</h6>
<p><strong>A point during the execution of a program</strong>.</p>
<p>在 <code>Spring AOP</code> 中，通常是一个方法。</p>
<h6 id="advice通知"><a class="markdownIt-Anchor" href="#advice通知"></a> <code>Advice</code>：通知</h6>
<p><strong>Action taken by an aspect at a particular join point.</strong></p>
<p><code>Advice</code> 类型：</p>
<ul>
<li><code>around advice</code></li>
</ul>
<div class="note "><p>Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice.</p>
<p>Around advice can perform custom behavior before and after the method invocation.</p>
<p>It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.</p>
</div>
<ul>
<li><code>before advice</code></li>
</ul>
<div class="note "><p>Advice that runs before a join point but that does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).</p>
</div>
<ul>
<li>
<p><code>after advice</code></p>
<ul>
<li><code>After returning advice</code> : Advice to be run after a join point completes normally.</li>
<li><code>After throwing advice</code> : Advice to be executed if a method exits by throwing an exception.</li>
<li><code>After (finally) advice</code> : Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).</li>
</ul>
</li>
</ul>
<p><code>Spring AOP</code> 将 <code>advice</code> 建模为拦截器（<code>interceptor</code>），并围绕 <code>join point</code> 维护一条拦截器链。</p>
<h6 id="pointcut切入点"><a class="markdownIt-Anchor" href="#pointcut切入点"></a> <code>Pointcut</code>：切入点</h6>
<p><strong>A predicate that matches join points</strong>.</p>
<p><strong>Advice is associated with a pointcut expression and runs at any join point matched by the pointcut</strong>.</p>
<mark class="label primary">The concept of join points as matched by pointcut expressions is central to AOP</mark>, and Spring uses the AspectJ pointcut expression language by default.
<h6 id="target-object"><a class="markdownIt-Anchor" href="#target-object"></a> <code>Target Object</code></h6>
<p><strong>An object being advised by one or more aspects</strong>. （即被 <code>aspect</code> 增强的对象）</p>
<p>Also referred to as the “<strong>advised object</strong>”.</p>
<h6 id="aop-proxy"><a class="markdownIt-Anchor" href="#aop-proxy"></a> <code>AOP proxy</code></h6>
<p>An object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy is a JDK dynamic proxy or a CGLIB proxy.</p>
<h6 id="weaving"><a class="markdownIt-Anchor" href="#weaving"></a> <code>Weaving</code></h6>
<p><strong>linking aspects with other application types or objects to create an advised object</strong>.</p>
<h5 id="aspect-实现方式"><a class="markdownIt-Anchor" href="#aspect-实现方式"></a> <code>Aspect</code> 实现方式</h5>
<h6 id="aspectj-support-style"><a class="markdownIt-Anchor" href="#aspectj-support-style"></a> <code>@AspectJ support style</code></h6>
<p>在配置文件 <code>applicationContext.xml</code> 中配置 <code>@AspectJ support</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<mark class="label primary">创建 `Aspect`</mark>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotVeryUsefulAspect</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<mark class="label primary">创建 `Pointcut`</mark>
<p>Pointcuts determine join points of interest and thus enable us to control when advice executes.</p>
<p>Spring AOP only supports method execution join points for Spring beans.</p>
<p><code>Pointcut</code> 声明包括两部分：</p>
<ul>
<li><strong>a signature</strong> comprising a name and any parameters</li>
<li><strong>a pointcut expression</strong> that determines <strong>join point</strong></li>
</ul>
<p>In the @AspectJ annotation-style of AOP, a pointcut signature is provided by a regular method definition, and the pointcut expression is indicated by using the <code>@Pointcut</code> annotation (the method serving as <strong>the pointcut signature</strong> <strong>must have a <code>void</code> return type</strong>).</p>
<p>下面这个例子定义了一个名为 <code>anyOldTransfer</code> 的 <code>Pointcut</code>，匹配任何名为 <code>transfer</code> 方法的执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* transfer(..))&quot;)</span> <span class="comment">// the pointcut expression</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyOldTransfer</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// the pointcut signature</span></span><br></pre></td></tr></table></figure>
<p>一些常用的 <code>pointcut expression</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The execution of any public method</span></span><br><span class="line">execution(<span class="keyword">public</span> * *(..))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// The execution of any method with a name that begins with &#x27;set&#x27;</span></span><br><span class="line">execution(* set*(..))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// The execution of any method defined by the &#x27;AccountService&#x27; interface</span></span><br><span class="line">execution(* com.xyz.service.AccountService.*(..))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// The execution of any method defined in the `service` package</span></span><br><span class="line">execution(* com.xyz.service.*.*(..))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// The execution of any method defined in the service package or one of its sub-packages</span></span><br><span class="line">execution(* com.xyz.service..*.*(..))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Any join point (method execution only in Spring AOP) within the service package</span></span><br><span class="line">within(com.xyz.service.*)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Any join point (method execution only in Spring AOP) within the service package or one of its sub-packages</span></span><br><span class="line">within(com.xyz.service..*)</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<mark class="label primary">创建 `advice`</mark>
<p>Advice is associated with a pointcut expression and runs before, after, or around method executions matched by the pointcut.</p>
<ul>
<li>
<p><code>before advice</code></p>
</li>
<li>
<p><code>after advice</code></p>
</li>
<li>
<p><code>around advice</code></p>
</li>
</ul>
<h6 id="schema-based-approach"><a class="markdownIt-Anchor" href="#schema-based-approach"></a> <code>schema-based approach</code></h6>
<h5 id="aop-简单示例"><a class="markdownIt-Anchor" href="#aop-简单示例"></a> <code>AOP</code> 简单示例</h5>
<p><code>Target Object</code></p>
<p><code>UserServiceImpl</code> 是一个 <code>Target Object</code>，使用 <code>aspect</code> 为其增强功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Aspect</code>、<code>Pointcut</code> 和 <code>Advice</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationLog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.tw.service.impl.UserServiceImpl.*())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===执行前===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===执行后===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.log.AnnotationLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        UserService userService = context.getBean(<span class="string">&quot;userServiceImpl&quot;</span>, UserService.class);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">        userService.sub();</span><br><span class="line">        userService.mul();</span><br><span class="line">        userService.div();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="面试题"><a class="markdownIt-Anchor" href="#面试题"></a> 面试题</h4>
<h5 id="beanfactory-和-applicationcontext-的区别"><a class="markdownIt-Anchor" href="#beanfactory-和-applicationcontext-的区别"></a> <code>BeanFactory</code> 和 <code>ApplicationContext</code> 的区别</h5>
<h5 id="spring-bean-的生命周期"><a class="markdownIt-Anchor" href="#spring-bean-的生命周期"></a> <code>Spring Bean</code> 的生命周期</h5>
<h5 id="spring-bean-的作用域"><a class="markdownIt-Anchor" href="#spring-bean-的作用域"></a> <code>Spring Bean</code> 的作用域</h5>
<h5 id="spring-事务隔离"><a class="markdownIt-Anchor" href="#spring-事务隔离"></a> <code>Spring</code> 事务隔离</h5>
<h5 id="spring-事务传播机制"><a class="markdownIt-Anchor" href="#spring-事务传播机制"></a> <code>Spring</code> 事务传播机制</h5>
<h5 id="jdk-动态代理和-cglib-动态代理的区别"><a class="markdownIt-Anchor" href="#jdk-动态代理和-cglib-动态代理的区别"></a> <code>JDK</code> 动态代理和 <code>CGLIB</code> 动态代理的区别</h5>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis基础</title>
    <url>/archives/d2457c0e.html</url>
    <content><![CDATA[<h4 id="mybatis-概述"><a class="markdownIt-Anchor" href="#mybatis-概述"></a> <code>MyBatis</code> 概述</h4>
<ul>
<li>一款优秀的<strong>持久层框架</strong>。</li>
<li>支持自定义 <code>sql</code>、存储过程以及高级映射。</li>
<li>免除了几乎所有的 <code>JDBC</code> 代码以及设置参数和获取结果集的工作。</li>
<li>可以通过简单的 <code>XML</code> 或注解来配置和映射原生类型、接口和 <code>Java POJO</code>（<code>Plain Old Java Objects</code>，普通老式 <code>Java</code> 对象）为数据库中的记录。</li>
</ul>
<span id="more"></span>
<p>如果使用 <code>Maven</code> 来构建项目，在项目的 <code>pom.xml</code> 文件中添加如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="mybatis-简单使用"><a class="markdownIt-Anchor" href="#mybatis-简单使用"></a> <code>MyBatis</code> 简单使用</h4>
<h5 id="搭建环境"><a class="markdownIt-Anchor" href="#搭建环境"></a> 搭建环境</h5>
<p>创建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database mybatis;</span><br><span class="line"></span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">    id INT(20) not null primary key ,</span><br><span class="line">    name varchar(30) not null ,</span><br><span class="line">    password varchar(100) not null</span><br><span class="line">) engine &#x3D; INNODB default charset &#x3D; utf8;</span><br><span class="line"></span><br><span class="line">insert into user (id, name, password) values (1, &#39;z3&#39;, 1234);</span><br><span class="line">insert into user (id, name, password) values (2, &#39;l4&#39;, 1234);</span><br><span class="line">insert into user (id, name, password) values (3, &#39;w5&#39;, 1234);</span><br></pre></td></tr></table></figure>
<p>创建项目</p>
<ul>
<li>新建普通的 <code>Maven</code> 项目</li>
<li>删除 <code>src</code> 目录（用作父工程）</li>
<li>导入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="创建模块"><a class="markdownIt-Anchor" href="#创建模块"></a> 创建模块</h5>
<p>创建核心配置文件： <code>mybatis-config.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 每个 *Mapper.xml 文件都需要在这个核心配置文件中注册 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/tw/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="编写代码"><a class="markdownIt-Anchor" href="#编写代码"></a> 编写代码</h5>
<h6 id="mybatis-工具类"><a class="markdownIt-Anchor" href="#mybatis-工具类"></a> <code>MyBatis</code> 工具类</h6>
<p>主要用于获取 <code>sqlSession</code> 对象：<strong><code>sqlSession</code> 提供了在数据库执行 <code>sql</code> 命令所需的所有方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> sqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 sqlSessionFactory</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> sqlSessionFactoryBuilder().build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 sqlSession</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> sqlSession <span class="title">getsqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="pojo-user"><a class="markdownIt-Anchor" href="#pojo-user"></a> <code>pojo: User</code></h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">		<span class="comment">// getXXX() 和 setXXX() 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="dao-userdao"><a class="markdownIt-Anchor" href="#dao-userdao"></a> <code>dao: UserDao</code></h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="daoimpl-usermapperxml"><a class="markdownIt-Anchor" href="#daoimpl-usermapperxml"></a> <code>daoImpl: UserMapper.xml</code></h6>
<p><code>DaoImpl</code>：实现方式由原来的 <code>UserDaoImpl</code> 实现类改为 <code>UserMapper.xml</code> 配置文件</p>
<p>关键：</p>
<ul>
<li><code>namespace</code> 绑定 <code>Dao（Mapper）</code> 接口</li>
<li><code>id</code> 绑定 <code>Dao（Mapper）</code> 接口中的方法</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace 绑定一个 Dao（Mapper） 接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.tw.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 绑定 UserDao 的方法 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType 要指定返回类型的完全限定名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    	select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取 sqlSession 对象</span></span><br><span class="line">    sqlSession sqlSession = MybatisUtil.getsqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 执行 sql</span></span><br><span class="line">    UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;id&quot;</span>:2,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;l4&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:3,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;w5&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:4,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;z6&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:5,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;q7&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:6,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;s8&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:7,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;l9&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:8,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;z10&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:9,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1234&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;w11&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<h5 id="crud"><a class="markdownIt-Anchor" href="#crud"></a> <code>CRUD</code></h5>
<p><code>UserDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>UserMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.tw.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert user (username, password) values (#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.tw.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user set password = #&#123;password&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.tw.pojo.User&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="mybatis-核心配置文件"><a class="markdownIt-Anchor" href="#mybatis-核心配置文件"></a> <code>MyBatis</code> 核心配置文件</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis 核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每个 *Mapper.xml 文件都需要在这个核心配置文件中注册 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/tw/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="properties"><a class="markdownIt-Anchor" href="#properties"></a> <code>properties</code></h5>
<p>通过 <code>properties</code> 属性引用外部文件</p>
<p>如有一个数据库配置文件 <code>db.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure>
<p>在 <code>mybatis-config</code> 中引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="mappers"><a class="markdownIt-Anchor" href="#mappers"></a> <code>mappers</code></h5>
<p>在 <code>mybatis-config.xml</code> 中注册 mapper 映射文件</p>
<ul>
<li><strong>通过 <code>.xml</code> 文件注册（推荐使用）</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/tw/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>通过 <code>class</code> 注册</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方式有局限性：</p>
<ol>
<li><code>pojo</code> 实体类和对应的 <code>mapper</code> 映射文件名字必须一致，如 <code>UserMapper.java</code> 和 <code>UserMapper.xml</code></li>
<li><code>UserMapper.java</code> 和 <code>UserMapper.xml</code> 必须在同一个包下</li>
</ol>
<ul>
<li>通过 <code>package</code> 注册</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.tw.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="结果映射-resultmap"><a class="markdownIt-Anchor" href="#结果映射-resultmap"></a> 结果映射: <code>resultMap</code></h4>
<p><code>resultType</code> 将查询结果映射成 <code>pojo</code> 类型中，前提是该 <code>pojo</code> 类的<strong>属性名</strong>和查询的数据库表的<strong>字段名</strong>一致。适用于单表查询。</p>
<p>如果类的属性名和表的字段名不一致，就需要使用 <code>resultMap</code>。</p>
<p><code>user</code> 表的建表语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table mybatis.user</span><br><span class="line">(</span><br><span class="line">    &#96;id&#96;       int(20) auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    &#96;username&#96; varchar(30)  not null,</span><br><span class="line">    &#96;password&#96; varchar(100) not null</span><br><span class="line">) charset &#x3D; utf8;</span><br></pre></td></tr></table></figure>
<p>将 <code>User</code> 改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行之前的测试代码，输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;id&quot;</span>:2,<span class="string">&quot;password&quot;</span>:null,<span class="string">&quot;username&quot;</span>:null&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:3,<span class="string">&quot;password&quot;</span>:null,<span class="string">&quot;username&quot;</span>:null&#125;</span><br></pre></td></tr></table></figure>
<p>原因是在 <code>UserDaoMapper.xml</code> 中 <code>getUserList</code> 执行的 <code>sql</code> 语句是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure>
<p><code>sql</code> 语句展开为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id, name, pwd from user;</span><br></pre></td></tr></table></figure>
<p>而 <code>user</code> 表中是没有名为 <code>name</code> 和 <code>pwd</code> 字段的。</p>
<p>使用结果集映射 <code>resultMap</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结果集映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义主键，非常重要。如果主键包括多个字段，就定义多个 id --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- column 是表的字段，property 是类的属性，两者相同可以省略不写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">  	select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>resultMap</code> 更强大的功能在于将查询结果映射为复杂类型的 <code>pojo</code>。</p>
<h5 id="association"><a class="markdownIt-Anchor" href="#association"></a> <code>association</code></h5>
<h5 id="collection"><a class="markdownIt-Anchor" href="#collection"></a> <code>collection</code></h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;唯一的标识&quot;</span> <span class="attr">type</span>=<span class="string">&quot;映射的pojo对象&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;表的主键字段,或查询语句中的别名字段&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;字段类型&quot;</span> <span class="attr">property</span>=<span class="string">&quot;映射pojo对象的主键属性&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;表的一个字段&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;字段类型&quot;</span> <span class="attr">property</span>=<span class="string">&quot;映射到pojo对象的一个属性&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;pojo的对象属性&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;对象属性类型&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;关联pojo对象对应表的主键字段&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;字段类型&quot;</span> <span class="attr">property</span>=<span class="string">&quot;关联pojo对象的主键属性&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>  <span class="attr">column</span>=<span class="string">&quot;表的字段&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;字段类型&quot;</span> <span class="attr">property</span>=<span class="string">&quot;关联pojo对象的属性&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 集合中的property 需要为oftype定义的pojo对象的属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;pojo的集合属性名称&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;集合中的pojo对象类型&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;集合中pojo对象对应的表的主键字段&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;字段类型&quot;</span> <span class="attr">property</span>=<span class="string">&quot;集合中pojo对象的主键属性&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;任意表的字段&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;字段类型&quot;</span> <span class="attr">property</span>=<span class="string">&quot;集合中的pojo对象的属性&quot;</span> /&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="日志输出"><a class="markdownIt-Anchor" href="#日志输出"></a> 日志输出</h4>
<p><img data-src="/archives/d2457c0e/logImpl.png" alt="logImpl"></p>
<p>一般要求掌握 <code>LOG4J</code> 和 <code>STDOUT_LOGGING</code>。</p>
<p><code>STDOUT_LOGGING</code> 的配置很简单，在 <code>mybatis-config.xml</code> 文件中添加如下配置即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="log4j"><a class="markdownIt-Anchor" href="#log4j"></a> <code>LOG4J</code></h5>
<p>导入 <code>log4j</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>创建 <code>log4j.properties</code> 配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/kuang.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>在 <code>mybatis-config</code> 中配置 <code>log4j</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在要使用 <code>log4j</code> 的类中创建 <code>logger</code> 对象，如要在 <code>UserMapperTest</code> 类中使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure>
<h4 id="注解开发"><a class="markdownIt-Anchor" href="#注解开发"></a> 注解开发</h4>
<h5 id="简单使用"><a class="markdownIt-Anchor" href="#简单使用"></a> 简单使用</h5>
<p>在接口上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>mybatis-config.xml</code> 中绑定接口，因为没有对应的 <code>UserMapper.xml</code> 文件，所以只能通过 <code>class</code> 来绑定接口：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.tw.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="注解原理"><a class="markdownIt-Anchor" href="#注解原理"></a> 注解原理</h5>
<p>反射和代理。</p>
<h4 id="面试题"><a class="markdownIt-Anchor" href="#面试题"></a> 面试题</h4>
<h5 id="jdbc-的不足mybatis-是如何解决的"><a class="markdownIt-Anchor" href="#jdbc-的不足mybatis-是如何解决的"></a> <code>JDBC</code> 的不足，<code>MyBatis</code> 是如何解决的</h5>
<ul>
<li>
<p>数据库连接对象的频繁创建与释放，影响系统性能。</p>
<p>在 <code>mybatis-config.xml</code> 中配置数据链接池，使用连接池管理数据库连接。</p>
</li>
<li>
<p><code>sql</code> 语句硬编码，一旦发生变化，需要修改 <code>Java</code> 代码，并重新编译和发布。</p>
<p>将 <code>sql</code> 语句配置在 <code>*Mapper.xml</code> 文件中与 <code>Java</code> 代码分离。</p>
</li>
<li>
<p>向 <code>sql</code> 语句传参数麻烦，占位符需要和参数一一对应。</p>
<p><code>MyBatis</code> 自动将 <code>Java</code> 对象映射至 <code>sql</code> 语句。</p>
</li>
<li>
<p>对结果集解析麻烦，<code>sql</code> 变化导致解析代码变化。</p>
<p><code>Mybatis</code> 自动将 <code>sql</code> 执行结果映射至 <code>Java</code>对象。</p>
</li>
</ul>
<h5 id="mybatis-和-hibernate-的比较"><a class="markdownIt-Anchor" href="#mybatis-和-hibernate-的比较"></a> <code>MyBatis</code> 和 <code>Hibernate</code> 的比较</h5>
<p>两者都是持久层框架，对 <code>JDBC</code> 进行了封装。</p>
<p>不同之处：</p>
<ol>
<li>映射关系：
<ul>
<li><code>MyBatis</code> 是一个半自动映射的框架，配置 <code>Java</code> 对象与 <code>sql</code> 语句执行结果的对应关系，多表关联关系配置简单</li>
<li><code>Hibernate</code> 是一个全自动映射的框架，配置 <code>Java</code> 对象与数据库表的对应关系，多表关联关系配置复杂</li>
</ul>
</li>
<li><code>sql</code> 优化和移植性
<ul>
<li><code>MyBatis</code> 需要手动编写 <code>sql</code>，支持动态 <code>sql</code>、处理列表、动态生成表名、支持存储过程。直接使用 <code>sql</code> 语句操作数据库，不支持数据库无关性，但 <code>sql</code>语句优化容易。</li>
<li><code>Hibernate</code> 对 <code>sql</code> 语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 <code>HQL（Hibernate Query Language）</code>操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但 <code>sql</code> 语句优化困难。</li>
</ul>
</li>
<li>难易程度
<ul>
<li><code>MyBatis</code> 是轻量级框架，学习使用门槛低，适合于需求变化频繁，大型的项目。</li>
<li><code>Hibernate</code> 是重量级框架，学习使用门槛高，适合于需求相对稳定，中小型的项目。</li>
</ul>
</li>
</ol>
<h5 id="mybatis-工作原理"><a class="markdownIt-Anchor" href="#mybatis-工作原理"></a> <code>MyBatis</code> 工作原理</h5>
<img data-src="/archives/d2457c0e/MyBatis%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="MyBatis工作原理" style="zoom: 45%;">
<h5 id="mybatis-延迟加载"><a class="markdownIt-Anchor" href="#mybatis-延迟加载"></a> <code>MyBatis</code> 延迟加载</h5>
<p><code>MyBatis</code> 仅支持 <code>association</code> 关联对象和 <code>collection</code> 关联集合对象的延迟加载。</p>
<p><code>association</code> 是一对一查询，<code>collection</code> 是一对多查询。</p>
<h5 id="mybatis-都有哪些-executor-执行器"><a class="markdownIt-Anchor" href="#mybatis-都有哪些-executor-执行器"></a> <code>Mybatis</code> 都有哪些 <code>Executor</code> 执行器</h5>
<ul>
<li>
<p><code>SimpleExecutor</code>：每执行一次 <code>sql</code>，就开启一个 <code>Statement</code> 对象，用完立刻关闭 <code>Statement</code> 对象。</p>
</li>
<li>
<p><code>ReuseExecutor</code>：执行 <code>sql</code>，以 <code>sql</code> 为 <code>key</code> 查找 <code>Statement</code> 对象，存在就使用，不存在就创建，用完后，不关闭 <code>Statement</code> 对象，而是放置于 <code>Map&lt;String, Statement&gt;</code> 内，供下一次使用。</p>
</li>
</ul>
<p><code>BatchExecutor</code>：执行 <code>update</code>，将所有 <code>sql</code> 都添加到批处理中，等待统一执行。</p>
<h5 id="传递多个参数"><a class="markdownIt-Anchor" href="#传递多个参数"></a> 传递多个参数</h5>
<h6 id="按照参数顺序传参"><a class="markdownIt-Anchor" href="#按照参数顺序传参"></a> 按照参数顺序传参</h6>
<p><code>Dao</code> 接口中的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">(String name, <span class="keyword">int</span> deptId)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>Mapper.xml</code> 中的查询语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    where user_name = #&#123;0&#125; and dept_id = #&#123;1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>不建议使用，<code>sql</code> 表达不直观。</p>
<h6 id="param-注解传参法"><a class="markdownIt-Anchor" href="#param-注解传参法"></a> <code>@Param</code> 注解传参法</h6>
<p><code>Dao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">(<span class="meta">@Param(&quot;userName&quot;)</span> String name, <span class="keyword">int</span> <span class="meta">@Param(&quot;deptId&quot;)</span> deptId)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>Mapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    where user_name = #&#123;userName&#125; and dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="map-传参"><a class="markdownIt-Anchor" href="#map-传参"></a> <code>Map</code> 传参</h6>
<p><code>Dao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>Mapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    where user_name = #&#123;userName&#125; and dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="java-bean-传参法"><a class="markdownIt-Anchor" href="#java-bean-传参法"></a> <code>Java Bean</code> 传参法</h6>
<p><code>Dao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectUser</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>Mapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    where user_name = #&#123;userName&#125; and dept_id = #&#123;deptId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>#&#123;&#125;</code> 里面的名称对应的是 <code>User</code> 类里面的成员属性。</p>
<h5 id="实体类书属性名和表的字段名不一致"><a class="markdownIt-Anchor" href="#实体类书属性名和表的字段名不一致"></a> 实体类书属性名和表的字段名不一致</h5>
<ol>
<li>在 <code>sql</code> 语句中为字段定义别名</li>
<li>使用 <code>resultMap</code> 映射属性名和字段名</li>
</ol>
<h6 id="动态-sql"><a class="markdownIt-Anchor" href="#动态-sql"></a> 动态 <code>sql</code></h6>
<h5 id="和-的区别"><a class="markdownIt-Anchor" href="#和-的区别"></a> <code>#&#123;&#125;</code> 和 <code>$&#123;&#125;</code> 的区别</h5>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li><a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis中文文档</a></li>
<li><a href="https://github.com/mybatis/mybatis-3">Github-mybatis</a></li>
</ul>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>锁</title>
    <url>/archives/d6e0ce95.html</url>
    <content><![CDATA[<p><code>Java</code> 中的锁因其特性不同，在不同场景选择合适的锁，可以提高程序的性能。</p>
<img data-src="/archives/d6e0ce95/Java%E4%B8%AD%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB.png" alt="Java中锁的分类" style="zoom:67%;">
<span id="more"></span>
<h4 id="悲观锁vs乐观锁"><a class="markdownIt-Anchor" href="#悲观锁vs乐观锁"></a> 悲观锁vs乐观锁</h4>
<h5 id="悲观锁"><a class="markdownIt-Anchor" href="#悲观锁"></a> 悲观锁</h5>
<p>悲观的并发策略，认为只要不加锁，就肯定会出现问题。所以无论共享数据是否真的会出现竞争，都要进行加锁。</p>
<p><code>Java</code> 中 <code>synchronized</code> 和 <code>Lock</code> 的实现类都是悲观锁。</p>
<h5 id="乐观锁"><a class="markdownIt-Anchor" href="#乐观锁"></a> 乐观锁</h5>
<p>对于数据冲突保持一种乐观态度，操作数据时不会对操作的数据进行加锁（这使得多个任务可以并行的对数据进行操作），只有到数据提交的时候才通过一种机制来验证数据是否存在冲突。</p>
<p>通过 <a href="/archives/969d9481.html">CAS</a> 实现。</p>
<h5 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h5>
<p>悲观锁适用于竞争激烈、对数据修改比较频繁的场景，这种场景下使用悲观锁可以避免大量无用的反复尝试带来的消耗。</p>
<p>乐观锁适用于竞争不是很激烈、对数据修改不是很频繁的场景，这种场景下乐观锁的不加锁特点可以大幅提高性能。</p>
<h4 id="公平锁vs非公平锁"><a class="markdownIt-Anchor" href="#公平锁vs非公平锁"></a> 公平锁vs非公平锁</h4>
<h5 id="公平锁"><a class="markdownIt-Anchor" href="#公平锁"></a> 公平锁</h5>
<p>申请锁的线程的按照申请顺序排队依次获得锁。</p>
<h5 id="非公平锁"><a class="markdownIt-Anchor" href="#非公平锁"></a> 非公平锁</h5>
<p>线程可以插队。</p>
<div class="note "><p>需要注意的是，线程并不是可以随便插队，插队要看时机。</p>
<p>假设线程在请求锁时，锁恰好被释放，那么线程就可以直接获得锁；但是如果请求锁时，锁依然被占用，那么线程依然会进入等待队列。</p>
<p>为什么需要非公平锁？</p>
<p>因为唤醒阻塞的线程是一个耗时的行为，如果同步代码块可以在很短时间内执行完，那么插队线程完全有可能在线程被唤醒之前将代码执行完并释放锁，这样等阻塞线程被唤醒时依然可以立即获得锁，这样可以避免让插队线程陷入阻塞，从而提高整体的运行效率。</p>
</div>
<p><code>synchronized</code> 是非公平锁，<code>ReentrantLock</code> 默认也是非公平的，但是可以设置为公平的。</p>
<h5 id="比较-2"><a class="markdownIt-Anchor" href="#比较-2"></a> 比较</h5>
<table>
<thead>
<tr>
<th></th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>公平锁</td>
<td>每个线程都有执行的机会</td>
<td>唤醒阻塞线程时无事可做，吞吐量小</td>
</tr>
<tr>
<td>非公平锁</td>
<td>可以充分利用线程被唤醒的时间，吞吐量大</td>
<td>有可能产生线程饥饿</td>
</tr>
</tbody>
</table>
<h5 id="源码分析"><a class="markdownIt-Anchor" href="#源码分析"></a> 源码分析</h5>
<p>以 <code>ReentrantLock</code> 为例来分析公平锁和非公平锁的实现机制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Synchronizer providing all implementation mechanics */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line"> 		<span class="comment">/** Base of synchronization control for this lock. </span></span><br><span class="line"><span class="comment"> 		  * Subclassed into fair and nonfair versions below. </span></span><br><span class="line"><span class="comment"> 		  * Uses AQS state to represent the number of holds on the lock. </span></span><br><span class="line"><span class="comment"> 		  */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sync object for non-fair locks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sync object for fair locks</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>ReentrantLock</code> 中有一个静态内部类 <code>Sync</code> ，这个类继承自 <code>AbstractQueuedSynchronizer</code>（<code>AQS</code>）。</p>
<p><code>ReentrantLock</code> 的同步控制操作就是在 <code>Sync</code> 中实现的。</p>
<p><code>Sync</code> 有两个子类 <code>FairSync</code> 和 <code>NonFairSync</code>。<code>ReentrantLock</code> 默认使用 <code>NonFairSync</code>，也可以通过构造函数使用 <code>FairSync</code>。</p>
<p>下面看一下公平锁和非公平锁的加锁源码。</p>
<p><code>nonfairTryAcquire()</code> 在 <code>Sync</code> 类中实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>tryAcquire()</code> 在 <code>FairSync</code> 类中实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过比较可以看出：</p>
<ul>
<li>非公平锁总是先尝试获取锁，获取失败再进入队列排队；</li>
<li>而公平锁会先通过 <code>!hasQueuedPredecessors()</code> 判断一下排队队列是否为空 ，如果队列为空再尝试获取锁；否则，直接进入队列排队。</li>
</ul>
<p>不过需要注意的是，如果线程通过 <code>tryLock</code> 来获取锁，那事先设定锁是公平的就不起作用了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sync.nonfairTryAcquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从源码中可以看出，<code>tryLock()</code> 是通过调用 <code>sync.nonfairTryAcquire(1)</code> 来获取锁的。</p>
<h4 id="可重入锁vs不可重入锁"><a class="markdownIt-Anchor" href="#可重入锁vs不可重入锁"></a> 可重入锁vs不可重入锁</h4>
<h5 id="可重入锁"><a class="markdownIt-Anchor" href="#可重入锁"></a> 可重入锁</h5>
<p>指一个线程当前已经持有一把锁，可以在不释放锁的情况下，重新获得这把锁。</p>
<p><code>synchronized</code> 和 <code>ReentrantLock</code> 都是可重入锁。</p>
<h4 id="共享锁vs独占锁"><a class="markdownIt-Anchor" href="#共享锁vs独占锁"></a> 共享锁vs独占锁</h4>
<h5 id="共享锁"><a class="markdownIt-Anchor" href="#共享锁"></a> 共享锁</h5>
<p>一把锁可以同时被多个线程获取。</p>
<p>读写锁（<code>ReadWriteLock</code>）中的读锁（<code>ReadLock</code>）是共享锁。</p>
<h5 id="独占锁"><a class="markdownIt-Anchor" href="#独占锁"></a> 独占锁</h5>
<p>同一时间只能被一个线程持有。</p>
<p>读写锁（<code>ReadWriteLock</code>）中的写锁（<code>WriteLock</code>）是独占锁。</p>
<h5 id="源码分析-2"><a class="markdownIt-Anchor" href="#源码分析-2"></a> 源码分析</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantReadWriteLock</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ReadWriteLock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6992448646407690164L</span>;</span><br><span class="line">    <span class="comment">/** Inner class providing readlock */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line">    <span class="comment">/** Inner class providing writelock */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line">    <span class="comment">/** Performs all synchronization mechanics */</span></span><br><span class="line">    <span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">        readerLock = <span class="keyword">new</span> ReadLock(<span class="keyword">this</span>);</span><br><span class="line">        writerLock = <span class="keyword">new</span> WriteLock(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ReentrantReadWriteLock.<span class="function">WriteLock <span class="title">writeLock</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> writerLock; &#125;</span><br><span class="line">    <span class="keyword">public</span> ReentrantReadWriteLock.<span class="function">ReadLock  <span class="title">readLock</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> readerLock; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6317671515068378041L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 锁的 state 被分为两部分，高 16 位表示读锁的重入次数，低 16 位表示写锁的重入次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_SHIFT   = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_UNIT    = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT);  <span class="comment">// 读锁</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_COUNT      = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCLUSIVE_MASK = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;  <span class="comment">// 写锁</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 返回读锁重入次数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sharedCount</span><span class="params">(<span class="keyword">int</span> c)</span>    </span>&#123; <span class="keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;</span><br><span class="line">    <span class="comment">/** 返回写锁重入次数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">exclusiveCount</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123; <span class="keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HoldCounter</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> tid = getThreadId(Thread.currentThread());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalHoldCounter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">ThreadLocal</span>&lt;<span class="title">HoldCounter</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> HoldCounter <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HoldCounter();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ThreadLocalHoldCounter readHolds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HoldCounter cachedHoldCounter;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Thread firstReader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> firstReaderHoldCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从源码中可以看出 <code>ReentrantReadWriteLock</code> 中有两把锁：<code>ReentrantReadLock</code> 和 <code>ReentrantWriteLock</code>。</p>
<p><code>ReentrantLock</code> 中的 <code>state</code> 用来表示获取锁的重入次数；而 <code>ReentrantReadWriteLock</code> 将 <code>state</code> 切割成两部分，高 16 位用来表示读锁状态，低 16 位用来表示写锁状态。</p>
<p>现在来看一下获取写锁的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">int</span> w = exclusiveCount(c);  <span class="comment">// 获取写锁的状态</span></span><br><span class="line">    <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;  <span class="comment">// 已有线程获取了锁</span></span><br><span class="line">        <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">        <span class="comment">// 如果写锁为 0，或者当前线程不是持有锁的线程，返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        <span class="comment">// Reentrant acquire</span></span><br><span class="line">        setState(c + acquires);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (writerShouldBlock() ||  <span class="comment">// 判断有没有线程在等待获取写锁</span></span><br><span class="line">        !compareAndSetState(c, c + acquires))  <span class="comment">// 或者通过 CAS 更改 state 失败，返回 false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    setExclusiveOwnerThread(current);  <span class="comment">// 更新 state，并将当前线程设为锁的持有者</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体流程：</p>
<ol>
<li>如果已经有线程持有读锁，或持有写锁的线程不是当前线程，返回 <code>false</code>；</li>
<li>写锁的重入次数达到最大（<code>2^16</code> - 1），返回 <code>false</code>；</li>
<li>判断有没有线程已经在排队等待获取写锁，如果有，返回 <code>false</code>；</li>
<li>通过 <code>CAS</code> 修改写锁状态，如果失败，返回 <code>false</code>；</li>
<li>如果前面几步都没有返回 <code>false</code>，设置当前线程为写锁的持有者。</li>
</ol>
<p>读锁源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();  <span class="comment">// 获取锁的状态</span></span><br><span class="line">    <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;  <span class="comment">// 写锁状态不为 0，且写锁持有者不是当前线程，返回 false</span></span><br><span class="line">        getExclusiveOwnerThread() != current)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r = sharedCount(c);  <span class="comment">// 获取读锁状态</span></span><br><span class="line">    <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;  <span class="comment">// 读线程不用阻塞</span></span><br><span class="line">        r &lt; MAX_COUNT &amp;&amp;  <span class="comment">// 读锁次数未满 MAX_COUNT</span></span><br><span class="line">        compareAndSetState(c, c + SHARED_UNIT)) &#123;  <span class="comment">// 设置读锁状态成功</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;  <span class="comment">// 如果读锁状态为 0</span></span><br><span class="line">            firstReader = current;  <span class="comment">// 将当前线程设为第一个读线程</span></span><br><span class="line">            firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;  <span class="comment">// 否则，如果第一个读线程是当前线程</span></span><br><span class="line">            firstReaderHoldCount++;  <span class="comment">// 第一个读线程持有次数加 1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                readHolds.set(rh);</span><br><span class="line">            rh.count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体流程：</p>
<ol>
<li>如果已经有线程持有写锁，获取读锁失败，返回 -1；</li>
<li>如果持有写锁的线程不是当前线程，失败，返回 -1；</li>
<li></li>
</ol>
<h5 id="读锁是否能插队"><a class="markdownIt-Anchor" href="#读锁是否能插队"></a> 读锁是否能插队</h5>
<p><code>ReentrantReadWriteLock</code> 是 <code>ReadWriteLock</code> 的实现类，默认是非公平锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">    readerLock = <span class="keyword">new</span> ReadLock(<span class="keyword">this</span>);</span><br><span class="line">    writerLock = <span class="keyword">new</span> WriteLock(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读写锁在获取锁之前会用通过 <code>readershouldBlock()</code> 和 <code>writerShouldBock()</code> 判断是否已经有线程在排队。</p>
<p>公平锁中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2274990926593161451L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，在公平锁下，只要已经有线程在排队，想获取读锁或写锁的线程都会阻塞。</p>
<p>非公平锁中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8159625535654395037L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// writers can always barge</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> apparentlyFirstQueuedIsExclusive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在非公平锁中，想获取写锁的线程可以插队；</p>
<p>想获取读锁的线程需要看阻塞队列中队首线程是否在等待写锁，如果有，就不能插队，这样做是为了避免想获取写锁的排队线程进入饥饿状态。因为后续可能一直有读线程过来，如果一直运行插队，写线程就会一直阻塞。</p>
<h5 id="读写锁的降级"><a class="markdownIt-Anchor" href="#读写锁的降级"></a> 读写锁的降级</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachedData</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object data;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> cacheValid;</span><br><span class="line">    <span class="keyword">final</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processCachedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        rwl.readLock().lock();</span><br><span class="line">        <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">            <span class="comment">// 在获取写锁之前，必须首先释放读锁。</span></span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">            rwl.writeLock().lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 这里需要再次判断数据的有效性,因为在我们释放读锁和获取写锁的空隙之内，可能有其</span></span><br><span class="line">                <span class="comment">// 他线程修改了数据。</span></span><br><span class="line">                <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">                    data = <span class="keyword">new</span> Object();</span><br><span class="line">                    cacheValid = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 在不释放写锁的情况下，直接获取读锁，这就是读写锁的降级。</span></span><br><span class="line">                rwl.readLock().lock(); </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放写锁，但是依然持有读锁</span></span><br><span class="line">                rwl.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放读锁</span></span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为何需要锁的降级：修改完数据后，将写锁降级为读锁，这样不会阻塞后续的读线程，提高并发度。</p>
<h4 id="synchronized-实现原理"><a class="markdownIt-Anchor" href="#synchronized-实现原理"></a> <code>synchronized</code> 实现原理</h4>
<p>同步方法通过 <code>ACC_SYNCHRONIZED</code> 关键字隐式的对方法进行加锁。当线程要执行的方法被标注上 <code>ACC_SYNCHRONIZED</code> 时，需要先获得锁才能执行该方法。</p>
<p>同步代码块通过 <code>monitorenter</code> 和 <code>monitorexit</code> 执行来进行加锁。当线程执行到 <code>monitorenter</code> 的时候要先获得所锁，才能执行后面的方法。当线程执行到 <code>monitorexit</code> 的时候则要释放锁。</p>
<h5 id="java-对象模型"><a class="markdownIt-Anchor" href="#java-对象模型"></a> <code>Java</code> 对象模型</h5>
<p>在 <code>HotSpot</code> 中， <code>Java</code> 对象模型包括三部分：对象头、实例数据和对齐填充。</p>
<p>对象头又包括两部分：</p>
<ul>
<li><code>Mark Word</code> ：存储对象自身的运行时数据；</li>
<li><code>Klass Pointer</code>：指向类的元数据指针。</li>
</ul>
<p>对象在不同状态时的 <code>Mark Word</code> 结构：</p>
<img data-src="/archives/d6e0ce95/Mark%20Word%E7%BB%93%E6%9E%84.png" alt="Mark Word" style="zoom:50%;">
<h5 id="monitor"><a class="markdownIt-Anchor" href="#monitor"></a> <code>monitor</code></h5>
<p><code>Java</code> 中每个对象都有一个 <code>monitor</code> 与之关联，当一个对象的 <code>monitor</code> 被获取后，该对象将处于锁定状态。</p>
<p>在 <code>HotSpot</code> 中，<code>monitor</code> 是基于 <code>ObjectMonitor</code> 实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">  _header       = NULL;</span><br><span class="line">  _count        = <span class="number">0</span>;</span><br><span class="line">  _waiters      = <span class="number">0</span>,</span><br><span class="line">  _recursions   = <span class="number">0</span>;  <span class="comment">// 锁的重入次数</span></span><br><span class="line">  _object       = NULL;</span><br><span class="line">  _owner        = NULL;  <span class="comment">// 持有对象 monitor 的线程</span></span><br><span class="line">  _WaitSet      = NULL;  <span class="comment">// 处于 wait 状态的线程队列</span></span><br><span class="line">  _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">  _Responsible  = NULL ;</span><br><span class="line">  _succ         = NULL ;</span><br><span class="line">  _cxq          = NULL ;</span><br><span class="line">  FreeNext      = NULL ;</span><br><span class="line">  _EntryList    = NULL ;  <span class="comment">// 处于 blocked 状态的线程队列</span></span><br><span class="line">  _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">  _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">  OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>多个线程同时访问一段同步代码时，线程进入 <code>_EntryList</code> 队列中；</li>
<li>某个线程获取到对象的 <code>monitor</code> 后，<code>_Owner</code> 指向当前线程，同时 <code>monitor</code> 中的计数器 <code>_count</code> 加1；</li>
<li>若持有 <code>monitor</code> 的线程在对象上调用 <code>wait()</code> 方法，将释放该对象 <code>monitor</code>，<code>_owner</code> 变量恢复为 <code>null</code>，<code>_count</code>自减1，同时该线程进入 <code>_WaitSet</code> 集合中等待被唤醒。</li>
</ul>
<img data-src="/archives/d6e0ce95/%E7%BA%BF%E7%A8%8B%E8%8E%B7%E5%8F%96%E9%94%81%E4%B8%8E%E9%87%8A%E6%94%BE%E9%94%81.png" alt="线程获取锁与释放锁" style="zoom:50%;">
<p><code>sychronized</code> 加锁的时候，会调用 <code>objectMonitor</code> 的 <code>enter</code> 方法，解锁的时候会调用 <code>exit</code> 方法。事实上，只有在 <code>JDK1.6</code> 之前，<code>synchronized</code> 的实现才会直接调用 <code>ObjectMonitor</code> 的 <code>enter</code> 和 <code>exit</code>，这种锁被称之为重量级锁。</p>
<h4 id="synchronized-优化"><a class="markdownIt-Anchor" href="#synchronized-优化"></a> <code>synchronized</code> 优化</h4>
<h5 id="自旋锁"><a class="markdownIt-Anchor" href="#自旋锁"></a> 自旋锁</h5>
<p>线程的阻塞和唤醒会使 <code>CPU</code> 从用户态陷入内核态，频繁的阻塞和唤醒操作对 <code>CPU</code> 来说开销很大。</p>
<p>在许多场景中，共享资源的锁定时间只会持续很短时间。为了这一小段时间去阻塞或唤醒线程，可能会得不偿失。在这样的场景下，为了避免 <code>CPU</code> 状态的转换，可以尝试让等待获取锁的线程不放弃 <code>CPU</code> 时间，而是一直自旋，通过反复尝试获取锁。</p>
<p>自旋锁虽然避免了切换线程带来的开销，但自旋占用了 <code>CPU</code> 的时间。如果持有锁的线程很快释放了锁，自旋锁的效率就很高；反之，自旋的线程就会白白消耗处理器的资源，反而会降低性能。所以一般自旋需要限定一段时间或限定自旋的次数，超过规定的时间或次数，还没有获得锁的话就将自旋的线程挂起。</p>
<h5 id="适应性自旋"><a class="markdownIt-Anchor" href="#适应性自旋"></a> 适应性自旋</h5>
<p>适应性自旋锁的工作原理大概是这样的：</p>
<p>对于某个锁，如果自旋成功，那么下次在获取该锁时就会自旋更久，因为虚拟机认为既然上次自旋成功，那么这次自旋也很可能会成功；</p>
<p>反之，如果对于某个锁的获取很少自旋成功，那么下次获取该锁时就自旋很少的时间或在压根不自旋，直接挂起线程，以免自旋浪费时间。</p>
<h5 id="无锁"><a class="markdownIt-Anchor" href="#无锁"></a> 无锁</h5>
<p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>
<p>无锁也就是乐观锁，<code>Java</code> 中通过 <code>CAS</code> 实现无锁（乐观锁）。</p>
<h5 id="偏向锁"><a class="markdownIt-Anchor" href="#偏向锁"></a> 偏向锁</h5>
<p>共享资源一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p>
<p>获取偏向锁的流程：</p>
<ol>
<li>查看 <code>Mark Word</code> 中偏向锁的标识以及锁标志位，判断该锁是否为可偏向状态；</li>
<li>如果可偏向状态，查看 <code>Mark Word</code> 中的线程 <code>ID</code>，若相同，执行同步代码，否则，进入下一步；</li>
<li>当前线程通过 <code>CAS</code> 操作竞争锁，若竞争成功，则将 <code>Mark Word</code> 中线程 <code>ID</code> 设置为当前线程<code>ID</code>，然后执行同步代码，若竞争失败，进入下一步。</li>
<li>当前线程通过 <code>CAS</code> 竞争锁失败的情况下，说明有竞争。当到达全局安全点时之前获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码。</li>
</ol>
<h5 id="轻量级锁"><a class="markdownIt-Anchor" href="#轻量级锁"></a> 轻量级锁</h5>
<p>当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p>
<p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（<code>Lock Record</code>）的空间，然后将对象头重的 <code>Mark Word</code> 拷贝到 <code>Lock Record</code> 中。</p>
<p>获取轻量级锁的流程：</p>
<ol>
<li>当线程访问共享对象时，若对象的 <code>Mark Word</code> 为无锁状态，虚拟机先在当前线程的栈帧中建立一个名为 <code>Lock Record</code> 的空间，用于存储当前对象的 <code>Mark Word</code> 的拷贝，官方称之为 <code>Dispalced Mark Word</code>；</li>
<li>复制对象头中的 <code>Mark Word</code> 到锁记录（ <code>Lock Record</code> ）中；</li>
<li>虚拟机通过 <code>CAS</code> 操作将对象的 <code>Mark Word</code> 更新为指向 <code>Lock Record</code> 的指针，并将 <code>Lock Record</code> 里的<code>owner</code> 指针指向对象的 <code>Mark Word</code>。如果更新成功，则执行4，否则执行5；</li>
<li>如果更新成功，则这个线程拥有了这个锁，并将锁标志设为 00，表示处于轻量级锁状态；</li>
<li>如果更新失败，虚拟机会检查对象的 <code>Mark Word</code> 是否指向当前线程的栈帧，如果是则说明当前线程已经拥有这个锁，可进入执行同步代码。否则说明多个线程竞争，轻量级锁就会膨胀为重量级锁，<code>Mark Word</code> 中存储重量级锁（互斥锁）的指针，后面等待锁的线程也要进入阻塞状态。</li>
</ol>
<h5 id="重量级锁"><a class="markdownIt-Anchor" href="#重量级锁"></a> 重量级锁</h5>
<h4 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h4>
<ul>
<li><a href="https://www.cnblogs.com/kundeg/p/8422557.html">从 jvm 源码看 synchronized</a></li>
<li><a href="http://bigdatadecode.club/JavaSynchronizedTheory.html">Java Synchronized实现原理</a></li>
<li><a href="https://www.hollischuang.com/archives/1910">Java的对象模型</a></li>
</ul>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>锁的分类</tag>
        <tag>synchronized</tag>
        <tag>Java 对象模型</tag>
        <tag>monitor</tag>
        <tag>ReentrantLock</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/archives/a80d0031.html</url>
    <content><![CDATA[<h4 id="连续子数组的最大和"><a class="markdownIt-Anchor" href="#连续子数组的最大和"></a> 连续子数组的最大和</h4>
<p><a href="https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&amp;tqId=11183&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ30</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindGreatestSumOfSubArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxSum = Integer.MIN_VALUE;</span><br><span class="line">          <span class="comment">// 动态规划实现</span></span><br><span class="line"><span class="comment">//        int[] f = new int[array.length];</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; array.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            if (i == 0 || f[i - 1] &lt; 0) &#123;</span></span><br><span class="line"><span class="comment">//                f[i] = array[i];</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                f[i] = f[i - 1] + array[i];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            maxSum = Math.max(maxSum, f[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || array[i - <span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            array[i] = array[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            array[i] += array[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        maxSum = Math.max(maxSum, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="不相邻子序列最大和"><a class="markdownIt-Anchor" href="#不相邻子序列最大和"></a> 不相邻子序列最大和</h4>
<p><a href="https://www.nowcoder.com/practice/269b4dbd74e540aabd3aa9438208ed8d?tpId=117&amp;tqId=37855&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">subsequence</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="comment">//如果array中只有一个元素，那么最大子序列和就是该元素的值</span></span><br><span class="line">    dp[<span class="number">0</span>] = array[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//如果array中有两个元素，那么最大子序列和是这两个元组中的最大值</span></span><br><span class="line">    dp[<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>], array[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">2</span>] + array[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数组子序列最大乘积"><a class="markdownIt-Anchor" href="#数组子序列最大乘积"></a> 数组子序列最大乘积</h4>
<p><a href="https://www.nowcoder.com/practice/9c158345c867466293fc413cff570356?tpId=117&amp;tqId=37785&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">double</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">double</span> max = min;</span><br><span class="line">    <span class="keyword">double</span> res = min; <span class="comment">//注意：max记录的不是最终的最大值，而是途中每一个选择的最大值，于是需要重新用一个值保存全局最大值。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">double</span> t_max = max;</span><br><span class="line">        <span class="comment">//最大值可以从哪些地方产生：</span></span><br><span class="line">        <span class="comment">// 1. arr[i]  2. min*arr[i] 3.max*arr[i]</span></span><br><span class="line">        max = Math.max(Math.max(arr[i], arr[i] * max), min * arr[i]);</span><br><span class="line">        <span class="comment">//最小值可以从哪些地方产生：</span></span><br><span class="line">        <span class="comment">// 1. arr[i]  2.max*arr[i] 3.min*arr[i]</span></span><br><span class="line">        min = Math.min(Math.min(arr[i], arr[i] * min), t_max * arr[i]);</span><br><span class="line">        res = Math.max(res, max); <span class="comment">//更新全局最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="正则表达式匹配"><a class="markdownIt-Anchor" href="#正则表达式匹配"></a> 正则表达式匹配</h4>
<p><a href="https://www.nowcoder.com/practice/28970c15befb4ff3a264189087b99ad4?tpId=13&amp;tqId=11205&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">JZ</a> / <a href="https://www.nowcoder.com/practice/e96f1a44d4e44d9ab6289ee080099322?tpId=188&amp;tqId=38317&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high-week%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(String str, String pattern)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = str.length();</span><br><span class="line">    <span class="keyword">int</span> n = pattern.length();</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];  <span class="comment">// dp[i][j] 表示模式串前j个是否与字符串前i个匹配</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = (i == <span class="number">0</span>);  <span class="comment">// 只有字符串和模式串都为空的时候才匹配，当模式串为空，字符串不为空则返回false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern.charAt(j - <span class="number">1</span>) != <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; (str.charAt(i - <span class="number">1</span>) == pattern.charAt(j - <span class="number">1</span>) || pattern.charAt(j - <span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                        <span class="comment">//正常匹配</span></span><br><span class="line">                        dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果第j个是* 那么分两种情况，有一种成立即可</span></span><br><span class="line">                    <span class="comment">//case 1 可以直接忽略*前模式的那个元素（*代表出现0次 比如a* 这两个元素做空字符串）</span></span><br><span class="line">                    <span class="comment">//那么dp[i][j]==true 只需满足 dp[i][j-2]==true即可</span></span><br><span class="line">                    <span class="keyword">if</span> (j &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                        dp[i][j] = dp[i][j - <span class="number">2</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//case 2 如果dp[i][j-2]不等于true那么要满足第j-1个字符(这个字符也可以为‘.’)与第i个字符匹配即可</span></span><br><span class="line">                    <span class="comment">//下标多减1是因为dp是从1开始记录的</span></span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">2</span> &amp;&amp; (str.charAt(i - <span class="number">1</span>) == pattern.charAt(j - <span class="number">2</span>) || pattern.charAt(j - <span class="number">2</span>) == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                        dp[i][j] |= dp[i - <span class="number">1</span>][j];<span class="comment">//使用或等于 两种情况有一种符合就行</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="剪绳子"><a class="markdownIt-Anchor" href="#剪绳子"></a> 剪绳子</h4>
<p><a href="https://www.nowcoder.com/practice/57d85990ba5b440ab888fc72b0751bf8?tpId=13&amp;tqId=33257&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">cutRope</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target &lt;= <span class="number">3</span>) <span class="keyword">return</span> target - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[target + <span class="number">1</span>];</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= target; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">            f[i] = Math.max(f[i], Math.max(j * (i - j), j * f[i - j]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="股票一次交易"><a class="markdownIt-Anchor" href="#股票一次交易"></a> 股票（一次交易）</h4>
<p><a href="https://www.nowcoder.com/practice/64b4262d4e6d4f6181cd45446a5821ec?tpId=188&amp;tqId=38313&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high-week%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minPrice = prices[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态规划</span></span><br><span class="line">    <span class="keyword">int</span>[] revenue = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        revenue[i + <span class="number">1</span>] = Math.max(revenue[i], prices[i] - minPrice);</span><br><span class="line">        minPrice = Math.min(minPrice, prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简化</span></span><br><span class="line">    <span class="keyword">int</span> maxRevenue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> price : prices) &#123;</span><br><span class="line">        maxRevenue = Math.max(maxRevenue, price - minPrice);</span><br><span class="line">        minPrice = Math.min(minPrice, price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxRevenue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="股票二次交易"><a class="markdownIt-Anchor" href="#股票二次交易"></a> 股票（二次交易）</h4>
<p><a href="https://www.nowcoder.com/practice/4892d3ff304a4880b7a89ba01f48daf9?tpId=117&amp;tqId=37847&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> first_hold = -prices[<span class="number">0</span>], second_hold = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> first_sell = <span class="number">0</span>, second_sell = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        first_hold = Math.max(first_hold, -prices[i]);</span><br><span class="line">        first_sell = Math.max(first_sell, prices[i] + first_hold);</span><br><span class="line">        second_hold = Math.max(second_hold, first_sell - prices[i]);</span><br><span class="line">        second_sell = Math.max(second_sell, second_hold + prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second_sell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="股票无限次交易"><a class="markdownIt-Anchor" href="#股票无限次交易"></a> 股票（无限次交易）</h4>
<p><a href="https://www.nowcoder.com/practice/9e5e3c2603064829b0a0bbfca10594e9?tpId=117&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> profit = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt; prices[i - <span class="number">1</span>]) profit += prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> profit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit2</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] profit = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length];</span><br><span class="line">    profit[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复杂度过大</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            profit[i] = Math.max(profit[i], profit[j] - prices[j] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> profit[prices.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最长回文子串"><a class="markdownIt-Anchor" href="#最长回文子串"></a> 最长回文子串</h4>
<p><a href="https://www.nowcoder.com/practice/b4525d1d84934cf280439aeecc36f4af?tpId=188&amp;tqId=38292&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high-week%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLongestPalindrome</span><span class="params">(String A, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = i, r = i; l &gt;= <span class="number">0</span> &amp;&amp; r &lt; n; l--, r++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A.charAt(l) == A.charAt(r)) &#123;</span><br><span class="line">                cnt += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        length = Math.max(length, cnt - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = i, r = i + <span class="number">1</span>; l &gt;= <span class="number">0</span> &amp;&amp; r &lt; n; l--, r++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A.charAt(l) == A.charAt(r)) &#123;</span><br><span class="line">                cnt += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        length = Math.max(length, cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="矩阵路径数"><a class="markdownIt-Anchor" href="#矩阵路径数"></a> 矩阵路径数</h4>
<p><a href="https://www.nowcoder.com/practice/166eaff8439d4cd898e3ba933fbc6358?tpId=117&amp;tqId=37736&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) f[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j] + f[i][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一维数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths2</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = m;</span><br><span class="line">        m = n;</span><br><span class="line">        n = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    Arrays.fill(f, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            f[j] = f[j] + f[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="矩阵最小路径和"><a class="markdownIt-Anchor" href="#矩阵最小路径和"></a> 矩阵最小路径和</h4>
<p><a href="https://www.nowcoder.com/practice/7d21b6be4c6b429bb92d219341c4f8bb?tpId=117&amp;tqId=37823&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="comment">// 第一行</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>] + matrix[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + matrix[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> sum = Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            dp[i][j] = sum + matrix[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最大正方形面积"><a class="markdownIt-Anchor" href="#最大正方形面积"></a> 最大正方形面积</h4>
<p><a href="https://www.nowcoder.com/practice/0058c4092cec44c2975e38223f10470e?tpId=117&amp;tqId=37832&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcdoer</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">    <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                len = Math.max(len, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : dp) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : ints) &#123;</span><br><span class="line">            System.out.print(a + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len * len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符串编辑代价"><a class="markdownIt-Anchor" href="#字符串编辑代价"></a> 字符串编辑代价</h4>
<p><a href="https://www.nowcoder.com/practice/05fed41805ae4394ab6607d0d745c8e4?tpId=117&amp;tqId=37801&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minEditCost</span><span class="params">(String str1, String str2, <span class="keyword">int</span> ic, <span class="keyword">int</span> dc, <span class="keyword">int</span> rc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = str1.length();</span><br><span class="line">    <span class="keyword">int</span> n = str2.length();</span><br><span class="line">    <span class="keyword">int</span> rCost = Math.min(ic + dc, rc);</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// str1 为空</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) dp[<span class="number">0</span>][i] = i * ic;</span><br><span class="line">    <span class="comment">// str2 为空</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) dp[i][<span class="number">0</span>] = i * dc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(i - <span class="number">1</span>) == str2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + rCost;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][j] = Math.min(dp[i][j], dp[i - <span class="number">1</span>][j] + dc);</span><br><span class="line">            dp[i][j] = Math.min(dp[i][j], dp[i][j - <span class="number">1</span>] + ic);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最长的括号子串"><a class="markdownIt-Anchor" href="#最长的括号子串"></a> 最长的括号子串</h4>
<p><a href="https://www.nowcoder.com/practice/45fd68024a4c4e97a8d6c45fc61dc6ad?tpId=117&amp;tqId=37745&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//最长的括号子串，使用栈，左括号入栈，遇到右半括号出栈并长度加2，没有左半括号就截止</span></span><br><span class="line">    <span class="comment">//注意，如果入栈数目多于右半括号，那么就不是连续的，必须右半括号完全与左半括号匹配才能计数</span></span><br><span class="line">    <span class="keyword">if</span> (s.isEmpty())  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];        <span class="comment">//动态规划数组</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                dp[i] = (i &gt;= <span class="number">2</span> ? dp[i - <span class="number">2</span>] : <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i - dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> &amp;&amp; s.charAt(i - dp[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                dp[i] = (i - dp[i - <span class="number">1</span>] &gt; <span class="number">1</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>) + dp[i - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len = Math.max(len, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最长递增子序列"><a class="markdownIt-Anchor" href="#最长递增子序列"></a> 最长递增子序列</h4>
<p><a href="https://www.nowcoder.com/practice/9cf027bf54714ad889d4f30ff0ae5481?tpId=117&amp;tqId=37796&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] LIS(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="comment">// 列表的最大子序列 下标从1开始</span></span><br><span class="line">    <span class="keyword">int</span>[] end = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 存储每个元素的最大子序列个数</span></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//子序列的第一个元素默认为数组第一个元素</span></span><br><span class="line">    end[<span class="number">1</span>] = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//第一个元素的最大子序列个数肯定是1</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (end[len] &lt; arr[i]) &#123;</span><br><span class="line">            <span class="comment">//当 arr[i] &gt; end[len] 时 arr[i] 添加到 end 后面</span></span><br><span class="line">            end[++len] = arr[i];</span><br><span class="line">            dp[i] = len;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前元素小于 end 中的最后一个元素，利用二分法寻找第一个大于 arr[i] 的元素</span></span><br><span class="line">            <span class="comment">// end[l] 替换为当前元素 dp[]</span></span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> r = len;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (end[mid] &gt;= arr[i]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end[l] = arr[i];</span><br><span class="line">            dp[i] = l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == len) &#123;</span><br><span class="line">            res[--len] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最长递增子数组"><a class="markdownIt-Anchor" href="#最长递增子数组"></a> 最长递增子数组</h4>
<p><a href="https://www.nowcoder.com/practice/f2419f68541d499f920eac51c63d3f72?tpId=117&amp;tqId=37865&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxSubArrayLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    left[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    right[len - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        left[i] = nums[i] &gt; nums[i - <span class="number">1</span>] ? left[i - <span class="number">1</span>] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = len - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        right[j] = nums[j] &lt; nums[j + <span class="number">1</span>] ? right[j + <span class="number">1</span>] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i - <span class="number">1</span>] &lt;= nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            res = Math.max(left[i - <span class="number">1</span>] + right[i + <span class="number">1</span>] + <span class="number">1</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最长公共子序列"><a class="markdownIt-Anchor" href="#最长公共子序列"></a> 最长公共子序列</h4>
<p><a href="https://www.nowcoder.com/practice/6d29638c85bb4ffd80c020fe244baf11?tpId=117&amp;tqId=37798&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">LCS</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = s1.length();</span><br><span class="line">    <span class="keyword">int</span> n = s2.length();</span><br><span class="line">    <span class="comment">// dp[i][j] 表示 s1 的前 i 个字符和 s2 的前 j 个字符的最长公共子串</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[dp[m][n]];</span><br><span class="line">    <span class="keyword">int</span> index = res.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span> &amp;&amp; dp[m][n] == dp[m][n - <span class="number">1</span>]) &#123;</span><br><span class="line">            n--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &gt; <span class="number">0</span> &amp;&amp; dp[m][n] == dp[m - <span class="number">1</span>][n]) &#123;</span><br><span class="line">            m--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res[index--] = s1.charAt(m - <span class="number">1</span>);</span><br><span class="line">            m--;</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String resStr = String.valueOf(res);</span><br><span class="line">    <span class="keyword">return</span> resStr.equals(<span class="string">&quot;&quot;</span>) ? <span class="string">&quot;-1&quot;</span> : resStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最长公共子串"><a class="markdownIt-Anchor" href="#最长公共子串"></a> 最长公共子串</h4>
<p><a href="https://www.nowcoder.com/practice/f33f5adc55f444baa0e0ca87ad8a6aac?tpId=117&amp;tqId=37799&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">LCS</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = str1.length();</span><br><span class="line">    <span class="keyword">int</span> n = str2.length();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(i - <span class="number">1</span>) == str2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (maxLen &lt; dp[i][j]) &#123;</span><br><span class="line">                    maxLen = dp[i][j];</span><br><span class="line">                    end = i - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] array = <span class="keyword">new</span> <span class="keyword">char</span>[maxLen];</span><br><span class="line">    <span class="keyword">int</span> index = array.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        array[index--] = str1.charAt(end--);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> String.valueOf(array).equals(<span class="string">&quot;&quot;</span>) ? <span class="string">&quot;-1&quot;</span> : String.valueOf(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数字翻译成字符串"><a class="markdownIt-Anchor" href="#数字翻译成字符串"></a> 数字翻译成字符串</h4>
<p><a href="https://www.nowcoder.com/practice/046a55e6cd274cffb88fc32dba695668?tpId=117&amp;tqId=37840&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(String nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length() == <span class="number">0</span> || nums.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length()];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.charAt(i) != <span class="string">&#x27;0&#x27;</span>) dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = (nums.charAt(i - <span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (nums.charAt(i) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">10</span> &amp;&amp; num &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                dp[i] += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i] += dp[i - <span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[nums.length() - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="换钱的最少货币数"><a class="markdownIt-Anchor" href="#换钱的最少货币数"></a> 换钱的最少货币数</h4>
<p><a href="https://www.nowcoder.com/practice/3911a20b3f8743058214ceaa099eeb45?tpId=117&amp;tqId=37795&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMoney</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> aim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] f = <span class="keyword">new</span> <span class="keyword">int</span>[aim + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(f, aim + <span class="number">1</span>);</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; aim + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= arr[j]) f[i] = Math.min(f[i], f[i - arr[j]] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[aim] == aim + <span class="number">1</span> ? -<span class="number">1</span> : f[aim];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数的划分"><a class="markdownIt-Anchor" href="#数的划分"></a> 数的划分</h4>
<p><a href="https://www.nowcoder.com/practice/24c2045f2cce40a5bf410a369a001da8?tpId=117&amp;tqId=37862&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">divideNumber</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">                dp[i][j] = dp[i - j][j] + dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="分糖果"><a class="markdownIt-Anchor" href="#分糖果"></a> 分糖果</h4>
<p><a href="https://www.nowcoder.com/practice/76039109dd0b47e994c08d8319faa352?tpId=117&amp;tqId=37806&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">candy</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 通过下面两个循环保证</span></span><br><span class="line">    <span class="comment">// 如果 arr[i - 1] &lt; arr[i] &gt; arr[i + 1], dp[i] = max(dp[i - 1], dp[i + 1]) + 1;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i], dp[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a : dp) res += a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="0-1背包"><a class="markdownIt-Anchor" href="#0-1背包"></a> 0-1背包</h4>
<p><a href="https://www.nowcoder.com/practice/2820ea076d144b30806e72de5e5d4bbf?tpId=117&amp;tqId=37856&amp;rp=1&amp;ru=%2Factivity%2Foj&amp;qru=%2Fta%2Fjob-code-high%2Fquestion-ranking&amp;tab=answerKey">nowcoder</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> V, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] vw)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] w = <span class="keyword">new</span> <span class="keyword">int</span>[V + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= vw[i][<span class="number">0</span>]; j--) &#123;</span><br><span class="line">            w[j] = Math.max(w[j], w[j - vw[i][<span class="number">0</span>]] + vw[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> w[V];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>动态规划</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/archives/4b668c47.html</url>
    <content><![CDATA[<h3 id="es6"><a class="markdownIt-Anchor" href="#es6"></a> ES6</h3>
<p>介绍 Vue 之前，先介绍一下 ES6 的一些新特性。</p>
<span id="more"></span>
<h4 id="let"><a class="markdownIt-Anchor" href="#let"></a> let</h4>
<p>作用域</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// var 定义的变量会越域</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// let 定义的变量有严格的作用域</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> b = <span class="number">2</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b); <span class="comment">// Uncaught ReferenceError: b is not defined</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重复声明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m = <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> n = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> n = <span class="number">4</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(m); <span class="comment">// 2</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(n); <span class="comment">// Identifier &#x27;n&#x27; has already been declared</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>变量提升</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(x); <span class="comment">// undefine</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x = <span class="number">1</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  			<span class="comment">// Uncaught ReferenceError: Cannot access &#x27;y&#x27; before initialization</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(y);  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> y = <span class="number">2</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>小结：尽量用 let 声明变量</p>
<h4 id="const"><a class="markdownIt-Anchor" href="#const"></a> const</h4>
<p>用于声明常量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> a = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    a = <span class="number">2</span>; <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="解构表达式"><a class="markdownIt-Anchor" href="#解构表达式"></a> 解构表达式</h4>
<ul>
<li>数组解构</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// let a = arr[0];</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let b = arr[1];</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let c = arr[2];</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> [a, b, c] = arr;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a, b, c);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对象解构</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">        age: 20,</span><br><span class="line"><span class="javascript">        language: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;c++&#x27;</span>, <span class="string">&#x27;js&#x27;</span>]</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// let name = person.name;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let age = person.age;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// let language = person.language;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> &#123;name, age, language&#125; = person;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(name, age, language);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="字符串扩展"><a class="markdownIt-Anchor" href="#字符串扩展"></a> 字符串扩展</h4>
<p>字符串模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  	</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> s = <span class="string">`1</span></span></span><br><span class="line">    2</span><br><span class="line">    3`;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(s)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>`` 符号除了可以用来定义多行字符串，还可以在其中插入变量和表达式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  	<span class="keyword">let</span> info = <span class="string">`<span class="subst">$&#123;变量<span class="regexp">/表达式/</span>函数&#125;</span>`</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="函数优化"><a class="markdownIt-Anchor" href="#函数优化"></a> 函数优化</h4>
<ul>
<li>默认参数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// function add(a, b) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     b = b || 1;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     return a + b;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b = <span class="number">1</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a + b;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(add(<span class="number">1</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不定参数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...args</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(args.length);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    fun(<span class="number">1</span>,<span class="number">2</span>,) <span class="comment">//2</span></span></span><br><span class="line"><span class="javascript">    fun(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">//3</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>箭头函数</li>
</ul>
<p>一个参数，方法体只有一行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// let print = function (obj) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(obj);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  	<span class="comment">// 类似于 Java 的 lambda 表达式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> print = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    print(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>多个参数，方法体有多行代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// let equal = function(a, b) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     if (a &gt; b) return 1;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     else if ( a &lt; b) return -1;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     else return 0;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> equal = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> <span class="keyword">if</span> ( a &lt; b) <span class="keyword">return</span> -<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(equal(<span class="number">3</span>, <span class="number">2</span>))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>箭头函数 + 对象解构</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">        age: 20,</span><br><span class="line"><span class="javascript">        language: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;c++&#x27;</span>, <span class="string">&#x27;js&#x27;</span>]</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// function hello(person) &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     console.log(&quot;hello, &quot; + person.name);</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> hello = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello, &quot;</span> + name);</span></span><br><span class="line"></span><br><span class="line">    hello(person)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="对象优化"><a class="markdownIt-Anchor" href="#对象优化"></a> 对象优化</h4>
<p>Object 对象新增的 API</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">        age: 20,</span><br><span class="line"><span class="javascript">        language: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;c++&#x27;</span>, <span class="string">&#x27;js&#x27;</span>]</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)) <span class="comment">// [&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(person)) <span class="comment">// [&quot;张三&quot;, 20, Array(3)]</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(person)) <span class="comment">//) [Array(2), Array(2), Array(2)]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>合并对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> target = &#123;<span class="attr">a</span> : <span class="number">1</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> source1 = &#123;<span class="attr">b</span> : <span class="number">2</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> source2 = &#123;<span class="attr">c</span> : <span class="number">3</span>&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.assign(target, source1, source2);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(target) <span class="comment">// &#123;a: 1, b: 2, c: 3&#125;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>声明对象的简写方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = <span class="string">&quot;张三&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = <span class="number">20</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// let person = &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     name: name,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     age: age</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;name, age&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对象拓展运算符</p>
<p><code>...</code> 用于遍历对象的属性</p>
<p>拷贝对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">        age: 20,</span><br><span class="line"><span class="javascript">        language: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;c++&#x27;</span>, <span class="string">&#x27;js&#x27;</span>]</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> z3 = &#123;...person&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(z3);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>合并对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> age = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;...name, ...age&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(person);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="promise"><a class="markdownIt-Anchor" href="#promise"></a> Promise</h4>
<h3 id="vue-入门"><a class="markdownIt-Anchor" href="#vue-入门"></a> Vue 入门</h3>
<h4 id="mvvm"><a class="markdownIt-Anchor" href="#mvvm"></a> MVVM</h4>
<p><strong>Model</strong></p>
<p><strong>View</strong></p>
<p><strong>ViewModel</strong></p>
<p><img data-src="/archives/4b668c47/mvvm.png" alt="mvvm"></p>
<!--more-->
<h4 id="vue-介绍"><a class="markdownIt-Anchor" href="#vue-介绍"></a> Vue 介绍</h4>
<p>Vue 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<p>声明式渲染</p>
<p>Vue 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样一个就将一个 Vue 实例挂载到了一个 DOM 元素上，Vue 实例的数据和 DOM 元素进行了关联，我们不再和 HTML 直接交互，而是通过 Vue 实例来对其进行完成的控制。</p>
<h3 id="vue-指令"><a class="markdownIt-Anchor" href="#vue-指令"></a> Vue 指令</h3>
<h4 id="v-text-和-v-html"><a class="markdownIt-Anchor" href="#v-text-和-v-html"></a> v-text 和 v-html</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  	&#123;&#123;msg&#125;&#125; <span class="comment">&lt;!-- 插值表达式只能用在标签体中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!-- &lt;h1&gt;hello&lt;/h1&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!-- hello --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">            msg: &quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="单向绑定-v-bind"><a class="markdownIt-Anchor" href="#单向绑定-v-bind"></a> 单向绑定 v-bind</h4>
<p>给标签的元素绑定值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-bind<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">            鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;页面加载于 &#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="双向绑定-v-model"><a class="markdownIt-Anchor" href="#双向绑定-v-model"></a> 双向绑定 v-model</h4>
<p>用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。</p>
<p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;Hello, Vue!&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>多行文本</p>
<p><code>style=&quot;white-space: pre-line;&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;add multiple lines&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-on"><a class="markdownIt-Anchor" href="#v-on"></a> v-on</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                message: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                reverseMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.message = <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>事件中直接些 js 片段</p>
<p>事件中指定 vue 实例中定义的函数</p>
<p>事件修饰符</p>
<p>按键修饰符</p>
<h4 id="v-for"><a class="markdownIt-Anchor" href="#v-for"></a> v-for</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(person, index) in people&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;index + 1&#125;&#125; 姓名：&#123;&#123;person.name&#125;&#125;, 性别：&#123;&#123;person.gender&#125;&#125;, 年龄：&#123;&#123;person.age&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                people: [</span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 <code>key</code> attribute：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>建议尽可能在使用 <code>v-for</code> 时提供 <code>key</code> attribute，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p>
<p>因为它是 Vue 识别节点的一个通用机制，<code>key</code> 并不仅与 <code>v-for</code> 特别关联。后面我们将在指南中看到，它还具有其它用途。</p>
<h4 id="v-if-和-v-show"><a class="markdownIt-Anchor" href="#v-if-和-v-show"></a> v-if 和 v-show</h4>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-if<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;display = !display&quot;</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- display 为 true 时显示；display 为 false 时删除标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;display&quot;</span>&gt;</span>控制 DOM 元素是否显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- display 为 true 时显示；</span></span><br><span class="line"><span class="comment">						diaplay 为 false 时，为标签加上 style=&quot;dipaly: none;&quot; --&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;display&quot;</span>&gt;</span>控制 DOM 元素是否显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                display: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="vue-属性"><a class="markdownIt-Anchor" href="#vue-属性"></a> Vue 属性</h3>
<h4 id="el"><a class="markdownIt-Anchor" href="#el"></a> el</h4>
<h4 id="data"><a class="markdownIt-Anchor" href="#data"></a> data</h4>
<h4 id="methods"><a class="markdownIt-Anchor" href="#methods"></a> methods</h4>
<h4 id="components"><a class="markdownIt-Anchor" href="#components"></a> components</h4>
<h4 id="computed"><a class="markdownIt-Anchor" href="#computed"></a> computed</h4>
<p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#example&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;Hello&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="javascript">      reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// `this` 指向 vm 实例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>计算属性 vs 方法</strong></p>
<p>可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。因此，对于计算开销较大的逻辑代码，建议使用<strong>计算属性</strong>来定义。</p>
<h4 id="watch"><a class="markdownIt-Anchor" href="#watch"></a> watch</h4>
<p>计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <code>watch</code> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时<strong>执行异步或开销较大</strong>的操作时，这个方式是最有用的。</p>
<p>使用 <code>watch</code> 选项允许我们<strong>执行异步操作</strong> (访问一个 API)，限制我们<strong>执行该操作的频率</strong>，并在我们得到最终结果前，<strong>设置中间状态</strong>。这些都是计算属性无法做到的。</p>
<h4 id="filters"><a class="markdownIt-Anchor" href="#filters"></a> filters</h4>
<h3 id="组件化"><a class="markdownIt-Anchor" href="#组件化"></a> <mark>组件化</mark></h3>
<p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。几乎任意类型的应用界面都可以抽象为一个组件树：</p>
<p><img data-src="/archives/4b668c47/%E7%BB%84%E4%BB%B6%E6%A0%91.png" alt="组件树"></p>
<p>在 Vue 里，<strong>一个组件本质上是一个拥有<mark>预定义选项</mark>的一个 Vue 实例</strong>。在 Vue 中注册组件很简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-7&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">      	<span class="comment">&lt;!-- v-bind:todo：自定义组件属性和父组件item绑定  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in groceryList&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      	<span class="comment">// 自定义组件的属性</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;todo&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">todo.text</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  	<span class="comment">// 根组件，也是父组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app7 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app-7&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            groceryList: [</span><br><span class="line"><span class="javascript">                &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;蔬菜&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;奶酪&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;随便其它什么人吃的东西&#x27;</span> &#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p>
<p><strong>一个组件的 <code>data</code> 选项必须是一个函数</strong>，因此每个实例可以维护一份被返回对象的独立的拷贝：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;components-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义一个名为 button-counter 的新组件</span></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        count: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>You clicked me </span><span class="template-variable">&#123;&#123; <span class="name">count</span> &#125;&#125;</span><span class="xml"> times.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当点击按钮时，每个组件都会各自独立维护它的 <code>count</code>。因为你每用一次组件，就会有一个它的新<strong>实例</strong>被创建。</p>
<p>如果 Vue 没有这条规则，点击一个按钮就可能会影响到<em>其它所有实例</em>。</p>
<h4 id="组件注册"><a class="markdownIt-Anchor" href="#组件注册"></a> 组件注册</h4>
<p>Vue 有两种组件的注册类型：<strong>全局注册</strong>和<strong>局部注册</strong>。</p>
<p><strong>全局注册</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	Vue.component(<span class="string">&#x27;my-component-name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ... options ...</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>全局注册的组件可以用在其被注册之后的任何 (通过 <code>new Vue</code>) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。</p>
<p><strong>局部注册</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> myComponent = &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ... options ...</span></span></span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">      <span class="string">&#x27;my-component&#x27;</span>: myComponent</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="通过-prop-向子组件传递数据"><a class="markdownIt-Anchor" href="#通过-prop-向子组件传递数据"></a> 通过 Prop 向子组件传递数据</h4>
<p>Prop 是你可以在组件上注册的一些自定义 attribute。</p>
<p>为了给博文组件传递一个标题，我们可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一个 prop 被注册之后，你就可以像这样把数据作为一个自定义 attribute 传递进来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;My journey with Vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;Blogging with Vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在一个典型的应用中，你可能在根组件的 <code>data</code> 里有一个博文的数组：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#blog-post-demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      posts: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">&#x27;My journey with Vue&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">&#x27;Blogging with Vue&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">&#x27;Why Vue is so fun&#x27;</span> &#125;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>并想要为每篇博文渲染一个组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  v-for=&quot;post in posts&quot;</span><br><span class="line">  v-bind:key=&quot;post.id&quot;</span><br><span class="line">  v-bind:title=&quot;post.title&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述例子中就是将父组件的 data 中的数据传递给子组件的 title 属性。</p>
<h4 id="监听子组件事件"><a class="markdownIt-Anchor" href="#监听子组件事件"></a> 监听子组件事件</h4>
<h4 id="通过插槽分发内容"><a class="markdownIt-Anchor" href="#通过插槽分发内容"></a> 通过插槽分发内容</h4>
<h4 id="动态组件"><a class="markdownIt-Anchor" href="#动态组件"></a> 动态组件</h4>
<h3 id="生命周期和钩子函数"><a class="markdownIt-Anchor" href="#生命周期和钩子函数"></a> 生命周期和钩子函数</h3>
<p><img data-src="/archives/4b668c47/vue%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="vue实例生命周期"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;num&quot;</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>赞！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;，有&#123;&#123;num&#125;&#125;个人点赞<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">            num: 100</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">show</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.name;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num++;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;=========beforeCreate=============&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型未加载：&quot;</span> + <span class="built_in">this</span>.name, <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;方法未加载：&quot;</span> + <span class="built_in">this</span>.show());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模板未加载：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>));</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;=========created=============&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型已加载：&quot;</span> + <span class="built_in">this</span>.name, <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;方法已加载：&quot;</span> + <span class="built_in">this</span>.show());</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模板已加载：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>));</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模板未渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).innerText);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeMount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;=========beforeMount=============&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模板未渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).innerText);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;=========mounted=============&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模板已渲染：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).innerText);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">beforeUpdate</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;=========beforeUpdate=============&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型已更新：&quot;</span> + <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模板未更新：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).innerText);</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">updated</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;=========updated=============&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;数据模型已更新：&quot;</span> + <span class="built_in">this</span>.num);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;html模板已更新：&quot;</span> + <span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).innerText);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="vue-模块化开发"><a class="markdownIt-Anchor" href="#vue-模块化开发"></a> Vue 模块化开发</h3>
<p>全局安装 webpack</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure>
<p>全局安装 vue 脚手架</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm intall -g @vue/cli-init</span><br></pre></td></tr></table></figure>
<p>初始化一个项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vue 脚手架使用 webpack 模板初始化一个 appname 项目</span></span><br><span class="line">vue init webpack appname </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>并发基础</title>
    <url>/archives/46bf65ac.html</url>
    <content><![CDATA[<h4 id="实现线程"><a class="markdownIt-Anchor" href="#实现线程"></a> 实现线程</h4>
<h5 id="实现-runnable-接口"><a class="markdownIt-Anchor" href="#实现-runnable-接口"></a> 实现 <code>Runnable</code> 接口</h5>
<p>需要实现 <code>run()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunnableDemo task = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(task, <span class="string">&quot;线程&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程: i 和 main: i 会交替显示</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="实现-callable-接口"><a class="markdownIt-Anchor" href="#实现-callable-接口"></a> 实现 <code>Callable</code> 接口</h5>
<p>需要实现 <code>call()</code> 方法，与 <code>Runnable</code> 相比，<code>Callable</code> 有返回值。</p>
<p>由 <code>ExecutorService</code> 的 <code>submit()</code> 方法提交执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CallableDemo</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(<span class="keyword">new</span> CallableDemo(<span class="string">&quot;Callable&lt;String&gt;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程: i 和 main: i 会交替显示</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，实现 <code>Runnable</code> 或 <code>Callable</code> 接口的类本身并不具有线程行为，可以把这些类看作是执行某些任务的类，要使这些任务执行起来还是需要真正的线程来驱动。</p>
<h5 id="继承-thread-类"><a class="markdownIt-Anchor" href="#继承-thread-类"></a> 继承 <code>Thread</code> 类</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>); <span class="comment">// 让线程休眠，更好地看到线程交替执行效果</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadDemo(<span class="string">&quot;线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>); <span class="comment">// 让线程休眠，更好地看到线程交替执行效果</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本质上创建线程只有一种方式，就是 <code>new Thread()</code>。</p>
<p>继承 <code>Thread</code> 类与实现 <code>Runnable</code> 接口的比较：</p>
<ol>
<li>
<p>实现 <code>Runnable</code> 接口可以更好的解耦。</p>
<blockquote>
<p><code>Runnable</code> 只有一个 <code>run()</code> 方法，定义需要执行的内容；</p>
<p><code>Thread</code> 则负责线程的属性设置和启动等内容。</p>
</blockquote>
</li>
<li>
<p>在某些情况下，实现 <code>Runnable</code> 接口可以提高性能。</p>
<blockquote>
<p>使用继承 <code>Thread</code> 类的方式，每执行一次任务，都需要重新创建一个线程，等任务执行完，线程需要被销毁，增加了额外的开销；</p>
<p>使用实现 <code>Runnable</code> 接口的方式，在任务定义完之后，配合线程池，只需将任务传入线程池，使用线程池中固有的线程来执行任务，不需要每次都创建销毁线程。</p>
</blockquote>
</li>
<li>
<p><code>Java</code> 不支持多继承，如果继承了 <code>Thread</code> 类，之后就不能再继承其他类，限制了代码代码的可扩展性。</p>
</li>
</ol>
<h5 id="thread-的-start"><a class="markdownIt-Anchor" href="#thread-的-start"></a> <code>Thread</code> 的 <code>start()</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">线程开始执行，JVM 调用线程的 run 方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">线程只能启动一次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Throws:</span></span><br><span class="line"><span class="comment">IllegalThreadStateException – if the thread was already started.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0 对应的是线程状态 NEW</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">    group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0(); <span class="comment">// 本地方法，调用 run()</span></span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="停止线程"><a class="markdownIt-Anchor" href="#停止线程"></a> 停止线程</h4>
<p>通常情况下，不会手动停止一个线程，而是让线程运行到结束，自然停止。但是也有一些情况需要提前停止线程，而 <code>Java</code> 并没有提供简单易用，能够直接安全停止线程的能力。</p>
<p>对于 <code>Java</code> 来说，停止线程的正确方式是调用线程的 <code>interrupt()</code> 方法，但 <code>interrupt()</code> 仅仅是一个通知。对于被停止的线程而言，它拥有完全的自主权，它既可以选择立即停止，也可以选择一段时间后停止，也可以选择压根不停止。</p>
<p>为了调用 <code>interrupt()</code>，需要先持有 <code>Thread</code> 对象。新的 <code>concurrent</code> 类库中尽量在避免对 <code>Thread</code> 对象的直接操作，转而尽量通过 <code>Executor</code> 来执行所有操作。</p>
<p>如果在 <code>Executor</code> 上调用 <code>shutdownNow()</code>，将会发送一个 <code>interrupt()</code> 调用给它启动的所有线程。</p>
<p>如果希望只中断某个单一任务，可以通过 <code>submit()</code> 来启动任务，并持有任务的上下文。<code>submit()</code> 返回一个 <code>Future&lt;?&gt;</code>，可以在其上调用 <code>cancel()</code>，如果把 <code>true</code> 传给 <code>cancel()</code>，那么它就可以在该线程上调用 <code>interrupt()</code> 以停止这个线程。</p>
<p><code>I/O</code> 和在 <code>synchronized</code> 块上的阻塞是不可中断的。</p>
<p><strong>停止一个线程的正确方式：在一个循环里判断线程是否被中断。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted() &amp;&amp; count &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count=&quot;</span> + count++);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().isInterrupted()); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> StopThread());</span><br><span class="line">        t.start();</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>isInterrupted()</code> 和 <code>interrupted()</code> 的区别：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>底层都是调用本地方法来判断是否中断；</li>
<li><code>isInterrupted</code> 是实例方法，<code>interrupted</code> 是静态方法；</li>
<li><code>isInterrupted</code> 不会重置线程的中断状态；<code>interrupted</code> 会重置线程的中断状态。</li>
</ul>
<p>如果上面 <code>StopThread</code> 的 <code>run</code> 方法中的循环改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (!Thread.interrupted() &amp;&amp; count &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span> + count++);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().isInterrupted()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>因为使用的是 <code>interrupted()</code>，会重置线程的中断状态，退出循环后在判断线程是否中断会返回 <code>false</code>。</p>
<h5 id="sleep-与-interrupt"><a class="markdownIt-Anchor" href="#sleep-与-interrupt"></a> <code>sleep</code> 与 <code>interrupt</code></h5>
<p>中断休眠中的线程会抛出 <code>java.lang.InterruptedException</code> 异常，并重置线程的中断状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 先休眠 1 s</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted() &amp;&amp; count &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count=&quot;</span> + count++);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> StopThread());</span><br><span class="line">        t.start();</span><br><span class="line">        t.interrupt(); <span class="comment">// 中断休眠中的线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at java.lang.Thread.sleep(Thread.java:<span class="number">340</span>)</span><br><span class="line">	at java.util.concurrent.TimeUnit.sleep(TimeUnit.java:<span class="number">386</span>)</span><br><span class="line">	at com.tw.StopThread.run(StopThread.java:<span class="number">15</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">count=<span class="number">0</span></span><br><span class="line">count=<span class="number">1</span></span><br><span class="line">count=<span class="number">2</span></span><br><span class="line">......</span><br><span class="line">count=<span class="number">999</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>休眠中的线程可以感受到中断信号，但是依然会执行完 <code>run()</code> 方法中的内容。</p>
<h5 id="正确处理中断信号"><a class="markdownIt-Anchor" href="#正确处理中断信号"></a> 正确处理中断信号</h5>
<p>首先看错误的处理方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>处于休眠状态的线程如果被中断，会抛出 <code>java.lang.InterruptedException</code>，并重置中断状态。</p>
<p>这里抛出的异常被 <code>catch</code> 到了，但是 <code>catch</code> 子句里没有做任何处理，相当于隐藏了中断信号。</p>
<p><strong>正确的方式是：</strong></p>
<ul>
<li>在 <code>catch</code> 里正确处理</li>
<li>为方法添加异常声明 - 如果每个方法都遵循这个规范，中断休眠线程抛出的异常就可以被层层传递到顶层，并在顶层正确处理。</li>
</ul>
<h4 id="线程状态"><a class="markdownIt-Anchor" href="#线程状态"></a> 线程状态</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建后还未启动的线程处于这个状态。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可运行（就绪）状态。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可能正在运行，也可能在等待 CPU 调度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞状态。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 进入这个状态的原因：</span></span><br><span class="line"><span class="comment">     * 1. 等待获取锁（monitor lock）</span></span><br><span class="line"><span class="comment">     * 2. 调用 Object.wait() 方法后，等待重新获取锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待状态。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 进入这个状态的原因是调用了以下方法：</span></span><br><span class="line"><span class="comment">     * Object.wait()</span></span><br><span class="line"><span class="comment">     * Thread.join() </span></span><br><span class="line"><span class="comment">     * LockSupport.park()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计时等待状态。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 进入这个状态的原因是调用了以下方法：</span></span><br><span class="line"><span class="comment">     * Thread.sleep(long timeout)</span></span><br><span class="line"><span class="comment">     * Object.wait(long timeout)</span></span><br><span class="line"><span class="comment">     * Thread.join(long timeout) </span></span><br><span class="line"><span class="comment">     * LockSupport.parkNanos(long timeout)</span></span><br><span class="line"><span class="comment">     * LockSupport.parkUntil(long timeout)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终止状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="线程同步"><a class="markdownIt-Anchor" href="#线程同步"></a> 线程同步</h4>
<p><code>Java</code> 有两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 <code>JVM</code> 实现的 <code>synchronized</code>，而另一个是 <code>JDK</code> 实现的 <code>ReentrantLock</code>。</p>
<h5 id="synchronized"><a class="markdownIt-Anchor" href="#synchronized"></a> <code>synchronized</code></h5>
<h6 id="synchronized-基本使用"><a class="markdownIt-Anchor" href="#synchronized-基本使用"></a> <code>synchronized</code> 基本使用</h6>
<ul>
<li>同步代码块</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同步代码块在字节码中会在代码入口插入 <code>monitorenter</code> 指令，在代码出口和可能抛出异常处插入 <code>monitorexit</code> 指令，这样可以保证即使抛出异常，锁也能正常释放。</p>
<ul>
<li>同步方法</li>
</ul>
<p>锁定调用这个方法的对象 （this）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果某个线程在一个对象上调用了 <code>f()</code>，对于该对象而言，只有等到 <code>f()</code> 调用结束释放了对象锁，其他线程才能调用 <code>f()</code> 和 <code>g()</code>。也即是说，对于一个特定对象来说，其所有的 <code>synchronized</code> 方法共享同一个锁。</p>
<p>与同步代码块不同，同步方法不是插入 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，而是在字节码中添加一个 <code>ACC_SYNCHRONIZED</code> 标志，类似 <code>public</code> 标志。</p>
<h5 id="reentrantlock"><a class="markdownIt-Anchor" href="#reentrantlock"></a> <code>ReentrantLock</code></h5>
<p><strong><code>ReentrantLock</code> 基本使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      lock.lock(); </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// ... method body</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="synchronized-和-reentrantlock-的比较"><a class="markdownIt-Anchor" href="#synchronized-和-reentrantlock-的比较"></a> <code>synchronized</code> 和 <code>ReentrantLock</code> 的比较</h5>
<ul>
<li>
<p><code>synchronized</code> 是 <code>JVM</code> 实现的，<code>ReentrantLock</code> 是 <code>JDK</code> 实现的；</p>
</li>
<li>
<p><code>ReentrantLock</code> 阻塞可中断， <code>synchronized</code> 阻塞不可中断；</p>
</li>
<li>
<p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的先后顺序来依次获得锁。</p>
<p><code>synchronized</code> 锁是非公平的，<code>ReentrantLock</code> 默认也是非公平的，但是可以设置为公平的;</p>
</li>
<li>
<p><code>ReentrantLock</code> 可以同时绑定定多个 <code>Condition</code> 对象；</p>
</li>
<li>
<p>除非需要使用 <code>ReentrantLock</code> 的高级功能，否则<strong>优先使用 <code>synchronized</code></strong>。</p>
</li>
</ul>
<h4 id="线程协作"><a class="markdownIt-Anchor" href="#线程协作"></a> 线程协作</h4>
<h5 id="wait-总是应该写在-synchronized-保护的-while-循环内"><a class="markdownIt-Anchor" href="#wait-总是应该写在-synchronized-保护的-while-循环内"></a> <code>wait()</code> 总是应该写在 <code>synchronized</code> 保护的 <code>while</code> 循环内</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">   <span class="keyword">if</span> (&lt;condition does not hold&gt;)</span><br><span class="line">       obj.wait(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不然可能会产生信号丢失和虚假唤醒等问题。</p>
<ul>
<li><strong>信号丢失</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T1</span></span><br><span class="line"><span class="keyword">synchronized</span> (sharedMonitor) &#123;</span><br><span class="line">  	&lt;setup condition <span class="keyword">for</span> T2&gt;</span><br><span class="line">    sharedMonitor.notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T2</span></span><br><span class="line"><span class="keyword">while</span> (someCondition) &#123;</span><br><span class="line">  	<span class="comment">// point1</span></span><br><span class="line">    <span class="keyword">synchronized</span> (sharedMonitor) &#123;</span><br><span class="line">      	sharedMonitor.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>T2</code> 先执行，并发现 <code>someCondition</code> 为 <code>true</code>，在 <code>point1</code>，<code>CPU</code> 切换到 <code>T1</code>。</p>
<p><code>T1</code> 执行设置，然后调用 <code>notify()</code>。当 <code>T2</code> 被重新调度，获得 <code>shareMonitor</code> 后继续执行进入 <code>wait()</code>，并释放 <code>shareMonitor</code>。</p>
<p>但是因为 <code>T1</code> 已经执行完毕，不会再调用 <code>notify()</code>，<code>T2</code> 将一直等待这个已经发送过的信号，从而产生死锁。</p>
<p>产生这个问题的原因是在 <code>someCondition</code> 发生了<strong>竞争条件</strong>，<code>T1</code> 和 <code>T2</code> 能否正常协作，取决于 <code>someCondition</code> 的设置和判断顺序。</p>
<p>解决方法是消除在 <code>someCondition</code> 上的竞争条件，保证同一时间最多只有一个线程能访问 <code>someCondition</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T2</span></span><br><span class="line"><span class="keyword">synchronized</span> (sharedMonitor) &#123;</span><br><span class="line">  	<span class="keyword">while</span> (someCondition) &#123;</span><br><span class="line">      	sharedMonitor.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>虚假唤醒</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">   <span class="keyword">if</span> (&lt;condition does not hold&gt;)</span><br><span class="line">       obj.wait(); <span class="comment">// point1</span></span><br><span class="line">   <span class="comment">// point2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面这段代码中，假设有 2 个线程 <code>T1</code> 和 <code>T2</code> 先后获取 <code>obj</code> 对象锁后，<code>if</code> 判断都为假，<code>T1</code> 、<code>T2</code> 进入阻塞状态；</p>
<p>然后有另一个线程 <code>T3</code> 获取了 <code>obj</code> 对象后将 <code>condition</code> 设置为 <code>true</code> ，并调用 <code>notify()</code>，同时唤醒 <code>T1</code>、<code>T2</code>；</p>
<p>假设 <code>T1</code> 竞争获得 <code>obj</code> 对象锁，不会重新判断 <code>condition</code>，而是接着执行 <code>point2</code> 处代码，然后结束允许并释放锁；</p>
<p>最后，<code>T2</code> 终重新获得 <code>obj</code> 对象锁，同样不会重新判断 <code>condition</code>，并接着执行 <code>point2</code> 处代码。如果 <code>T1</code> 执行完后 <code>condition</code> 又为假，<code>T2</code> 因为没有重新判断条件，再执行后续代码就出错了。</p>
<p>这就是虚假唤醒所导致的问题，正确的写法是将 <code>condtion</code> 放在 <code>while</code> 循环里：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">   <span class="keyword">while</span> (&lt;condition does not hold&gt;)</span><br><span class="line">       obj.wait(); <span class="comment">// point1</span></span><br><span class="line">   <span class="comment">// point2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就保证了，线程从 <code>wait()</code> 中返回（被唤醒）后，不会直接执行 <code>point2</code> 处代码，而是接着判断 <code>condition</code>，如果条件不满足，接着进入阻塞状态，保证并发的正确执行。</p>
<h5 id="生产者消费者问题"><a class="markdownIt-Anchor" href="#生产者消费者问题"></a> 生产者消费者问题</h5>
<h6 id="使用-blockingqueue-实现"><a class="markdownIt-Anchor" href="#使用-blockingqueue-实现"></a> <strong>使用 <code>BlockingQueue</code> 实现</strong></h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueuePC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 这个程序不会自动停止，添加一个 Timer，以便在 100 毫秒后停止</span></span><br><span class="line">        <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;Aborting&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        BlockingQueue&lt;Object&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义生产任务</span></span><br><span class="line">        Runnable producer = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.put(<span class="keyword">new</span> Object());</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; produce the &quot;</span> + queue.size() + <span class="string">&quot;th Object&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个生产者线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(producer, <span class="string">&quot;Producer1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producer, <span class="string">&quot;Producer2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义消费任务</span></span><br><span class="line">        Runnable consumer = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; consume the &quot;</span> + queue.size() + <span class="string">&quot;th Object&quot;</span>);</span><br><span class="line">                    queue.take();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建两个消费者线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(consumer, <span class="string">&quot;Consumer1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(consumer, <span class="string">&quot;Consumer2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="使用-wait-notifynotifyall-实现"><a class="markdownIt-Anchor" href="#使用-wait-notifynotifyall-实现"></a> <strong>使用 <code>wait + notify/notifyAll</code> 实现</strong></h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义简单队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Object&gt; storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        storage = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果队列满了，就阻塞生产者</span></span><br><span class="line">        <span class="keyword">while</span> (storage.size() == capacity) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        storage.add(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 唤醒消费者</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果队列为空，就阻塞消费者</span></span><br><span class="line">        <span class="keyword">while</span> (storage.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object o = storage.remove();</span><br><span class="line">        <span class="comment">// 唤醒生产者</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyBlockingQueue storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(MyBlockingQueue storage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                storage.produce();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; produce &quot;</span> + i);</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyBlockingQueue storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(MyBlockingQueue storage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                storage.consume();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; consume &quot;</span> + i);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="使用-await-signalsignalall-实现"><a class="markdownIt-Anchor" href="#使用-await-signalsignalall-实现"></a> <strong>使用 <code>await + signal/signalAll</code> 实现</strong></h6>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个简单队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// 定义两个 Condition</span></span><br><span class="line">    <span class="keyword">private</span> Condition notEmpty = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition notFull = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object o)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 队列满了，阻塞生产者，等待唤醒</span></span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity) &#123;</span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            queue.add(o);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 队列不为空，唤醒消费者</span></span><br><span class="line">            notEmpty.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 队列空了，阻塞消费者，等待唤醒</span></span><br><span class="line">            <span class="keyword">while</span> (queue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object o = queue.remove();</span><br><span class="line">            <span class="comment">// 队列未满，唤醒生产者</span></span><br><span class="line">            notFull.signalAll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生产者、消费者代码类似。</p>
<h4 id="线程安全"><a class="markdownIt-Anchor" href="#线程安全"></a> 线程安全</h4>
<p><code>&lt;&lt;Java Concurrency In Practice&gt;&gt;</code> 的作者 <code>Brian Goetz</code> 对线程安全是这样理解的，当多个线程访问一个对象时，如果不用考虑线程在运行时环境下的调度和交替执行问题，也不需要进行额外的同步，访问这个对象的行为都可以获得正确的结果，那这个对象便是线程安全的。</p>
<h5 id="常见的线程安全问题"><a class="markdownIt-Anchor" href="#常见的线程安全问题"></a> 常见的线程安全问题</h5>
<ul>
<li>对非原子操作没有加锁，导致运行结果错误，如多个线程执行 <code>i++</code> 操作</li>
<li>初始化未完成的对象发布导致的线程安全问题</li>
<li>活跃性问题
<ul>
<li>死锁 - 多个线程互相等待对方持有的资源</li>
<li>活锁 - 线程不阻塞，但一直卡在某个操作上出不去</li>
<li>饥饿 - 线程一直获取不到资源</li>
</ul>
</li>
</ul>
<h5 id="保证线程安全的方法有以下几种方式"><a class="markdownIt-Anchor" href="#保证线程安全的方法有以下几种方式"></a> 保证线程安全的方法有以下几种方式</h5>
<ul>
<li><strong>使用不可变对象</strong></li>
</ul>
<div class="note "><p>不可变的对象一定是线程安全的，只要一个不可变的对象被正确地构建出来，就不会看到它在多个线程之中处于不一致的状态。多线程环境下，应当尽量使对象成为不可变，来保证线程安全。</p>
<p>不可变类型：</p>
<ul>
<li><code>final</code> 修饰的基本数据类型</li>
<li><code>String</code></li>
<li>枚举类型</li>
<li><code>Number</code> 部分子类</li>
</ul>
</div>
<ul>
<li><strong>互斥同步</strong></li>
</ul>
<p>使用 <code>synchronized</code> 或 <code>ReentrantLock</code> 对访问共享资源的代码加锁。</p>
<ul>
<li><strong>非阻塞同步</strong></li>
</ul>
<p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，互斥同步称为阻塞同步。</p>
<p>互斥同步属于一种悲观的并发策略，认为只要不做正确的同步措施，就肯定会出现问题。所以无论共享数据是否真的会出现竞争，都要进行加锁。</p>
<p>与悲观并发策略相对的是乐观并发策略：先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施（不断地重试，直到成功为止）。</p>
<p>这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p>
<p><code>J.U.C</code> 中大量使用 <code>CAS</code> 实现非阻塞同步。</p>
<ul>
<li><code>ThreadLocal</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalExample1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocal threadLocal1 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        ThreadLocal threadLocal2 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">1</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ThreadLocal</code> 的底层数据结构：</p>
<p><img data-src="/archives/46bf65ac/ThreadLocalMap.png" alt="ThreadLocalMap"></p>
<p>每个 <code>Thread</code> 都有一个 <code>ThreadLocal.ThreadLocalMap</code> 对象。</p>
<p>当调用一个 <code>ThreadLocal</code> 的 <code>set(T value)</code> 方法时，先得到当前线程的 <code>ThreadLocalMap</code> 对象，然后将 <code>ThreadLocal-&gt;value</code> 键值对插入到该 <code>Map</code> 中。</p>
<p>在一些场景 (尤其是使用线程池) 下，由于 <code>ThreadLocal.ThreadLocalMap</code> 的底层数据结构导致 <code>ThreadLocal</code> 有内存泄漏的情况，应该尽可能在每次使用 <code>ThreadLocal</code> 后手动调用 <code>remove()</code>，以避免出现 <code>ThreadLocal</code> 经典的内存泄漏甚至是造成自身业务混乱的风险。</p>
<h4 id="juc-中的构件"><a class="markdownIt-Anchor" href="#juc-中的构件"></a> <code>J.U.C</code> 中的构件</h4>
<h5 id="countdownlatch"><a class="markdownIt-Anchor" href="#countdownlatch"></a> <code>CountDownLatch</code></h5>
<p>用来同步多个任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     CountDownLatch startSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">     CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(startSignal, doneSignal)).start();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// do something</span></span><br><span class="line">     <span class="comment">// 主线程做完准备工作后，调用 startSignal 的 countDown()，通知在 startSignal 上等待的   </span></span><br><span class="line">     <span class="comment">// 线程可以开始工作了</span></span><br><span class="line">     startSignal.countDown();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 主线程在做收尾工作前，在 doneSignal 上等待</span></span><br><span class="line">     doneSignal.await(); </span><br><span class="line">     <span class="comment">// do something</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch startSignal;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</span><br><span class="line">   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) &#123;</span><br><span class="line">     <span class="keyword">this</span>.startSignal = startSignal;</span><br><span class="line">     <span class="keyword">this</span>.doneSignal = doneSignal;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       startSignal.await(); <span class="comment">// 启动这个任务的线程会在 startSignal 上等待</span></span><br><span class="line">       <span class="comment">// do something</span></span><br><span class="line">       doneSignal.countDown(); <span class="comment">// 所有线程执行完后，在 doneSignal 上等待的线程才能执行</span></span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="cyclicbarrier"><a class="markdownIt-Anchor" href="#cyclicbarrier"></a> <code>CyclicBarrier</code></h5>
<p><code>CyclicBarrier</code> 适用于这样的情况：你希望创建一组任务，它们并行地执行工作，然后在进行下一个步骤之前等待，直至所以任务都完成。<code>CyclicBarrier</code> 使得所有的并行任务都将在栅栏处列队，然后再一致地向前移动。</p>
<p><code>CyclicBarrier</code> 作用类似于 <code>CountDownLatch</code>，只是 <code>CountDownLatch</code> 只能触发一次，而 <code>CyclicBarrier</code> 通过调用 <code>reset()</code> 可以重复使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalThread = <span class="number">10</span>;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(totalThread);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalThread; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 1</span></span><br><span class="line">                    cyclicBarrier.await(); <span class="comment">// 每个线程在执行完 1 处代码会等待，直到其他所有线程执行完 1 处代码才会再执行 2 处代码</span></span><br><span class="line">                    <span class="comment">// 2</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        cyclicBarrier.reset();</span><br><span class="line"></span><br><span class="line">        System.out.println(cyclicBarrier.getParties()); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="semaphore"><a class="markdownIt-Anchor" href="#semaphore"></a> <code>Semaphore</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> clientCount = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalRequestCount = <span class="number">10</span>;</span><br><span class="line">      	<span class="comment">// 信号量控制最多只有 clientCount 并发执行</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(clientCount);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalRequestCount; i++) &#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.print(semaphore.availablePermits() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="blockingqueue"><a class="markdownIt-Anchor" href="#blockingqueue"></a> <code>BlockingQueue</code></h5>
<p><code>BlockingQueue</code> 主要用在生产者消费者场景，在以下情况访问 <code>BlockingQueue</code> 会造成阻塞：</p>
<ul>
<li><code>BlockingQueue</code> 已满的情况下进行入队操作</li>
<li><code>BlockingQueue</code> 为空的情况下进行出队操作</li>
</ul>
<p><code>BlockingQueue</code> 有不同的方法进行入队、出队操作：</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:center">抛出异常</th>
<th style="text-align:center">返回布尔值</th>
<th style="text-align:center">阻塞</th>
<th style="text-align:center">限时等待</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Insert</code></td>
<td style="text-align:center"><code>add(e)</code></td>
<td style="text-align:center"><code>offer(e)</code></td>
<td style="text-align:center"><code>put(e)</code></td>
<td style="text-align:center"><code>offer(e, time, unit)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Remove</code></td>
<td style="text-align:center"><code>remove()</code></td>
<td style="text-align:center"><code>poll()</code></td>
<td style="text-align:center"><code>take()</code></td>
<td style="text-align:center"><code>poll(time, unit)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Examine</code></td>
<td style="text-align:center"><code>element()</code></td>
<td style="text-align:center"><code>peek()</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>其中限时等待操作在到时后返回 <code>true</code> 或 <code>false</code> 。</p>
<p><code>BlockingQueue</code> 主要实现类：</p>
<ul>
<li><code>ArrayBlockingQueue</code></li>
</ul>
<p>基于数组实现的有界阻塞队列。</p>
<p>可以执行线程访问队列的策略，默认为非公平访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 入队元素 */</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下一个 take, poll, peek 或 remove 的元素下标 */</span></span><br><span class="line">    <span class="keyword">int</span> takeIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下一个 put, offer, 或 add 的元素下标 */</span></span><br><span class="line">    <span class="keyword">int</span> putIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 队列中元素个数 */</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 等待 takes 的 Condition */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 等待 puts 的 Condition */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>入队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Throws:</span></span><br><span class="line"><span class="comment">InterruptedException</span></span><br><span class="line"><span class="comment">NullPointerException */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    checkNotNull(e); <span class="comment">// 检查入队元素是否非空</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count == items.length)</span><br><span class="line">            notFull.await(); <span class="comment">// 如果队列已满，线程阻塞，在 notFull 上等待唤醒</span></span><br><span class="line">        enqueue(e); <span class="comment">// 真正的入队操作</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkNotNull</span><span class="params">(Object v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    items[putIndex] = x;</span><br><span class="line">    <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">        putIndex = <span class="number">0</span>;</span><br><span class="line">    count++;</span><br><span class="line">    notEmpty.signal(); <span class="comment">// 入队一个元素，队列非空，唤醒在 notEmpty 上等待的线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">            notEmpty.await(); <span class="comment">// 队列为空，线程阻塞，在 notEmpty 上等待唤醒</span></span><br><span class="line">        <span class="keyword">return</span> dequeue(); <span class="comment">// 出队</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    E x = (E) items[takeIndex];</span><br><span class="line">    items[takeIndex] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (++takeIndex == items.length)</span><br><span class="line">        takeIndex = <span class="number">0</span>;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</span><br><span class="line">        itrs.elementDequeued(); <span class="comment">// 更新 iterator</span></span><br><span class="line">    notFull.signal(); <span class="comment">// 队列未满，唤醒在 notFull 上等待的线程</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>LinkedBlockingQueue</code></li>
</ul>
<p>基于链表实现的阻塞队列，默认队列长度是 <code>Integer.MAX_VALUE</code>，可以执行队列大小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(E x) &#123; item = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 容量, 默认 Integer.MAX_VALUE */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 元素个数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表头</span></span><br><span class="line"><span class="comment">     * Invariant: head.item == null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表尾</span></span><br><span class="line"><span class="comment">     * Invariant: last.next == null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 入队锁 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 出队锁 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</span><br></pre></td></tr></table></figure>
<p>入队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// Note: convention in all put/take/etc is to preset local var</span></span><br><span class="line">    <span class="comment">// holding count negative to indicate failure unless set.</span></span><br><span class="line">    <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">    <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">    putLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count.get() == capacity) &#123; <span class="comment">// 队列已满</span></span><br><span class="line">            notFull.await(); <span class="comment">// 线程阻塞，在 notFull 上等待</span></span><br><span class="line">        &#125;</span><br><span class="line">        enqueue(node); <span class="comment">// 入队</span></span><br><span class="line">        c = count.getAndIncrement(); <span class="comment">// count + 1</span></span><br><span class="line">        <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">            notFull.signal();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        putLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">        signalNotEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">    last = last.next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    E x;</span><br><span class="line">    <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;</span><br><span class="line">    takeLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123; <span class="comment">// 队列为空</span></span><br><span class="line">            notEmpty.await(); <span class="comment">// 线程阻塞，在 notEmpty 上阻塞</span></span><br><span class="line">        &#125;</span><br><span class="line">        x = dequeue(); <span class="comment">// 出队</span></span><br><span class="line">        c = count.getAndDecrement(); <span class="comment">// count - 1</span></span><br><span class="line">        <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">            notEmpty.signal(); </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        takeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == capacity)</span><br><span class="line">        signalNotFull();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node&lt;E&gt; h = head;</span><br><span class="line">    Node&lt;E&gt; first = h.next;</span><br><span class="line">    h.next = h; <span class="comment">// help GC</span></span><br><span class="line">    head = first;</span><br><span class="line">    E x = first.item;</span><br><span class="line">    first.item = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="面试题"><a class="markdownIt-Anchor" href="#面试题"></a> 面试题</h4>
<h5 id="start-和-run-的区别"><a class="markdownIt-Anchor" href="#start-和-run-的区别"></a> <code>start()</code> 和 <code>run()</code> 的区别</h5>
<h5 id="sleep-和-wait-的区别"><a class="markdownIt-Anchor" href="#sleep-和-wait-的区别"></a> <code>sleep()</code> 和 <code>wait()</code> 的区别</h5>
<ul>
<li><code>wait</code> 是 <code>Object</code> 类中的方法，<code>sleep</code> 是 <code>Thread</code>类中的方法；</li>
<li><code>wai</code>t 会释放锁，<code>sleep</code> 不会释放锁；</li>
<li><code>wait</code> 只能在同步代码块中使用，<code>sleep</code> 则没有这个要求。</li>
</ul>
<h5 id="提交任务时任务队列满了会发生什么"><a class="markdownIt-Anchor" href="#提交任务时任务队列满了会发生什么"></a> 提交任务时，任务队列满了，会发生什么</h5>
<h5 id="volatile-数组"><a class="markdownIt-Anchor" href="#volatile-数组"></a> <code>volatile</code> 数组</h5>
<h5 id="synchronized-和-volatile-的区别"><a class="markdownIt-Anchor" href="#synchronized-和-volatile-的区别"></a> <code>synchronized</code> 和 <code>volatile</code> 的区别</h5>
<h5 id="悲观锁和乐观锁"><a class="markdownIt-Anchor" href="#悲观锁和乐观锁"></a> 悲观锁和乐观锁</h5>
<ul>
<li>悲观锁</li>
</ul>
<div class="note "><p>悲观的并发策略，认为只要不做正确的同步措施，就肯定会出现问题。所以无论共享数据是否真的会出现竞争，都要进行加锁。</p>
</div>
<ul>
<li>乐观锁</li>
</ul>
<h5 id="threadlocal-造成内存泄漏的原因"><a class="markdownIt-Anchor" href="#threadlocal-造成内存泄漏的原因"></a> <code>ThreadLocal</code> 造成内存泄漏的原因</h5>
<h5 id="linkedblockingqueue-入队出队为什么用不同的锁"><a class="markdownIt-Anchor" href="#linkedblockingqueue-入队出队为什么用不同的锁"></a> <code>LinkedBlockingQueue</code> 入队出队为什么用不同的锁</h5>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
        <tag>线程协作</tag>
        <tag>实现多线程</tag>
        <tag>线程启动&amp;停止</tag>
        <tag>线程状态</tag>
        <tag>线程同步</tag>
        <tag>生产者消费者</tag>
        <tag>线程安全</tag>
        <tag>J.U.C 构件</tag>
      </tags>
  </entry>
</search>
