<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+Next搭建博客：基础搭建</title>
    <url>/archives/92090b6.html</url>
    <content><![CDATA[<h3 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h3>
<p>通过 <code>Hexo</code> 搭建博客前，需要在本地安装一些必要的环境。</p>
<h4 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> node.js</h4>
<p>命令行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install nodejs</span><br></pre></td></tr></table></figure>
<h4 id="npm"><a class="markdownIt-Anchor" href="#npm"></a> npm</h4>
<p>命令行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install npm</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h3>
<p><code>Hexo</code> 是一个快速、简洁且高效的博客框架。</p>
<h4 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h4>
<p>命令行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h4 id="创建本地博客"><a class="markdownIt-Anchor" href="#创建本地博客"></a> 创建本地博客</h4>
<p>创建一个目录，如：<code>Blog</code>，在此目录下执行初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir Blog</span><br><span class="line">$ <span class="built_in">cd</span> Blog</span><br><span class="line">$ hexo init</span><br><span class="line">$ hexo generate     <span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo server       <span class="comment"># 在本地服务器运行</span></span><br></pre></td></tr></table></figure>
<p>在浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a>。</p>
<p>之后就可以通过 <code>hexo new page pageName</code> 和 <code>hexo new postName</code> 创建新的页面 <code>page</code> 和 文章 <code>post</code> 了。</p>
<h3 id="next"><a class="markdownIt-Anchor" href="#next"></a> NexT</h3>
<p><code>Hexo</code> 自带的主题不是很美观（个人感觉），可以安装其他主题来美化博客。</p>
<p><code>Hexo</code> 提供众多主题供用户选择，这里选择使用人数最多的 <code>Next</code> 主题。</p>
<h4 id="安装主题"><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h4>
<p>主题的安装有以下两种方式：</p>
<div class="tabs" id="next-安装"><ul class="nav-tabs"><li class="tab active"><a href="#next-安装-1">git 安装</a></li><li class="tab"><a href="#next-安装-2">npm 安装</a></li></ul><div class="tab-content"><div class="tab-pane active" id="next-安装-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="next-安装-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure></div></div></div>
<p>以上两种方式安装的都是 <code>NexT</code> 的最新版本。</p>
<h4 id="启用主题"><a class="markdownIt-Anchor" href="#启用主题"></a> 启用主题</h4>
<p>修改站点（博客）配置文件 <code>_config.xml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>然后执行以下命令测试一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<h3 id="将博客部署到-gitee-pages"><a class="markdownIt-Anchor" href="#将博客部署到-gitee-pages"></a> 将博客部署到 Gitee Pages</h3>
<p><code>Gitee Pages</code> 是一个免费的静态网页托管服务，可以使用 <code>Gitee Pages</code> 托管博客、项目官网等静态网页。目前 <code>Gitee Pages</code> 支持 <code>Jekyll</code>、<code>Hugo</code>、<code>Hexo</code>编译静态资源。</p>
<h4 id="注册-gtiee-账号"><a class="markdownIt-Anchor" href="#注册-gtiee-账号"></a> 注册 Gtiee 账号</h4>
<h4 id="创建仓库"><a class="markdownIt-Anchor" href="#创建仓库"></a> 创建仓库</h4>
<p><strong>注意<mark>路径</mark>一定要填写 <code>username.gitee.io</code> 这样后面才能使用 <code>Gitee Pages</code> 功能。</strong></p>
<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是 <code>username/username.gitee.io</code>，这是特殊的命名约定，之后就可以通过 <a href="http://username.gitee.io/">http://username.gitee.io</a>  来访问个人主页。</p>
<h4 id="配置-ssh"><a class="markdownIt-Anchor" href="#配置-ssh"></a> 配置 SSH</h4>
<p>上传文件需要配置 <code>ssh key</code>，不然无法上传。</p>
<p>首先先检查一下本地是否已经存在 <code>ssh key</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure>
<p>如果不存在，执行以下命令生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;XXXXX@qq.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>邮箱是注册 <code>Gitee</code> 时候的邮箱。</p>
<p>执行完后会在 <code>~/.ssh/</code>下生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件。</p>
<p>点击 <code>Gitee -&gt; 右上角设置 -&gt; SSH 公钥</code>，将 <code>id_rsa.pub</code> 文件内容复制进去即可。</p>
<p>执行以下命令，测试是否配置成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@gitee.com</span><br></pre></td></tr></table></figure>
<h4 id="将本地博客部署到-gitee"><a class="markdownIt-Anchor" href="#将本地博客部署到-gitee"></a> 将本地博客部署到 Gitee</h4>
<p>安装 <code>git</code> 部署需要的包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git —save</span><br></pre></td></tr></table></figure>
<p>编辑站点（博客）配置文件 <code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@gitee.com:username/username.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>打开之前创建的仓库 <code>gitee/username/username</code> ，点击<code>服务 -&gt; Gitee Pages -&gt;更新</code>，就可以通过 <a href="https://gitee.username.io">https://gitee.username.io</a> 访问个人博客了。不过有一点不好的是，每当在本文创建了新的 <code>post</code> 或 <code>page</code> 并重新部署后，都需要手动在 <code>Gitee Pages</code> 更新一下才能看到最新提交的内容。</p>
]]></content>
      <categories>
        <category>Hexo&amp;NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next搭建博客：主题初步美化</title>
    <url>/archives/54ce2e51.html</url>
    <content><![CDATA[<p>安装并启用 <code>Next</code> 主题后，有必要对其进行进一步的美化。通过阅读 <a href="https://theme-next.js.org/">NexT 官方文档</a> 以及网上搜罗的一些其他大神的文章，本文总结了一些对 <code>NexT</code> 的初步美化操作步骤。</p>
<p>新版 <code>NexT</code> 建议复制主题配置文件到站点根目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Installed through npm</span></span><br><span class="line">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Installed through Git</span></span><br><span class="line">cp theme/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>
<p>之后对主题的修改就在 <code>_config.next.yml</code> 中进行配置。这样做的好处是可以不改动 <code>NexT</code> 包中的内容，如果主题有更新，本地可以更加的平滑的随之升级。</p>
<span id="more"></span>
<h3 id="背景图片"><a class="markdownIt-Anchor" href="#背景图片"></a> 背景图片</h3>
<p>将图片放进 <code>source/images</code> 文件夹。</p>
<p>（创建）修改 <code>source/_data/styles.styl</code>，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 背景图片</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/images/bg.jpg</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed; //不重复</span><br><span class="line">    <span class="attribute">background-size</span>: cover;      //填充</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>_config.next.yml</code> 中启用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<p>背景图片也可以设置为动态的，将 <code>url</code> 换成图片网站链接即可，如：<a href="https://source.unsplash.com/random/1600x900">unsplash</a>。这样每次刷新页面都会加载不同的背景图片。</p>
<p>同时，为了更好地显示背景图片，可以设置文章的透明度。</p>
<p>修改 <code>source/_data/styles.styl</code>，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//文章内容的透明度设置</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.85</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.85</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>opacity</code> 范围是 0~1，0 表示完全透明，1 表示完全不透明。</p>
<h3 id="侧边栏"><a class="markdownIt-Anchor" href="#侧边栏"></a> 侧边栏</h3>
<h4 id="菜单项"><a class="markdownIt-Anchor" href="#菜单项"></a> 菜单项</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.next.yml</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="comment">#home: / || fa fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="comment">#archives: /archives/ || fa fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>
<p>新版 <code>NexT</code> 的配置文件默认没有生成任何页面，自己希望在侧边栏有哪个菜单项，去掉注释即可。然后执行如下命令，生成对应的页面，要不点击菜单项时会报 404。</p>
<p>以 <code>home</code> 为例，先创建页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;home&quot;</span></span><br></pre></td></tr></table></figure>
<p>命令执行后，会在站点的 <code>source</code> 目录下生成一个 <code>home</code> 目录，其中包括一个 <code>index.md</code> 文件。打开 <code>index.md</code>，在 <code>front matter</code> 中添加：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">type: &quot;about&quot;</span><br></pre></td></tr></table></figure>
<p>其他的页面操作类似。</p>
<h4 id="回到顶部"><a class="markdownIt-Anchor" href="#回到顶部"></a> 回到顶部</h4>
<p>在阅读过程中可以点击回到顶部按钮快速回到顶部。</p>
<p>修改 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="本地搜索"><a class="markdownIt-Anchor" href="#本地搜索"></a> 本地搜索</h4>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>修改主题配置文件 <code>_config.next.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="底部"><a class="markdownIt-Anchor" href="#底部"></a> 底部</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the year when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/icons</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#808080&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">Time_Wait</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Powered by Hexo &amp; NexT</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3>
<h4 id="阅读进度条"><a class="markdownIt-Anchor" href="#阅读进度条"></a> 阅读进度条</h4>
<p>修改主题配置文件 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">startAt:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">2px</span></span><br></pre></td></tr></table></figure>
<h4 id="文章-id"><a class="markdownIt-Anchor" href="#文章-id"></a> 文章 ID</h4>
<p><code>Hexo</code> 给文章生成的默认的 <code>url</code> 是 <code>username.gitee.io/year/month/day/title.html</code>，为了让 <code>url</code> 简短一点，可以给文章一个固定<code>ID</code>。</p>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件 <code>_config.yml</code>，找到</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://seventw.gitee.io</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>这样文章的 <code>url</code> 就变成 <code>username.gitee.io/archives/54ce2e51.html</code> 这样的。</p>
<h4 id="文章字数统计"><a class="markdownIt-Anchor" href="#文章字数统计"></a> 文章字数统计</h4>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-word-counter</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件 <code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post Wordcount</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>          <span class="comment"># the number of post words</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>             <span class="comment"># the estimated reading time of post</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span>   <span class="comment"># the number of all posts words</span></span><br><span class="line">  <span class="attr">total_times:</span> <span class="literal">false</span>     <span class="comment"># the estimated reading time of all posts</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                 <span class="comment"># the average Word Length (chars count in word)</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>               <span class="comment"># the average words per minute</span></span><br></pre></td></tr></table></figure>
<p>修改主题配置文件 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span> 		<span class="comment"># 把文章字数和预估阅读时间放在一行</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>  <span class="comment"># 控制是否在文章的底部显示</span></span><br></pre></td></tr></table></figure>
<h4 id="文章首字下沉"><a class="markdownIt-Anchor" href="#文章首字下沉"></a> 文章首字下沉</h4>
<p>在 <code>source/_data/styles.styl</code> 中添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span>&gt;<span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">::first-letter</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line"><span class="comment">/* height: 32px;*/</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">42px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="相关文章推荐"><a class="markdownIt-Anchor" href="#相关文章推荐"></a> 相关文章推荐</h4>
<p>安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p>修改主题配置文件 <code>_config.next.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="渲染器"><a class="markdownIt-Anchor" href="#渲染器"></a> 渲染器</h4>
<p><code>Hexo</code> 自带的 <code>markdown</code> 渲染器不能解析注脚，对其进行更换。</p>
<p>卸载自带的渲染器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uni hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>
<p>下载新的渲染器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i @upupming/hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件 <code>_config.yml</code>，添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Render</span></span><br><span class="line"><span class="attr">markdown_it_plus:</span></span><br><span class="line">    <span class="attr">highlight:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">langPrefix:</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">“”‘’</span></span><br><span class="line">    <span class="attr">plugins:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-sub</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-sup</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-deflist</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-ins</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-mark</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">markdown-it-toc-and-anchor</span></span><br><span class="line">          <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">pre_class:</span> <span class="string">highlight</span></span><br></pre></td></tr></table></figure>
<h3 id="标签页"><a class="markdownIt-Anchor" href="#标签页"></a> 标签页</h3>
<p>默认的标签页样式不太好看，可以在在 <code>source/_data/sidebar.njk</code> 中添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span>&#123;</span><br><span class="line">    <span class="comment">/*font-family: Helvetica, Tahoma, Arial;*/</span></span><br><span class="line">    <span class="comment">/*font-weight: 100;*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">counter-reset</span>: tags;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">5px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>:before&#123;</span><br><span class="line">    content: <span class="string">&quot;🔖&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">     <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">     <span class="comment">/*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span></span><br><span class="line">     <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="归档页"><a class="markdownIt-Anchor" href="#归档页"></a> 归档页</h3>
<p>修改 <code>next/layout/_macro/post-collapse.swig</code> 后的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% macro render(post) %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;my-post post-type-&#123;&#123; post.type | default(&#x27;normal&#x27;) &#125;&#125;&quot;</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">&quot;http://schema.org/Article&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;my-post-header&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;my-post-meta&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">&quot;my-post-time&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;dateCreated&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">datetime</span>=<span class="string">&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;</span> &gt;</span></span><br><span class="line">          &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      &lt;&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125; class=&quot;my-post-title&quot;&gt;</span><br><span class="line">        &#123;% if post.link %&#125;&#123;# Link posts #&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;my-post-title-link post-title-link-external&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.link) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; post.title or post.link &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-external-link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;my-post-title-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">              &#123;% if post.type === &#x27;picture&#x27; %&#125;</span><br><span class="line">                &#123;&#123; post.content &#125;&#125;</span><br><span class="line">              &#123;% else %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; post.title | default(__(&#x27;post.untitled&#x27;)) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              &#123;% endif %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">      &lt;/&#123;% if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;% endif %&#125;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>
<p>修改 <code>source/_data/styles.styl</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 归档页样式 began */</span></span><br><span class="line"><span class="selector-class">.page-archive</span> <span class="selector-class">.archive-page-counter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-time</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mypost</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.my-post-title-link</span>:before&#123;</span><br><span class="line">  top: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;📚&quot;</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font</span>: normal normal normal <span class="number">14px</span>/<span class="number">1</span> FontAwesome;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">104</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  //<span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.my-post-title-link</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-title</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">4.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4c4948</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    //<span class="attribute">margin-left</span>: <span class="number">4rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-header</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: top;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line">//<span class="selector-class">.my-post-title-link</span>&#123;</span><br><span class="line">//  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">//  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">//&#125;</span><br><span class="line"><span class="selector-class">.my-post-meta</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#99a9bf</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#114142</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.post-block</span><span class="selector-class">.tag</span> <span class="selector-class">.collection-title</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#3f3f3f</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b4e8fa</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1.5px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3f3f3f</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.category-list-link</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">104</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  //<span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 归档页样式 end */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo&amp;NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>初步美化</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/archives/66c016fb.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java内存模型</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/archives/c24675b4.html</url>
    <content><![CDATA[<h4 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h4>
<p>索引的作用是提高查询效率。</p>
<p>实现索引可以有多种方式，常见的有<strong>哈希表</strong>、<strong>有序数组</strong>和<strong>搜索树</strong>。</p>
<ul>
<li>
<p>哈希表</p>
<div class="note "><p>哈希表是一种存储键值对的数据结构，根据 <code>key</code> 可以在 <code>O(1)</code> 时间内找到对应的 <code>value</code>。</p>
<p>哈希表在<strong>等值（单个）查询</strong>场景表现很好，但是因为哈希表不是有序的，因此在做<strong>区间查询</strong>时性能就很差。</p>
</div>
</li>
<li>
<p>有序数组</p>
<div class="note "><p>有序数组在等值查询和区间查询场景中的性能都很优秀，但是如果有数据插入和删除就比较耗时了，因为可能需要移动很多数据。</p>
</div>
</li>
<li>
<p>搜索树</p>
</li>
</ul>
<p>在 <code>MySQL</code> 中，索引是在存储引擎层实现的，因此不同的存储引擎可能有不一样的索引实现。</p>
<h5 id="覆盖索引"><a class="markdownIt-Anchor" href="#覆盖索引"></a> 覆盖索引</h5>
<p>假如有这样一条查询语句：<code>select * from T where k between 3 and 5;</code> 并且为 <code>k</code> 建立了索引。</p>
<p>因为要查全字段，所以在 <code>k</code> 索引树上查完，得到主键值后，要根据主键值回到主键索引树上去查全字段数据，这个过程称为回表。</p>
<p>而如果查询语句是：<code>select ID from T where k between 3 and 5;</code> <code>ID</code> 是主键。</p>
<p>此时 <code>k</code> 索引树可以直接提供查询结果，就不需要回表了。在这个查询中，索引 <code>k</code> 已经覆盖了查询请求，称为覆盖索引。</p>
<p>虽然维护索引需要额外开销，但是基于覆盖索引的特性，有时我们需要为查询频率较高的字段建立联合索引，以期让这个联合索引覆盖查询请求，减少回表的次数，提高查询效率。</p>
<h5 id="最左前缀原则"><a class="markdownIt-Anchor" href="#最左前缀原则"></a> 最左前缀原则</h5>
<p>假如有一个组合索引（<code>a, b</code>），索引项会先根据 <code>a</code> 排序，再根据 <code>b</code> 排序。</p>
<p>这时如果只根据 <code>a</code> 来查询数据，可以用上这个索引；</p>
<p>如果 <code>a</code> 是个字符串，比如 <code>name</code>，那类似 <code>select name like ‘张%’</code> 这样的查询也可以用上 （<code>name, b</code>）这个索引。</p>
<p>也就是说，只要满足索引的最左前缀原则就可以用上一个组合索引。这个最左前缀可以是组合索引的前 <code>N</code> 个字段，也可以是字符串索引的前 <code>N</code> 个字符。</p>
<p><strong>组合索引如何安排字段顺序</strong></p>
<ul>
<li>
<p><strong>复用能力</strong> - 因为有最左前缀原则，有了组合索引（<code>a, b</code>），就不用为 <code>a</code> 单独建立索引了。也就说，应该优先考虑可以减少一个索引的字段顺序。</p>
</li>
<li>
<p><strong>空间</strong> - 如果既有联合查询，又有基于 <code>a</code> 和 <code>b</code> 各自的查询，基于 <code>b</code> 的查询是无法使用联合索引 （<code>a, b</code>）的，不得不为 <code>b</code> 另建一个索引。这时就需要考虑空间因素，如果字段 <code>a</code> 比 <code>b</code> 大，就应该考虑建立索引</p>
<p>（<code>a, b</code>）和 <code>b</code>，否则，就建立索引（<code>b, a</code>）和 <code>a</code>。</p>
</li>
</ul>
<h5 id="索引下推"><a class="markdownIt-Anchor" href="#索引下推"></a> 索引下推</h5>
<p>有一张 <code>user</code> 表，建表语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table user (</span><br><span class="line">ID int primary key,</span><br><span class="line">name char(20) not null,</span><br><span class="line">age int not null,</span><br><span class="line">ismale char(1) not null default 1,</span><br><span class="line">index k(name, age)</span><br><span class="line">) engine&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>
<p>除了主键索引，还有一个组合索引（<code>name, age</code>）。</p>
<p>现有查询语句：<code>select * from user where name like ‘张%’ and age=10 and ismale=1;</code></p>
<p>在 <code>MySQL 5.6</code> 之前，根据最左前缀原则，在找到以“张”开头的数据后，需要逐个回表，到主键索引树上找到对应的数据行，再比较后面字段值。</p>
<p>而 <code>MySQL 5.6</code> 开始，引入了<strong>索引下推</strong>，找到以“张”开头的数据后，并不是直接回表，而是会再根据组合索引中包含的字段再判断，过滤掉不符合条件的记录，减少回表次数。</p>
<h5 id="索引失效"><a class="markdownIt-Anchor" href="#索引失效"></a> 索引失效</h5>
<ul>
<li>在索引列上有计算、函数、类型转换，会使索引失效进而扫描全表</li>
<li>组合索引中对某列进行范围查找，会使该列右边的列不能使用</li>
<li>使用不等于（<code>!= or &lt;&gt;</code>）会使索引失效</li>
<li>组合索引中对某列进行模糊匹配，会使该列右边的列不能使用</li>
</ul>
<h4 id="存储引擎"><a class="markdownIt-Anchor" href="#存储引擎"></a> 存储引擎</h4>
<h5 id="innodb"><a class="markdownIt-Anchor" href="#innodb"></a> <code>InnoDB</code></h5>
<p>在 <code>InnoDB</code> 中，表是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。</p>
<p>每一个索引在 <code>InnoDB</code> 里面对应一棵 B+ 树。</p>
<p>索引类型包括主键索引和非主键索引：</p>
<ul>
<li><strong>主键索引 - 也称聚簇索引</strong>，叶子节点存储存储的是整行数据。</li>
<li><strong>非主键索引 - 也称普通索引、二级索引</strong>，叶子节点存储的是主键的值。</li>
</ul>
<p>基于主键索引的查询通过查询主键索引树可以直接得到整行数据；</p>
<p>而基于普通索引，得先查询普通索引树，得到主键的值，然后根据主键的值去查询主键索引树才能得到想要的数据，这个过称为<strong>回表</strong>。</p>
<p>显然，基于普通索引的查询比基于主键索引的查询需要多扫描一颗索引树，因此建议尽量通过主键查询。</p>
<h4 id="切分"><a class="markdownIt-Anchor" href="#切分"></a> 切分</h4>
<h5 id="水平切分"><a class="markdownIt-Anchor" href="#水平切分"></a> 水平切分</h5>
<h5 id="垂直切分"><a class="markdownIt-Anchor" href="#垂直切分"></a> 垂直切分</h5>
<h4 id="复制"><a class="markdownIt-Anchor" href="#复制"></a> 复制</h4>
<h4 id="查询性能优化"><a class="markdownIt-Anchor" href="#查询性能优化"></a> 查询性能优化</h4>
<h4 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h4>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语法</title>
    <url>/archives/e272e39a.html</url>
    <content><![CDATA[<h4 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注释1</span><br><span class="line">SELECT *</span><br><span class="line">FROM mytable; -- 注释2</span><br><span class="line">&#x2F;** </span><br><span class="line"> * 注释3</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<h4 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h4>
<ul>
<li>创建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database db_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use db_name;</span><br></pre></td></tr></table></figure>
<h4 id="表"><a class="markdownIt-Anchor" href="#表"></a> 表</h4>
<h5 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (</span><br><span class="line">  # int 类型，不为空，自增</span><br><span class="line">  id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">  # int 类型，不可为空，默认值为 1，不为空</span><br><span class="line">  col1 INT NOT NULL DEFAULT 1,</span><br><span class="line">  # 变长字符串类型，最长为 45 个字符，可以为空</span><br><span class="line">  col2 VARCHAR(45) NULL,</span><br><span class="line">  # 日期类型，可为空</span><br><span class="line">  col3 DATE NULL,</span><br><span class="line">  # 设置主键为 id</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table table_name;</span><br></pre></td></tr></table></figure>
<h5 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h5>
<ul>
<li>修改表名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table old_table_name rename new_table_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 只修改列的数据类型</span><br><span class="line">alter table table_name modify column column_name 数据类型;</span><br><span class="line"></span><br><span class="line"># 同时修改列名和数据类型</span><br><span class="line">alter table table_name change column old_column_name new_column_name 数据类型;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table table_name add column_name 数据类型;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table table_name drop column column_name;</span><br></pre></td></tr></table></figure>
<h4 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据</h4>
<h5 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 普通插入</span><br><span class="line">insert into table_name(col1, col2) values(val1, val2);</span><br><span class="line"></span><br><span class="line"># 插入检索出来的数据</span><br><span class="line">insert into table1(col1, col2)</span><br><span class="line">select col1, col2 from table2;</span><br><span class="line"></span><br><span class="line"># 将一个表的内容插入到一个新表</span><br><span class="line">create table new_table as</span><br><span class="line">select * from old_table;</span><br></pre></td></tr></table></figure>
<h5 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update table_name set col &#x3D; val where id &#x3D; 1;</span><br></pre></td></tr></table></figure>
<h5 id="删除-2"><a class="markdownIt-Anchor" href="#删除-2"></a> 删除</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from table_name where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line"># 清空表</span><br><span class="line">truncate table table_name;</span><br></pre></td></tr></table></figure>
<h4 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h4>
<ul>
<li>
<p><code>distinct</code></p>
<p>同时作用于 <code>col1</code> 和 <code>col2</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select distinct col1, col2</span><br><span class="line">from table_name;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>limit</code></li>
</ul>
<p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 返回前 5 行</span><br><span class="line">select * </span><br><span class="line">from table_name</span><br><span class="line">limit 5;</span><br><span class="line"></span><br><span class="line"># 返回前 5 行</span><br><span class="line">select *</span><br><span class="line">from table_name</span><br><span class="line">limit 0, 5;</span><br></pre></td></tr></table></figure>
<h5 id="where"><a class="markdownIt-Anchor" href="#where"></a> <code>where</code></h5>
<p>用 <code>where</code> 子句进行数据过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">from table_name</span><br><span class="line">where id &#x3D; 5;</span><br></pre></td></tr></table></figure>
<p><code>where</code> 子句可用的操作符：</p>
<ul>
<li><code>=</code> - 等于</li>
<li><code>&lt;</code> - 小于</li>
<li><code>&gt;</code> - 大于</li>
<li><code>&lt;&gt; or !=</code> - 不等于</li>
<li><code>&lt;= or !&gt;</code> - 小于等于</li>
<li><code>&gt;= or !&lt;</code> - 大于等于</li>
<li><code>between</code></li>
<li><code>is null</code></li>
</ul>
<p><code>where</code> 子句中还可以使用通配符，但是只能用在文本列上：</p>
<ul>
<li><code>%</code> - 匹配 0 个或多个任意字符</li>
<li><code>_</code> - 匹配 1 个任意字符</li>
<li><code>[]</code> - 匹配集合内的字符，如 <code>[ab]</code> 表示可以匹配 <code>a</code> 或 <code>b</code>。如果加上 <code>^</code> 表示否定，不匹配集合内任何字符，如 <code>[^ab]</code> 表示字符不能时 <code>a</code> 和 <code>b</code>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找 name 不以 a 和 b 开头的记录</span><br><span class="line">select * </span><br><span class="line">from table_name</span><br><span class="line">where name like &#39;[^ab]%&#39;</span><br></pre></td></tr></table></figure>
<h5 id="group-by"><a class="markdownIt-Anchor" href="#group-by"></a> <code>group by</code></h5>
<p>分组规定：</p>
<ul>
<li><code>group by</code> 子句出现在 <code>where</code> 子句之后，<code>order by</code> 子句之前；</li>
<li>除了汇总字段外，<code>select</code> 语句中的每一字段都必须在 <code>group by</code> 子句中给出；</li>
<li><code>null</code> 的行会单独分为一组；</li>
<li>大多数 <code>SQL</code> 实现不支持 <code>group by</code> 列具有可变长度的数据类型。</li>
</ul>
<h5 id="having"><a class="markdownIt-Anchor" href="#having"></a> <code>having</code></h5>
<p><strong><code>where</code> 过滤行，<code>having</code> 过滤分组，行过滤先于分组过滤。</strong></p>
<h5 id="order-by"><a class="markdownIt-Anchor" href="#order-by"></a> <code>order by</code></h5>
<p>默认为升序（<code>asc</code>），可以指定为降序（<code>desc</code>）。并且可以按多个列进行排序，并且为每个列指定不同的排序方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select *</span><br><span class="line">from table_name</span><br><span class="line">order by col1 asc, col2 desc;</span><br></pre></td></tr></table></figure>
<h5 id="concat"><a class="markdownIt-Anchor" href="#concat"></a> <code>concat</code></h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select concat(trim(col1), &#39;-&#39;, trim(col2)) as concat_col</span><br><span class="line">from table_name;</span><br></pre></td></tr></table></figure>
<h5 id="子查询"><a class="markdownIt-Anchor" href="#子查询"></a> 子查询</h5>
<p>可以将子查询的结果作为 <code>where</code> 语句的过滤条件，子查询中只能返回一个字段的数据。</p>
<h5 id="联合查询"><a class="markdownIt-Anchor" href="#联合查询"></a> 联合查询</h5>
<p>当想要的数据在多个不同的表中，需要使用联合查询，此时需要连接多个表。</p>
<p><code>join</code> 关键字用来连接多个表，条件语句使用 <code>on</code> 而不是 <code>where</code>。</p>
<p>连接可以替换子查询，并且效率一般比子查询更快。</p>
<ul>
<li><strong>自然连接 - <code>natural join</code></strong></li>
</ul>
<p><strong>自然连接是一种特殊的等值连接</strong>，要求进行连接的两个关系表中必须有相同的属性列（名字相同），无须添加连接条件，<strong>并且在结果中消除重复的属性列。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table1 natural join table2;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>内连接 - <code>inner join</code></strong></li>
</ul>
<p>内连接基本与自然连接相同，不同之处在于自然连接是同名属性列的连接，而内连接则不要求两属性列同名，可以用 <code>using</code> 或 <code>on</code> 来指定连接条件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select A.col1, B.vcol1</span><br><span class="line">from tablea as A inner join tableb as B</span><br><span class="line">on A.col &#x3D; B.col;</span><br><span class="line"></span><br><span class="line"># 等价</span><br><span class="line">select A.col1, B.vcol1</span><br><span class="line">from tablea as A, tableb as B</span><br><span class="line">where A.col &#x3D; B.col;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>自连接</strong></li>
</ul>
<p>自连接是内连接的一种特殊形式，连接自身。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 子查询版本</span><br><span class="line">select name</span><br><span class="line">from employee</span><br><span class="line">where department &#x3D; (</span><br><span class="line">      select department</span><br><span class="line">      from employee</span><br><span class="line">      where name &#x3D; &quot;Jim&quot;);</span><br><span class="line">      </span><br><span class="line"># 自连接版本</span><br><span class="line">select e1.name</span><br><span class="line">from employee as e1 inner join employee as e2</span><br><span class="line">on e1.department &#x3D; e2.department</span><br><span class="line">      and e2.name &#x3D; &quot;Jim&quot;;</span><br></pre></td></tr></table></figure>
<ul>
<li>左外连接 - <code>left (outer) join</code></li>
</ul>
<p>左外连接是在两表进行自然连接，保留左表所有行，右表相应字段填充 <code>null</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table1 left join table2 on table1.col&#x3D;table2.col</span><br></pre></td></tr></table></figure>
<ul>
<li>右外连接 - <code>left (outer) join</code></li>
</ul>
<p>右外连接是在两表进行自然连接，保留右表所有行，左表相应字段填充 <code>null</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table1 right join table2 on table1.col&#x3D;table2.col</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>全外连接 - <code>left (outer) join</code></p>
<p><code>MySQL</code> 不支持全外连接。</p>
</li>
</ul>
<h5 id="组合查询"><a class="markdownIt-Anchor" href="#组合查询"></a> 组合查询</h5>
<p>使用 <code>union</code> 来组合两个查询，如果第一个查询返回 <code>M</code> 行，第二个查询返回 <code>N</code> 行，那么组合查询的结果一般为 <code>M+N</code> 行。</p>
<p><strong>每个查询必须包含相同的列、表达式和聚集函数。</strong></p>
<p>只能包含一个 <code>order by</code> 子句，并且必须位于语句的最后。</p>
<h4 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h4>
<p>数值计算</p>
<ul>
<li>
<p><code>count()</code> - 返回某列的行数</p>
</li>
<li>
<p><code>avg()</code> - 返回某列的平均值</p>
</li>
<li>
<p><code>sum()</code> - 返回某列值之和</p>
</li>
<li>
<p><code>max()</code> - 返回某列最大值</p>
</li>
<li>
<p><code>min()</code> - 返回某列最小值</p>
</li>
</ul>
<p>文本处理</p>
<ul>
<li><code>left()</code></li>
<li><code>right()</code></li>
<li><code>ltrim()</code> - 去掉字符串左边空格</li>
<li><code>rtrim()</code> - 去掉字符串右边空格</li>
<li><code>lower()</code> - 将字符串转为小写字母</li>
<li><code>upper()</code> - 将字符串转为大写字母</li>
<li><code>length()</code> - 字符串长度</li>
</ul>
<p>日期和时间</p>
<p>日期格式：<code>YYYY-MM-DD</code></p>
<p>时间格式：<code>HH:&lt;zero-width space&gt;MM:SS</code></p>
<ul>
<li>
<p><code>date_format()</code> - 返回一个格式化的日期或时间串</p>
</li>
<li>
<p><code>now()</code> - 返回当前日期和时间</p>
</li>
<li>
<p><code>date()</code> - 返回日期时间的日期部分</p>
</li>
<li>
<p><code>time()</code> - 返回日期时间的时间部分</p>
</li>
<li>
<p><code>year()</code> - 返回日期的年</p>
</li>
<li>
<p><code>month()</code> - 返回日期的月</p>
</li>
<li>
<p><code>day()</code> - 返回日期的天</p>
</li>
<li>
<p><code>hour()</code> - 返回时间的小时</p>
</li>
<li>
<p><code>minute()</code> - 返回时间的分钟</p>
</li>
<li>
<p><code>second</code> - 返回时间的秒</p>
</li>
</ul>
<h4 id="视图"><a class="markdownIt-Anchor" href="#视图"></a> 视图</h4>
<h4 id="存储过程"><a class="markdownIt-Anchor" href="#存储过程"></a> 存储过程</h4>
<h4 id="事务管理"><a class="markdownIt-Anchor" href="#事务管理"></a> 事务管理</h4>
<h4 id="权限管理"><a class="markdownIt-Anchor" href="#权限管理"></a> 权限管理</h4>
<ul>
<li>查询账户信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">select user from user;</span><br></pre></td></tr></table></figure>
<ul>
<li>创建账户</li>
</ul>
<p>新创建的账户没有任何权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user user_name identified by &#39;password&#39;;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改账户名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename user user_name to new_user_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除账户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user user_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>查看权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for user_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>授予权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select, insert on database.table to user_name;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke select, insert on database.table to user_name;</span><br></pre></td></tr></table></figure>
<p><code>grant</code> 和 <code>revoke</code> 可在几个层次上控制访问权限：</p>
<ul>
<li>整个服务器 - 使用 <code>grant all</code> 和 <code>revoke all</code></li>
<li>整个数据库 - 使用 <code>on database.*</code></li>
<li>特定的表 - 使用 <code>on database.table</code></li>
<li>特定的列</li>
<li>特定的存储过程</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>SQL语法</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>SQL语法</tag>
        <tag>表操作</tag>
        <tag>表数据操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/archives/6c92115f.html</url>
    <content><![CDATA[<h3 id="spring-简介"><a class="markdownIt-Anchor" href="#spring-简介"></a> Spring 简介</h3>
<span id="more"></span>
<h3 id="ioc"><a class="markdownIt-Anchor" href="#ioc"></a> <code>IoC</code></h3>
<p><strong>IoC</strong> is also known as dependency injection (<strong>DI</strong>).</p>
<p>It is a process whereby objects define their dependencies (that is, the other objects they work with) only through <strong>constructor arguments</strong>, <strong>arguments to a factory method</strong>, or <strong>properties that are set on the object instance</strong> after it is constructed or returned from a factory method.</p>
<p><strong>The container then injects those dependencies when it creates the bean.</strong></p>
<p>In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. <strong>A bean is an object that is instantiated, assembled, and managed by a Spring IoC container</strong>. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.</p>
<h3 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> <code>AOP</code></h3>
<h3 id="事物"><a class="markdownIt-Anchor" href="#事物"></a> 事物</h3>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>IoC</tag>
        <tag>AOP</tag>
        <tag>事物</tag>
      </tags>
  </entry>
  <entry>
    <title>Red tourism in Xi’s China</title>
    <url>/archives/62818838.html</url>
    <content><![CDATA[<p>In its <mark class="label primary">heyday</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> in the 1960s and 1970s, the village of Dazhai was called a place of miracles. Millions of revolutionary <mark class="label primary">pilgrims</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> came to hear how local <mark class="label primary">peasants</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> had carved terraced grain-fields and reservoirs from its rocky hillsides, armed with little more than hand tools and love of Chairman Mao Zedong. Dazhai’s barely literate Communist Party secretary, Chen Yonggui, was <mark class="label primary">summoned</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> to Beijing and elevated to the Politburo with the rank of vice prime minister. Back then Liang Jiwen was a schoolboy, the son of a Dazhai official. He recalls <mark class="label primary">dignitaries</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> arriving each day in his corner of Shanxi province, in the dustdry Taihang mountains. He and classmates would wave flowers and sing red <mark class="label primary">hymns</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> at the roadside. “We did not get much studying done,” he recalls.</p>
<span id="more"></span>
<p>Then came the fall. In 1980, as part of a broader purge of ultra-leftists that followed Mao’s death in 1976, official Communist Party newspapers called Dazhai a <mark class="label primary">fraud</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>. Investigators charged that its miraculous grain harvests were invented. They described massive cash <mark class="label primary">subsidies</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> channelled to the supposedly self-<mark class="label primary">reliant</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> village, and thousands of soldiers sent to build its engineering marvels.</p>
<div class="note info"><p><strong>self-reliant</strong>：自立的；自力更生的；自主的</p>
</div>
<p>Now Dazhai is trying for a third act. Local officials have drawn up plans to include their village in a China-wide official campaign to promote “red tourism” and teach party history to the masses. They are pinning particular hopes on their former “people’s <mark class="label primary">commune</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>”, a well-preserved complex of cave <mark class="label primary">dwellings</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> built in 1966. An <mark class="label primary">evocative</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> place, its entrance gate still decorated with Maoist slogans, it was admitted to a national register of protected sites in 2013. It is still closed to the public, but plans are <mark class="label primary">afoot</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> to buy out current residents. Among them is Jia Cunlian, a widow who has lived in a cave-home there for 30 years. She remembers Chen, the Mao-era boss, as “the best of people”, who shared <mark class="label primary">exotic</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> gifts that he had received with villagers, such as melons or raisins. Still, she prefers the present day, saying: “Life was hard back then.”</p>
<p>Since the 1990s, most visitors to Dazhai for tourism have been elderly. The village has tried to <mark class="label primary">woo</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> them with <mark class="label primary">nostalgia</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup>: family-owned restaurants serving <mark class="label primary">rural</mark><sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup> dishes, including tree-bark noodles once eaten during times of <mark class="label primary">famine</mark><sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup>. But local leaders have grander ambitions now, involving what would amount to Dazhai’s political <mark class="label primary">rehabilitation</mark><sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup>. To achieve that, officials are willing to offer doses of <mark class="label primary">candour</mark><sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup>. Shi Yonghong, who heads the cultural <mark class="label primary">relics</mark><sup class="footnote-ref"><a href="#fn21" id="fnref21">[21]</a></sup> bureau of the surrounding county, Xiyang, admits that Mao’s call to “Learn from Dazhai” led to excesses by the mid-1970s, such as when communes in other parts of China dug terraced fields out of flat plains in their anxiety to obey the chairman. Mr Shi blames officials in these places for misinterpreting the policy, adding that Dazhai never asked to be a national model. But even that <mark class="label primary">grudging</mark><sup class="footnote-ref"><a href="#fn22" id="fnref22">[22]</a></sup>  admission of long-ago problems is offset by his claims that Dazhai not only fed itself during the hungriest years of the 1960s, but “sold surplus harvests to the state”. He offers no further details to back up that long <mark class="label primary">debunked</mark><sup class="footnote-ref"><a href="#fn23" id="fnref23">[23]</a></sup> assertion. Instead, he talks vaguely but grandly about the “Dazhai spirit”, which he defines as hard work and not asking for government <mark class="label primary">handouts</mark><sup class="footnote-ref"><a href="#fn24" id="fnref24">[24]</a></sup>.</p>
<p>In an office thick with cigarette smoke, overlooking a snow-covered village square, Dazhai’s <mark class="label primary">deputy</mark><sup class="footnote-ref"><a href="#fn25" id="fnref25">[25]</a></sup> party secretary, Li Huailian, chimes in. She describes the village’s story of hardships as a way to understand what President Xi Jinping means when he tells gatherings that the good times of today did not fall from the sky. Dazhai is prosperous because its people have always been diligent and followed party orders, she declares. “Where the party tells us to go, we go.” At first hearing, that is a rather <mark class="label primary">insipid</mark><sup class="footnote-ref"><a href="#fn26" id="fnref26">[26]</a></sup> summary of her village’s <mark class="label primary">tumultuous</mark><sup class="footnote-ref"><a href="#fn27" id="fnref27">[27]</a></sup> past. But these local officials know what they are doing. They want Dazhai to be a celebrated red-tourism site, promoted alongside revolutionary bases on the route of the Long March. To achieve that, they need to <mark class="label primary">grasp</mark><sup class="footnote-ref"><a href="#fn28" id="fnref28">[28]</a></sup> the role that history plays in the Xi era. To Mr Xi and his team, the past exists to provide reasons to admire the party, not to furnish evidence for judgments about its rule.</p>
<div class="note info"><p><strong>chime in</strong>：赞成，附和，插嘴说道</p>
</div>
<p><strong>Not just popes who like to claim <mark class="label primary">infallibility</mark></strong><sup class="footnote-ref"><a href="#fn29" id="fnref29">[29]</a></sup></p>
<p>Real history is dangerous stuff. Past <mark class="label primary">adulation</mark><sup class="footnote-ref"><a href="#fn30" id="fnref30">[30]</a></sup> of Dazhai and of its boss, Chen—a <mark class="label primary">zealot</mark><sup class="footnote-ref"><a href="#fn31" id="fnref31">[31]</a></sup> who ordered 141 political executions and said that revolutionaries could grow grain on sandy beaches—is a reminder that to Mao, party rule was a faith-based project. It often put <mark class="label primary">ideology</mark><sup class="footnote-ref"><a href="#fn32" id="fnref32">[32]</a></sup> above expertise and common sense, with horrific results. Dazhai’s <mark class="label primary">denunciation</mark><sup class="footnote-ref"><a href="#fn33" id="fnref33">[33]</a></sup> in 1980 reflected moves by China’s then-<mark class="label primary">paramount</mark><sup class="footnote-ref"><a href="#fn34" id="fnref34">[34]</a></sup> leader, Deng Xiaoping, to create a rational, technocratic state. Deng’s gamble was that the party did not need personality <mark class="label primary">cults</mark><sup class="footnote-ref"><a href="#fn35" id="fnref35">[35]</a></sup> to maintain support. Instead, he sought a <mark class="label primary">mandate</mark><sup class="footnote-ref"><a href="#fn36" id="fnref36">[36]</a></sup> based on making China strong and prosperous. To make a case for market-based reforms that he believed vital to that project, he was <mark class="label primary">pragmatically</mark><sup class="footnote-ref"><a href="#fn37" id="fnref37">[37]</a></sup> willing to allow Maoist mistakes to be named.</p>
<p>Mr Xi favours a synthesis of these two approaches. As the party approaches its 100th anniversary in July, its leaders urge the public to contrast China’s economic rise and social stability with economic decline and political chaos in the West. That is a Deng-style appeal to performance <mark class="label primary">legitimacy</mark><sup class="footnote-ref"><a href="#fn38" id="fnref38">[38]</a></sup>. Yet that co-exists with boosterish talk of “the brilliant achievements and valuable experience accumulated by our party ”. Maoist disasters are not mentioned. In the Xi era, when Chinese scholars dwell on past mistakes they are guilty of “historical <mark class="label primary">nihilism</mark><sup class="footnote-ref"><a href="#fn39" id="fnref39">[39]</a></sup>”, a career-ending <mark class="label primary">offence</mark><sup class="footnote-ref"><a href="#fn40" id="fnref40">[40]</a></sup>. When foreigners remember old horrors, the charge is that they seek to <mark class="label primary">overthrow</mark><sup class="footnote-ref"><a href="#fn41" id="fnref41">[41]</a></sup> Communist rule. Last month Mr Xi gathered senior leaders to stress the importance of studying party history correctly, to pass “red genes and revolutionary fire” to later generations.</p>
<p>Mr Xi seeks a mandate that is both pragmatic and faith-based. The common thread is absolute loyalty. By the logic of the Xi era, the Chinese are able to benefit from wise party rule today because they always trusted the party, even when it erred. Objectively, Dazhai does not deserve to be a place of pilgrimage again. Still it may happen. In China, the past is what the party needs it to be.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [ˈheɪdeɪ] 全盛时期 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [‘pɪlɡrɪm] 朝圣 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [ˈpez(ə)nt] 农民 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [‘sʌmən] 召唤，传唤 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [‘dɪɡnɪ.teri] 权贵，显要人物 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [hɪm] 1. 颂歌，（宗教）赞美诗；2. 为…唱赞歌 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [frɔd] 骗子；欺诈罪 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [‘sʌbsədi] 补贴，津贴 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [riˈlaɪərnt] 信赖的；依赖的 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 [‘kɑ.mjun] 公社 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [‘dwelɪŋ] 住宅，住所，公寓 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [ɪ’vɑkətɪv] 引起记忆的，唤起感情的 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [ə’fʊt] 计划中 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [ɪɡ’zɑtɪk] 1. 舶来品；2. 外来的，来自异国的；3. 异国风情的 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [wu] 1. 争取…的支持，寻求…的赞同；2. 求爱，追求（异性） <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [nɑ’stældʒə] 怀旧 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p>美 [‘rʊrəl] 乡村的，田园的 <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn18" class="footnote-item"><p>美 [‘fæmɪn] 饥荒；严重缺乏 <a href="#fnref18" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn19" class="footnote-item"><p>美 [ˌrihəˌbɪlɪˈteʃən] 恢复；平反 <a href="#fnref19" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn20" class="footnote-item"><p>坦诚 <a href="#fnref20" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn21" class="footnote-item"><p>美 [‘relɪk] 遗迹；遗物；遗风；遗俗 <a href="#fnref21" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn22" class="footnote-item"><p>美 [ɡrʌdʒ] 怨恨；积怨；嫌隙 <a href="#fnref22" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn23" class="footnote-item"><p>美 [di’bʌŋk] 揭露，说…的坏话 <a href="#fnref23" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn24" class="footnote-item"><p>美 [‘hænd.aʊt] 1. 讲义，传单；2. 救济品，政府拨款 <a href="#fnref24" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn25" class="footnote-item"><p>美 [‘depjəti] 副的，副手 <a href="#fnref25" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn26" class="footnote-item"><p>美 [ɪn’sɪpɪd] 无味道的；淡而无味的；没有趣味的；枯燥乏味的 <a href="#fnref26" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn27" class="footnote-item"><p>美 [tu’mʌltʃʊəs] 嘈杂的；喧嚣的；热烈的；欢腾的 <a href="#fnref27" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn28" class="footnote-item"><p>美 [ɡræsp] 1. 抓住，紧握；2. 理解，领会 <a href="#fnref28" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn29" class="footnote-item"><p>英 [ɪnˌfælə’bɪləti] 绝对正确；绝无错误；绝对确实 <a href="#fnref29" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn30" class="footnote-item"><p>美 [.ædʒə’leɪʃ(ə)n] 奉承，阿谀，过分地称赞 <a href="#fnref30" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn31" class="footnote-item"><p>美 [zelət] 狂热者 <a href="#fnref31" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn32" class="footnote-item"><p>美 [.ɪdi’ɑlədʒi] 意识形态 <a href="#fnref32" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn33" class="footnote-item"><p>美 [dɪ.nʌnsi’eɪʃ(ə)n] 指责，公开谴责 <a href="#fnref33" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn34" class="footnote-item"><p>美 [‘perə.maʊnt] 1. 首要的；至高无上的；2. 有最高权力的人，元首 <a href="#fnref34" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn35" class="footnote-item"><p>美 [kʌlt] 崇拜；邪教 <a href="#fnref35" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn36" class="footnote-item"><p>美 [‘mæn.deɪt] 授权，任命 <a href="#fnref36" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn37" class="footnote-item"><p>实用地；务实地 <a href="#fnref37" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn38" class="footnote-item"><p>美 [lə’dʒɪtəməsi] 合理性，合法性 <a href="#fnref38" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn39" class="footnote-item"><p>美 [‘naɪə.lɪzəm] 虚无主义，无政府主义 <a href="#fnref39" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn40" class="footnote-item"><p>英 [ə’fens] 1. 进攻；2. 过错；3. 犯罪，违法行为 <a href="#fnref40" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn41" class="footnote-item"><p>美 [.oʊvər’θroʊ] 颠覆，推翻 <a href="#fnref41" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>China</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>China</tag>
      </tags>
  </entry>
  <entry>
    <title>The world this week Politics</title>
    <url>/archives/4eb6fb1.html</url>
    <content><![CDATA[<p>In Hong Kong, 47 activists were charged with violating the territory’s national-security law. As a court began hearing defendants’ <mark class="label primary">petitions</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> to be released on bail, hundreds of supporters gathered outside. The activists’ alleged crimes relate to an informal primary ballot held last year by pro-democracy politicians in order to produce strong candidates for the Legislative Council. The government saw this as a plot to gain control of the council and block its work.</p>
<span id="more"></span>
<p>China’s Communist Party began a <mark class="label primary">purge</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> of agencies involved in maintaining law and order, including the police, secret police, courts and the prison system. The aim is to cleanse their ranks of corruption and disloyalty to China’s leader, Xi Jinping.</p>
<p>Security services killed dozens of people demonstrating against the recent military <mark class="label primary">coup</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> in Myanmar. The <mark class="label primary">repression</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> of the protests has been getting steadily more violent.</p>
<p>Mushtaq Ahmed, a writer <mark class="label primary">detained</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> without trial for almost a year in Bangladesh for criticising the government online, died in a prison hospital. On the same day in neighbouring India the government published new rules obliging social-media firms and digital publishers to remove certain content at the government’s request.</p>
<p>In El Salvador, New Ideas, a party created in 2018 by Nayib Bukele, the 39-year-old president, won a <mark class="label primary">landslide</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> in legislative elections, taking at least 56 seats in the 84-seat assembly. Mr Bukele, who has been president since 2019, has an approval rating of around 90%. Now he has even fewer checks on his power.</p>
<p>Controversial changes to energy rules in Mexico proposed by the president, Andrés Manuel López Obrador, became more probable. The Senate agreed to a <mark class="label primary">measure</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> that could give the state power utility priority over private firms in supplying power to the grid, even if its output is dirtier and costlier. This could <mark class="label primary">breach</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> free-trade rules.</p>
<div class="note info"><p><strong>state power utility</strong>：国家电力公司</p>
</div>
<p>America’s House of Representatives passed a bill that would make postal voting easier and weaken the voter-ID requirements favoured mostly by Republican state legislatures. The bill is unlikely to pass the Senate, where it would need the support of Republicans.</p>
<div class="note info"><p><strong>Senate</strong>：参议院</p>
<p><strong>House of Representatives</strong>：众议院</p>
<p><strong>Republican state legislatures</strong>：共和党洲议会</p>
</div>
<p>Joe Biden abandoned his attempt to appoint Neera Tanden as his budget director, because of a lack of support in the Senate. Her previous <mark class="label primary">abrasive</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> tweets about senators pondering her nomination probably did not help.</p>
<p>Andrew Cuomo, the governor of New York, said he would not resign, after three women accused him of behaving inappropriately. This comes on top of criticism of Mr Cuomo’s lack of transparency over covid-19 deaths in the state’s nursing homes.</p>
<p>America placed seven Russian officials, including Russia’s top spy, under <mark class="label primary">sanctions</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>for their alleged part in the poisoning last year of Alexei Navalny, the country’s leading opposition figure.</p>
<p>Nicolas Sarkozy, a former president of France, was <mark class="label primary">convicted</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> of corruption and sentenced to three years in prison, two of them suspended. He immediately appealed. This is the first time a French president has been handed an irreducible jail term (Jacques Chirac got a suspended prison sentence for misusing public funds as mayor of Paris).</p>
<p>Hungary’s prime minister, Viktor Orban, withdrew his Fidesz party from the European People’s Party, the centre-right and largest grouping in the European <mark class="label primary">Parliament</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>. This came as the EPP agreed to rules that would make it much easier to <mark class="label primary">expel</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> a delegation from a country, like Hungary, that violates the rule of law.</p>
<div class="note info"><p><strong>Hungary</strong>：匈牙利</p>
</div>
<p>Scotland’s first minister, Nicola Sturgeon, faced tough questions from a parliamentary committee at Holyrood about her mishandling of allegations of sexual <mark class="label primary">harassment</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> levelled at Alex Salmond, her predecessor. A <mark class="label primary">jury</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> found Mr Salmond not guilty of all charges a year ago.</p>
<p>The International Criminal Court’s chief <mark class="label primary">prosecutor</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> opened an investigation into alleged war crimes in the Palestinian territories since June 2014. After a <mark class="label primary">preliminary</mark><sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup> examination she said charges could be filed against both Israelis and Palestinians.</p>
<div class="note info"><p><strong>Palestine</strong>：巴勒斯坦</p>
<p><strong>Palestinian</strong>：巴勒斯坦人，巴勒斯坦的</p>
<p><strong>Israeli</strong>：犹太人；以色列的，以色列人的</p>
</div>
<p>Israel’s prime minister, Binyamin Netanyahu, said Iran was behind an explosion that damaged an Israeli-owned commercial vessel in the Gulf of Oman. Days later one of his ministers linked Iran to an oil spill off Israel’s coast that has caused grave environmental damage.</p>
<mark class="label primary">Amnesty</mark>International accused government forces in Mozambique, <mark class="label primary">mercenaries</mark> working with them and the <mark class="label primary">jihadists</mark> they are battling of committing war crimes. A report by the human-rights group said the warring parties have <mark class="label primary">indiscriminately</mark> killed hundreds of civilians.
<div class="note info"><p>这两个单词的注脚不知道为什么解析失败，只能用提示。</p>
<p><strong>amnesty</strong></p>
<p>音标：美 [‘æmnəsti]</p>
<p>释义：特赦</p>
<p><strong>mercenary</strong></p>
<p>音标：美 ['mɜrs(ə)n.eri]</p>
<p>释义：1. 雇佣兵，雇佣军；2. 只为金钱的，唯利是图的</p>
<p><strong>jihadist</strong>：圣战士</p>
<p><strong>indiscriminate</strong>：</p>
<p>音标：英 [ˌɪndɪ’skrɪmɪnətlɪ]</p>
<p>释义：不加区别地，不加选择地，无差别地</p>
</div>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [pə’tɪʃ(ə)n] 请求，请愿，申请 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [pɜrdʒ] 清除 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [ku] 政变 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [rɪ’preʃ(ə)n] 抑制，镇压 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [dɪ’teɪn] 拘留，扣押 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [‘lænd.slaɪd] 1. 滑坡；2. 一方占绝对优势的选举 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [‘meʒər] 1. 测量，衡量；2. 措施 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [britʃ] 违反，违背 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [ə’breɪsɪv] 1. 有研磨作用的；2. 生硬粗暴的，伤人感情的 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 ['sæŋkʃ(ə)n] 1. 制裁；2. 批准，许可 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [kən’vɪkt] 定罪 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [‘pɑrləmənt] 议会，国会 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [ɪk’spel] 赶走，驱逐出境 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [hə’ræsmənt] 骚扰 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [‘dʒʊri] 陪审团，裁判委员会 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [‘prɑsɪ.kjutər] 检察官，公诉人，原告律师 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p>美 [prɪ’lɪmə.neri] 预备的，初步的 <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>The world this week</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Politics</tag>
      </tags>
  </entry>
  <entry>
    <title>The world this week Business</title>
    <url>/archives/2b46cafc.html</url>
    <content><![CDATA[<p>The American Senate began debate on Joe Biden’s $1.9trn stimulus bill, after it passed the House of Representatives. Mr Biden will need the support of all 50 Democratic senators if it is to succeed. In one setback, the Senate’s parliamentarian said that a measure to raise the minimum wage to $15 an hour could not be included in the legislation under the procedure by which the Democrats have introduced the bill.</p>
<span id="more"></span>
<p><strong>Spend now, pay later</strong></p>
<p>In Britain the government’s budget provided yet more spending on workers and businesses to <mark class="label primary">cushion</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> the blow of the pandemic. The <mark class="label primary">furlough</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> scheme, which pays staff wages and has been in place for a year, was extended to September. Fiscal support for the pandemic now totals £407bn ($570bn). To pay for all this the government set out tax increases, including a rise in corporation tax from 19% to 25% in 2023. Before that there will be a two-year tax break for companies intended to <mark class="label primary">spur</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> investment.</p>
<p>Bond markets were quieter, following a <mark class="label primary">rout</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> in prices sparked by fears of rising inflation in America. The yield on the ten-year US Treasury bond fell back to 1.46%, having risen above 1.6%. It started the year well below 1%.</p>
<p>India’s economy pulled out of recession in the last three months of 2020, but only just. GDP expanded by 0.4% in the quarter, year on year. A huge stimulus package helped Brazil limit the pandemic’s damage to its GDP, which shrank by 4.1% last year, a better performance than economies of similar size.</p>
<div class="note info"><p><strong>Brazil</strong>：巴西</p>
</div>
<p>February was a record month for the value of SPACS, shell companies that list on a stock exchange with the intent of merging with an existing company, and so avoid the rigours of an IPO. SPACS struck 50 merger deals last month, totalling almost $109bn.</p>
<p>Rio Tinto’s chairman decided to step down within a year because of the mining company’s <mark class="label primary">demolition</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> of a sacred <mark class="label primary">Aboriginal</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> cave in Australia in May 2020. Australian pension funds had pressed Rio’s board to hold senior executives to account for the destruction.</p>
<div class="note info"><p><strong>step down</strong>：辞职，下台</p>
</div>
<p>Another week and another carmaker announced an ambitious electrification strategy, as Volvo said it would phase out all petrol-powered cars, including hybrids, by 2030, and sell only fully electric ones. It also plans to disrupt the established way of selling cars by <mark class="label primary">ditching</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> dealerships and making its new cars available only online.</p>
<div class="note info"><p><strong>phase out</strong>：逐步淘汰，逐步取消，逐步停止</p>
</div>
<p>Las Vegas Sands, founded by the late Sheldon Adelson, reached an agreement to sell the Venetian hotel in Las Vegas to private-equity and property investors for more than $6bn. The investors are<br>
taking a <mark class="label primary">punt</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> that Sin City will <mark class="label primary">rebound</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> when covid-19 restrictions are eased. The deal <mark class="label primary">underpins</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>Las Vegas Sands’ focus on its <mark class="label primary">casinos</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> in Macau and Singapore, the backbone of its business.</p>
<p>Both Lufthansa and International Airlines Group, the owner of British Airways, reported big annual losses. Looking for ways to save cash, BA has reached an agreement to defer £450m ($628m) in pension deficit contributions.</p>
<p>Covid-related restrictions brought about a 6% drop in energy-related carbon-dioxide emissions last year, according to the International Energy Agency. But as demand picked up, so did emissions, which were 2% higher in December 2020 than in December 2019. With its economy rebounding, China’s emissions rose over the year, by 0.8%; in America they fell by 10%. Globally, the decline in road activity accounted for 50% of the fall in demand for oil, and the <mark class="label primary">slump</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> in aviation for 35%.</p>
<p>There may be a new president in the White House, but Amazon still finds itself caught in political crosshairs. Joe Biden warned the retail giant this week not to interfere with a vote by workers at a warehouse in Alabama on whether to unionise, a first for all the employees at an Amazon facility. Meanwhile, Amazon was forced to change the recent redesign of its app logo, because the Twitterati thought it resembled Hitler.</p>
<div class="note info"><p><strong>Twitterati</strong>：网络达人</p>
</div>
<p>Birkenstock was sold to a private-equity firm backed by lvmh in a deal worth €4bn ($4.8bn). Associated with hippies in the 1970s until they became de rigueur for hipsters in the 1990s, Birkenstock sandals<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> trace their history back to Germany in 1774; the current design dates from the 1960s. The Birkenstock family will no longer be sole owners, but they will retain a minority <mark class="label primary">stake</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>.</p>
<p><strong>A one-way ticket?</strong></p>
<p>Maezawa Yusaku, a Japanese <mark class="label primary">tycoon</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup>, invited applications for eight places on his planned trip around the Moon, pencilled in for 2023. Meanwhile SpaceX, the firm that will fly Mr Maezawa and his companions, was testing a prototype version of the rocket he hopes to use. The machine managed to return to its landing pad after flying 10km into the air, but blew up a few minutes later.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 ['kʊʃ(ə)n] 1. 坐垫，靠垫；2. 缓和，缓冲（打击） <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [‘fɜrloʊ] （尤指在国外服役士兵的）休假（许可) <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [spɜr] 刺激，激励，促进 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [raʊt] 溃败 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [.demə’lɪʃ(ə)n] 1. 破坏，拆除；2. 废墟 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [ˌæbəˈrɪdʒən(ə)l] 1. 土著，原住民；2. 土著的，原始的 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [dɪtʃ] 摆脱，抛弃 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [pʌnt] 赌博，打赌 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [rɪ’baʊnd] 1. 篮板球；2. 复兴，复苏 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 [.ʌndər’pɪn] 巩固，支撑，加强 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [kə’sinoʊ] 赌场 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [slʌmp] 暴跌，锐减 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 ['sænd(ə)l] 凉鞋 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [steɪk] 股份 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [taɪˈkuːn] 大亨，企业巨头 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>The world this week</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Business</tag>
      </tags>
  </entry>
  <entry>
    <title>Bouncing back</title>
    <url>/archives/214164ed.html</url>
    <content><![CDATA[<center><b>How to make a social safety net for the post-covid world</b></center>
<p>After the Depression and the second world war, voters and governments in rich countries recast the relationship between the state and its citizens. Now the pandemic has seen the old rules on social spending <mark class="label primary">ripped</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> up. More than three-quarters of Americans support President Joe Biden’s $1.9trn stimulus bill, which is due in the Senate and includes $1,400 cheques for most adults. And in the budget on March 3rd Britain extended a scheme to pay the wages of furloughed workers until September, even as public debt hit its highest level since 1945 (see leader). Such <mark class="label primary">boldness</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> brings dangers: governments could stretch the public finances to breaking-point, <mark class="label primary">distort</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> incentives and create <mark class="label primary">sclerotic</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> societies. But they also have a chance to create new social-welfare policies that are affordable and which help workers thrive in an economy facing technological <mark class="label primary">disruption</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>. They must seize it.</p>
<span id="more"></span>
<p>The past year has seen a wild experiment in social spending. The world launched at least 1,600 new social-protection programmes in 2020 (see Briefing). Rich countries have provided 5.8% of GDP on average to help record numbers of workers. Government debts are piling up , but so far low interest rates mean that they are cheap to service. The public’s mood had already been shifting. Britons used to grumble that <mark class="label primary">layabouts</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> <mark class="label primary">sponged</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> off the welfare state; now they are more likely to say help is too <mark class="label primary">stingy</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>. Last year over two-thirds of Europeans said they supported a universal basic income (UBI), an unconditional recurring payment to all adults. Affluent professionals have had their gaze drawn to the working conditions of those who deliver food and look after the sick. The struggles of women who have dropped out of the workforce to care for children and the elderly have become impossible to ignore.</p>
<div class="note info"><p><strong>sponge off</strong>：依赖…生活</p>
</div>
<p>The social safety net in many rich countries was <mark class="label primary">creaking</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> before covid-19 struck. Modelled on the ideas of Ottovon Bismarck and William Beveridge, it had often failed to cushion workers from globalisation and technological and social change. In 1999-2019 the number of Americans aged 25-54 outside the labour force grew by 25%, or 4.7m, over six times more than the number who received help from the main assistance programme for <mark class="label primary">displaced</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> workers. As health-care and pension costs soared in recent years, governments cut back support for working-age people. Between 2014 and 2018 Britain’s state-pension bill grew in real terms by £4bn ($5.8bn), even as the rest of its welfare budget shrank by £ 16.5bn. A <mark class="label primary">dwindling</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> share of middle-income jobs and the growth of the gig economy fuelled fears that labour markets were changing faster than flat-footed governments could.</p>
<div class="note info"><p><strong>labour force</strong>：劳动力</p>
<p><strong>gig economy</strong>：零工经济</p>
<p><strong>flat-footed</strong>：措手不及的</p>
</div>
<p>With the public and some economists cheering on, it is <mark class="label primary">tempting</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> for politicians to <mark class="label primary">stoke</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> the economy with more ad hoc spending, or put in place vast schemes such as UBI. Instead they need to take a measured, longterm view. The safety net must be affordable. Tight budgets, not milk and honey, will define the 2020s. The annual deficit of big advanced economies was 4% of their combined GDP even before the pandemic—and much ageing is still to come. Already bond yields are rising again (see Finance section). Social spending must flow quickly and automatically to those who need it—not, as in America, only during crises when a panicked government passes emergency legislation. And governments need to find mechanisms that cushion people more effectively against income shocks and joblessness without discouraging work or crushing economic dynamism.</p>
<p>The first step towards satisfying these goals is to use technology to make ancient bureaucracies more efficient. Postal cheques, 1980s mainframe computers and <mark class="label primary">shoddy</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> data need to be relegated to the past. In the pandemic many governments temporarily short-circuited their existing systems because they were too slow. In Estonia and Singapore digital-identification systems and a <mark class="label primary">disdain</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> for form-filling became an asset in the crisis. More countries need to copy them and also to ensure universal access to the internet and bank accounts. The call for efficient administration may sound like tinkering but one in five poor Americans eligible for wage topups fails to claim them. <mark class="label primary">Nimble</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> digital-payment systems will reduce the need for costly universalism as a fail-safe, and allow better targeting and quicker response times. Digital systems also permit the emergency option of making temporary cash payments to all households.</p>
<div class="note info"><p><strong>wage topup</strong>：工资补贴</p>
<p><strong>fail-safe</strong>：失效保护；事故保险</p>
</div>
<p>That is the easy part. Balancing generosity and dynamism is harder. Part of the solution is to top up the wages of low-paid workers. AngloSax on countries have done this well since reforms in the 1990s and 2000s. But wage topups are of little use to the jobless and are often <mark class="label primary">scant</mark><sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup> compensation for people who lose good jobs to forces beyond their control. <mark class="label primary">Paltry</mark><sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup> support for the unemployed in Britain and America preserves incentives to work but at high human cost. The sparsity of social insu ance has <mark class="label primary">undermined</mark><sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup> political support for creative destruction, the <mark class="label primary">catalyst</mark><sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup> for rising living standards. Continental Europe tends to <mark class="label primary">underwrite</mark><sup class="footnote-ref"><a href="#fn21" id="fnref21">[21]</a></sup> traditional workers’ incomes more generously. But the distortion of incentives leads to higher unemployment and divisions between <mark class="label primary">coddled</mark><sup class="footnote-ref"><a href="#fn22" id="fnref22">[22]</a></sup> insiders and a <mark class="label primary">precariat</mark><sup class="footnote-ref"><a href="#fn23" id="fnref23">[23]</a></sup>. Both sides of the Atlantic lack a permanent safety net that insures gig workers and the self-employed.</p>
<p>There is one country that combines labour-market flexibility with generosity: Denmark, which spends large sums—1.9% of GDP in 2018—on retraining and on advising the jobless. These interventions stop the unemployed from falling into dependency. The inadequacies of policies elsewhere are often glaring . Britain’s efforts have <mark class="label primary">flopped</mark><sup class="footnote-ref"><a href="#fn24" id="fnref24">[24]</a></sup>. America’s comparable spending is less than a 20th as large as Denmark’s, even though the few lucky beneficiaries of its “trade-adjustment assistance” earn $50,000 more in wages, on average, over a decade.</p>
<p><strong>Bungee economics</strong></p>
<p>For years social spending has favoured the elderly and an outdated safety net. It should be rebuilt around active labour-market policies that use technology to help everyone from shop-workers who are victims of disruption to mothers whose skills have <mark class="label primary">atrophied</mark><sup class="footnote-ref"><a href="#fn25" id="fnref25">[25]</a></sup> and those whose jobs are replaced by machines. Governments cannot eliminate risk, but they can help ensure that if calamity strikes, people bounce back.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [rɪp] （突然或猛烈地）撕破，撕裂 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [‘boʊldnɪs] 1. 魄力；2. 大胆，冒失 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [dɪ’stɔrt] 扭曲，使变形 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [sklə’rɑtɪk] 硬的，硬化的 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [dɪs’rʌpʃən] 中断；破坏；紊乱，混乱；故障，失常 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [‘leɪə.baʊt] 懒汉，游手好闲的人 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [spʌndʒ] 1. 海绵；2. 用海绵擦拭 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [‘stɪndʒi] 小气的，吝啬的 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [krik] 吱吱作响，运转不灵 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 [dɪs’pleɪs] 取代，置换；流离失所 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 ['dwɪnd(ə)l] 缩小，逐渐减少 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [‘temptɪŋ] 吸引人的，诱人的 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [stoʊk] 1. 给…添加（燃料）；2. 煽动，刺激 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [‘ʃɑdi] 劣质的，做工粗糙的 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [dɪs’deɪn] 蔑视，鄙视，不屑 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [ˈnɪmb(ə)l] 敏捷的，灵活的 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p>美 [skænt] 一丁点的，微小的，不足的 <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn18" class="footnote-item"><p>美 [‘pɔltri] 可忽略不计的，微不足道的 <a href="#fnref18" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn19" class="footnote-item"><p>美 [.ʌndər’maɪn] 逐渐削弱（信心、权威等）；使逐步减少效力；从根基处破坏；挖…的墙脚 <a href="#fnref19" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn20" class="footnote-item"><p>美 ['kæt(ə)lɪst] 催化剂，引发变化的因素 <a href="#fnref20" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn21" class="footnote-item"><p>美 [.ʌndər’raɪt] 承担经济责任（包括支付特别费用或损失）；承担保险责任；承保；包销 <a href="#fnref21" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn22" class="footnote-item"><p>美 ['kɑd(ə)l] 娇惯，溺爱 <a href="#fnref22" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn23" class="footnote-item"><p>不稳定无资产者，朝不保夕者 <a href="#fnref23" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn24" class="footnote-item"><p>美 [flɑp] 完全失败 <a href="#fnref24" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn25" class="footnote-item"><p>美 [‘ætrəfi] 萎缩，衰退，退化 <a href="#fnref25" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>Leaders</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Leaders</tag>
      </tags>
  </entry>
  <entry>
    <title>St Augustine’s economics</title>
    <url>/archives/54889c6e.html</url>
    <content><![CDATA[<center><b>The <mark class="label primary">chancellor</mark> wants to <mark class="label primary">rein</mark> in government spending, but not yet</b></center>
<div class="note info"><p><strong>chancellor</strong>：总理，大臣；大学校长</p>
<p><strong>rein</strong>：控制</p>
</div>
<p>Britain had a particularly bad <mark class="label primary">bout</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> of covid-19 and took an especially large economic hit as a result. In response the government provided more fiscal stimulus than almost any other in the world, paying millions of people’s wages and bailing out businesses to the tune of 16% of GDP. As Britain slowly lifts its lockdown the conversation has turned to balancing the books, and ahead of the budget on March 3rd the Treasury briefed that fiscal <mark class="label primary">austerity</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> was in store. Yet Rishi Sunak, the chancellor of the <mark class="label primary">exchequer</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>, will wait to turn the screws. He delivered a surprisingly generous budget, and has postponed tax rises. Like a fiscal St Augustine, he wants <mark class="label primary">continence</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>—but not yet.</p>
<span id="more"></span>
<p>The budget represents the synthesis of two opposing forces. On the one hand Mr Sunak wants to <mark class="label primary">placate</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> a range of hawkish constituencies, such as Thatcherite <mark class="label primary">backbench</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> Tory MPS who would rather the government keep taxes low and bond traders who in recent weeks have sold their investments in <mark class="label primary">sovereign</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> debt. On the other hand he is rightly concerned not to repeat the mistake of his predecessor-but-two: after the financial crisis in 2007-09 George Osborne cut spending and raised taxes too soon, thereby delaying the recovery.</p>
<p>Policies in this budget are designed to help Britain out of its deep economic hole (see Britain section). The extension of the furlough scheme from April to September will put money in people’s pockets, helping power a recovery in household spending. A highly unusual proposal to allow firms to write off 130% of investment expenses against their tax bills is designed to super-charge Britain’s <mark class="label primary">perennially</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> low rate of business investment.</p>
<p>At the same time, the budget has blind spots. Extending the furlough is better than nothing, but it would have been wiser to focus resources on boosting working age welfare, currently at its least generous level ever. This would have helped workers move from dying sectors to up-and-coming ones without seeing a sharp drop in their take-home income. And a government that likes to <mark class="label primary">trumpet</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> its green credentials should not be buying off voters by freezing taxes on fuel.</p>
<div class="note info"><p><strong>take-home income</strong>：实得工资；税后净收入</p>
</div>
<p>A bigger difficulty is that there is no credible strategy for righting the fiscal ship. True, Mr Sunak promised to raise corporation tax in 2023 from 19% to 25%. Politically that is <mark class="label primary">astute</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>. It puts the opposition Labour Party into a tricky position, forcing it to decide whether it wants to support the rise (and thus implicitly back austerity) or oppose it (and thus appear to be taking the side of Britain’s corporate fat cats).</p>
<p>In economic terms, however, Mr Sunak is being <mark class="label primary">evasive</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>. The yield from even large rises in corporation tax is low. Moreover, will he actually impose such a tax rise just when the 130% investment write-off ends and when an election is likely to be just around the corner? It is more probable that the chancellor hopes the coming investment boom is so large that he can cancel most of the tax increase and that he will be able to pass a smaller rise as, in effect, a “cut”.</p>
<p>At some point, however, politics will catch up with him. That is in part because of Britain’s rapidly ageing population, and in part because the government has bizarrely made no provision whatsoever for virus-related costs beyond next year. Britain is on an <mark class="label primary">inexorable</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> trend towards higher budget deficits. It is hard to find much waste in the public sector, which limits the scope to cut spending. The chancellor will have to fall back on higher taxes. He will have to consider slaying sacred Tory cows, including a <mark class="label primary">pledge</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> not to increase income tax. He should consider reform of property and value-added taxes. Hawkish <mark class="label primary">rhetoric</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> is all very well, but eventually Mr Sunak will have to follow St Augustine onto the path of fiscal virtue.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [baʊt] 一次，一场，一回 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [ɔ’sterəti] 节俭，简朴，朴素；（经济的）紧缩 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [ɪks’tʃekə®] 国库，（英国）财政部 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [‘kɒntɪnəns] 节制，克制 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [‘pleɪkeɪt] 安抚，平息（怒气） <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [‘bæk.bentʃ] 普通议员席 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [‘sɑvrən] 君主，元首，最高统治者 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>英 [pə’reniəli] 终年地，常年地 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [‘trʌmpət] 1. 喇叭，小号；2. 宣扬，吹嘘 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 [ə’stut] 精明的，狡猾的 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [iˈveɪsiv] 回避的，推诿的，闪烁其词的，含糊的 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [ɪn’eksərəb(ə)l] 不可阻挡的；无法改变的 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [pledʒ] 誓言，保证 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [‘retərɪk] 修辞；花言巧语 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>Leaders</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Leaders</tag>
      </tags>
  </entry>
  <entry>
    <title>It’s complicated</title>
    <url>/archives/386aba8.html</url>
    <content><![CDATA[<center><b>What America should do in the Middle East</b></center>
<p>Joe biden has made no secret of his frustration with Saudi Arabia. A “<mark class="label primary">pariah</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>” with “very little social <mark class="label primary">redeeming</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> value”, he called its government in 2019. One of his first acts as president was to end American support for the Saudiled war in Yemen. Last week he released an intelligence report that blamed the kingdom’s crown prince, Muhammad bin Salman, for the murder of a journalist in 2018. But at that point Mr Biden’s ideals collided with America’s national interest. The prince may be a brute, but he is also in charge of an important American ally. In the end Mr Biden decided that the cost of punishing him would have been too high.</p>
<span id="more"></span>
<div class="note info"><p><strong>make no secret of</strong>：毫不掩饰</p>
</div>
<p>This is all part of a larger cost-benefit analysis taking place in the White House. Mr Biden has signalled that he wants to make the Middle East less of a priority. He has good reason to pull back. America has thousands of soldiers spread across Arab countries, yet its interventions have produced <mark class="label primary">dismal</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> results. Many Americans argue that their country should instead focus on countering China’s growing global influence. The question facing the Biden administration is how to lighten America’s burden in the Middle East while still protecting its vital interests there. That will not be easy.</p>
<p>It helps that those interests are not what they were. For decades America focused on the flow of Gulf oil and the survival of Israel. Last year America was a net exporter of both oil and natural gas. And Israel, the best-armed country in the region, now has formal ties with many of its Arab neighbours.</p>
<p>Yet vital interests remain. Terrorist groups that find havens in Iraq, Syria or Yemen may end up striking the West. If the government in Iran seeks a bomb it risks setting off an arms race that would blow apart the global non-<mark class="label primary">proliferation</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> <mark class="label primary">regime</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> and permanently put the Middle East on a nuclear knife-edge.</p>
<p>In the past America has sought to impose magical solutions. George W. Bush attempted to <mark class="label primary">decree</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> a democracy in Iraq. Donald Trump <mark class="label primary">wielded</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> sanctions to force <mark class="label primary">capitulation</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> or a change in regime in Iran. As these approaches failed, American policy swung between interest and <mark class="label primary">apathy</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>, and war and <mark class="label primary">retreat</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>.</p>
<p>Mr Biden should instead try to bring stability by getting the region to take responsibility for itself and discouraging leaders from being so dependent on armed force. America’s big arms sales to the region’s <mark class="label primary">despots</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> are a source of trouble. And they do little to help the region’s people, who suffer from poor government and abusive regimes , which in turn foster extremism. RAND, a think-tank, recently noted that America spends <mark class="label primary">roughly</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> as much on Egypt’s armed forces as it does on aid to the entire region. Mr Biden should cancel the blank cheque for mischief-making and repression.</p>
<p>The second leg to this strategy is to enhance the Middle East’s capacity for diplomacy. The deals known as the Abraham Accords, which the Trump administration helped <mark class="label primary">broker</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> between Israel and several Arab states, are a tentative start towards upgrading the region’s diplomatic machinery. Mr Biden should encourage more such talking. Saudi Arabia and the United Arab Emirates were shocked when Mr Trump failed to come to their defence after attacks by Iran and its proxies. Iran is suffering under American sanctions. Their anxiety gives Mr Biden leverage in asserting that lowering tensions is in everyone’s interest.</p>
<p>Encouraging diplomacy does not mean withdrawing all American troops. They have helped suppress Islamic State and al-Qaeda, which are still active. And soft power tends to be more effective when hard power <mark class="label primary">lurks</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> in the background. For example, the air strike on an Iranian-backed <mark class="label primary">militia</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> in Syria last month was <mark class="label primary">retaliation</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> for an attack on Americans in Iraq—and a signal to the government in Tehran that Mr Biden would not roll over in negotiations to revive the Iran nuclear deal. Talking is not easy but, if America wants to focus less on a troubled part of the world, it is the only way ahead.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [pə’raɪə] 被社会遗弃者，贱民，弃民 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [rɪ’dim] 赎回；救赎；兑换；兑现 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [‘dɪzməl] 阴郁的，凄凉的，惨淡的 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [prəˌlɪfəˈreɪʃ(ə)n] 增殖，扩散 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [reɪ’ʒim] 政权，制度 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [dɪ’kri] 判决，颁布，裁定 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [wiːld] 行使，运用，挥舞 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [kəˌpɪtʃəˈleʃən] 投降 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [‘æpəθi] 冷漠，冷淡 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 [rɪ’trit] 撤退；退却，退缩 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [‘de.spɑt] 暴君，独裁者，专制统治者 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [‘rʌfli] 大致，差不多；粗暴地 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [‘broʊkər] 经纪人，经济商；协商 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [lɜrk] 潜伏，埋藏；诡计，花招 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [mə’lɪʃə] 民兵组织 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [rɪ.tæli’eɪʃ(ə)n] 报复，反击 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>Leaders</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Leaders</tag>
      </tags>
  </entry>
  <entry>
    <title>The darkest corners</title>
    <url>/archives/bef6e425.html</url>
    <content><![CDATA[<center><b>A clear-out of the security agencies shows the opacity of power in China</b></center>
<p>Purges have grown more common since Xi Jinping took over as China’s leader in 2012. To <mark class="label primary">curb</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> <mark class="label primary">graft</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> and <mark class="label primary">snuff</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> out any opposition to his rule , Mr Xi has been hunting in every corner of the country’s vast bureaucracy. Hundreds of thousands of officials have been punished. Thousands, many of them high-ranking, have been sent to prison. Remarkably, however, some people do not appear to have got the message. A new campaign has just been launched within the domestic security services (see China section). Weeding out the disloyal is its primary goal.</p>
<span id="more"></span>
<div class="note info"><p><strong>Weeding out</strong>：淘汰，清除</p>
</div>
<p>Can there still be serious opposition to Mr Xi? There is certainly little sign of it on the streets. Many ordinary citizens express content with his rule. Under him, China has become far more influential globally. The economy has kept on growing at a healthy rate (and surprisingly well despite the pandemic). His anti-corruption efforts are popular. Neither is there any obvious sign of discontent within the Communist Party elite. It seems likely that many bitterly <mark class="label primary">resent</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> the anti-graft inspectors, and that some senior officials even <mark class="label primary">gnash</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> their teeth. But those with <mark class="label primary">misgivings</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> about Mr Xi know they must keep their mouths shut and their heads down.</p>
<p>A lesson from this latest purge, however, is that the outside world only dimly understands Mr Xi’s political world. One stated aim of the campaign is to remove the “<mark class="label primary">pernicious</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> influence” of Zhou Yongkang, who was China’s security overlord just before Mr Xi took power. Mr Zhou was jailed in 2015 for corruption and leaking state secrets. Officials also accused him of “political plotting”—shorthand, many observers believe, for scheming against Mr Xi. That his name is still being in voked years later hints at tensions, but it is hard for outsiders to judge how serious they are. The agencies being targeted in the new campaign occupy the darkest corners of an opaque political system: the police, the secret police, the <mark class="label primary">judiciary</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> and the prison service. In the months leading up to the purge several powerful figures within this apparatus were <mark class="label primary">toppled</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>. One was the chief of police in Shanghai, who has been accused of forming “<mark class="label primary">factions</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>”. All detail of what that may mean is a closely guarded secret.</p>
<p>Despite this, the new purge contains clear messages. One is Mr Xi’s appetite for power. The campaign will wrap up in time for a big political event late in 2022: the five-yearly party congress. He looks sure to use this to extend his rule for another five years, in <mark class="label primary">defiance</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> of the convention that general secretaries step down after a decade. Tightening control over the security forces will help crush any opposition to his innovation.</p>
<div class="note info"><p><strong>wrap up</strong>：完成，结束</p>
<p>**step down **：辞职，下台</p>
</div>
<p>That raises the other, still bigger, reason to pay attention. For all the seeming <mark class="label primary">relentlessness</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> of the rise of China under an increasingly <mark class="label primary">adamantine</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> <mark class="label primary">authoritarianism</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>, politics can pack surprises that suddenly change the country’s <mark class="label primary">trajectory</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup>. Consider the arrest of Mao Zedong’s widow and others in the “Gang of Four” in 1976, the struggle that brought Deng Xiaoping to power two years later, the regime-threatening splits within the party that emerged during the Tiananmen Square <mark class="label primary">protests</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> of 1989 and the political bloodletting that eliminated Mr Xi’s rivals in the lead-up to his own anointment. You cannot rule out more such <mark class="label primary">disruptive</mark><sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup> shocks.</p>
<p>In the build-up to next year’s congress, the <mark class="label primary">murky</mark><sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup> waters of Chinese politics will deserve even closer <mark class="label primary">scrutiny</mark><sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup>. That is in part because Mr Xi <mark class="label primary">defies</mark><sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup> norms. As well as rejecting the modern principle that China’s leader gets only ten years at the top, he has seized more levers of power than any ruler since Mao. It is also because, under Mr Xi, the regime has become even more secretive. Alas, such secrecy makes for a government less accountable to citizens and more likely to catch the world unaware.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [kɜrb] 抑制，遏制 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [ɡræft] 贪污 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [snʌf] 掐灭 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [rɪ’zent] 愤恨，憎恶 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [næʃ] 咬牙切齿 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [mɪs’ɡɪvɪŋ] 疑虑，顾忌，不安 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [pər’nɪʃəs] 有害的，恶性的 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [dʒu’dɪʃəri] 司法机关 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 ['tɑp(ə)l] 推翻，颠覆 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 ['fækʃ(ə)n] 派别，党派 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [dɪ’faɪəns] 反抗，违抗，挑战，拒绝服从 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [rɪ’lentləs] 无情，残酷 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [ˌædə’mæntaɪn] 坚韧的，坚定不移的 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [ɔ.θɔrɪ’teriə.nɪzəm] 独裁主义 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [trə’dʒektəri] 轨迹，轨道 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [‘proʊ.test] 抗议，反对 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p>美 [dɪs’rʌptɪv] 破坏性的，颠覆性的，引起混乱的 <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn18" class="footnote-item"><p>美 [‘mɜrki] 浑浊的，阴暗的 <a href="#fnref18" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn19" class="footnote-item"><p>美 ['skrut(ə)ni] 仔细检查；认真彻底的审查 <a href="#fnref19" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn20" class="footnote-item"><p>美 [dɪ’faɪ] 蔑视，不顾，公然反抗 <a href="#fnref20" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>Leaders</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Leaders</tag>
      </tags>
  </entry>
  <entry>
    <title>The lessons of Fukushima</title>
    <url>/archives/5188b436.html</url>
    <content><![CDATA[<center><b>Nuclear power must be well run, not ditched</b></center>
<p>It has been ten years since a <mark class="label primary">tsunami</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> laid waste the Pacific coast of northern Honshu, Japan’s most populous island. The tsunami and the undersea earthquake which triggered it, the largest ever recorded in the region, killed nearly 20,000 people, destroyed over 100,000 homes and threw the lives of tens of millions into <mark class="label primary">turmoil</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>. The direct economic cost, estimated at over $200bn, was larger than that of any other natural disaster the world has seen. And yet for many around the world the event is remembered for just one thing: the <mark class="label primary">ensuing</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> crisis at the Fukushima Daiichi nuclear power plant (see Asia section).</p>
<span id="more"></span>
<div class="note info"><p><strong>Honshu</strong>：本州岛</p>
<p><strong>Fukushima</strong>：福岛</p>
</div>
<p>The earthquake cut the plant off from outside sources of electricity. The tsunami easily topped the plant’s sea walls, flooding the underground bunkers containing its emergency generators—a foreseeable risk Japan’s neutered regulators had failed to foresee. Because there was no way to cool the reactor cores, the nuclear fuel within them began to melt; amid fire, explosion and alarming amounts of radiation, a <mark class="label primary">puddle</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> from hell began eating into the plant’s concrete foundations.</p>
<p>The world looked on <mark class="label primary">aghast</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>. In Shanghai and San Francisco <mark class="label primary">iodine</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> tablets and iodised salt jumped off the shelves as people looked for <mark class="label primary">prophylaxis</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> of which they had no need. In Germany the chancellor, Angela Merkel, who had long stood with business leaders against the country’s powerful anti-nuclear movement, ordered its reactors phased out. In China the world’s largest new nuclear-plant programme was put on hold. Talk of a “nuclear <mark class="label primary">renaissance</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>” to fight climate change fell silent.</p>
<div class="note info"><p><strong>phase out</strong>：淘汰</p>
<p><strong>put on hold</strong>：暂停</p>
</div>
<p>The reaction, though understandable, was wrong. Nuclear power has a lot of drawbacks. Its large, slowly built plants are expensive both in absolute terms and in terms of the electricity they produce. Its very small but real risk of catastrophic failure requires a high level of regulation, and it has a disturbing history of regulatory capture, amply demonstrated in Japan. It produces extremely long-lived and toxic waste. And it is associated with the proliferation of nuclear weapons. Most of the countries outside Europe that use nuclear power have some history of attempting to develop a bomb. All these factors contribute to an <mark class="label primary">unease</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> with the technology felt, to greater or lesser extent, by people all around the world.</p>
<p>Against all that, though, two things must be remembered. One is that well-regulated nuclear power is safe. With the terrible Soviet-era exception of Chernobyl, nuclear disasters come without large death <mark class="label primary">tolls</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>. It was the tsunami, not radiation, that claimed nearly all those lives in Fukushima. The other is that the climate is in crisis, and nuclear plants can supply some of the vast amounts of emissions-free electricity the world needs if it is to cope. Solar and wind power are now much cheaper, but they are <mark class="label primary">intermittent</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>. Providing a reliable grid is a lot easier if some of its generating capacity can be assumed to be a vailable all the time. Nuclear provides such capacity with no ongoing emissions, and it is doing so safely and at scale around the world.</p>
<div class="note info"><p><strong>at scale</strong>：大规模</p>
</div>
<p>Despite this, safe and productive nuclear plants are being closed across the rich world. Those closures and the retirement of older sites mean that advanced economies could lose two-thirds of their nuclear capacity by 2040, according to the International Energy Agency. If new fossil-fuel infrastructure fills the gap, it will last for decades. If renewables do so, the opportunity cost will be measured in gigatonnes of carbon. Renewables replacing nuclear capacity would almost always be better deployed to replace fossil-fuel capacity.</p>
<p>Sometimes the closure of nuclear plants is largely a matter of economics. In places where emitting carbon dioxide comes with no price, such as America, the benefits of being emissions-free are hidden from the market. That hurts nuclear, and it should be rectified. When closure is political, the <mark class="label primary">onus</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> is on Green politicians, in particular, to change their tune. To <mark class="label primary">hasten</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> the decline of nuclear power is <mark class="label primary">wilfully</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> to <mark class="label primary">hobble</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> the world in the greatest environmental struggle of all.</p>
<p>The argument for keeping existing nuclear plants open has been strengthened, in some places, by one of the responses to Fukushima: greater independence for nuclear regulators. Britain granted new freedom to its regulator after 2011. So did Japan. Though grander hopes for reform after the tsunami bore little fruit, Japan did largely take the regulators’ hand from the power companies’ glove. Its new supervisor has made reopening <mark class="label primary">mothballed</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> nuclear power plants harder than the government would like, but that is as it should be. In Japan more than anywhere, nuclear needs to earn back trust to be useful.</p>
<p>This points to nuclear’s greatest weakness. In democracies it is expensive, owing to regulation and public antipathy, which makes new nuclear power a hard sell. The technology is thus increasingly the preserve of <mark class="label primary">autocracies</mark><sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup>—precisely the systems where good regulation is least likely. Having paused after Fukushima, China’s nuclear plans accelerated as part of an effort to reduce reliance on coal. China produced four times as much nuclear energy in 2019 as it did in 2011; it has 16 reactors under construction and another 39 planned. Countries wanting new nuclear plants now look to China and Russia as suppliers.</p>
<p>There is a strong case for democracies seeking to replace ageing nuclear plants with non-intermittent<br>
equivalents to join the importers. If Chinese reactors are designed in the knowledge that they will have to meet with the approval of independent regulators the world will be a safer place. At the same time, in boosting energy R&amp;D to tackle the climate crisis, Western governments should be sure to give nuclear its fair share. There are real attractions to some new approaches, notably smaller reactors with lower unit costs: in <mark class="label primary">platoons</mark><sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup> they can replace old plants; singly they can add incremental capacity where needed. They might perhaps be used to <mark class="label primary">retrofit</mark><sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup> old fossil-fuel plants.</p>
<p><strong>It’s critical</strong></p>
<p>Nuclear power has drawbacks the size of a tsunami. But with Chinese plants being built today that will not be <mark class="label primary">decommissioned</mark><sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup> until the 22nd century, it cannot simply be wished away. What is more, it has a vital role to play in the fight for a stable climate. The lesson of Fukushima is not to <mark class="label primary">eschew</mark><sup class="footnote-ref"><a href="#fn21" id="fnref21">[21]</a></sup> nuclear power, it is to use it wisely.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [tsuˈnɑmi] 海啸 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [‘tɜr.mɔɪl] 动乱，动荡 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [ɪn’su] 接着发生，因而产生，接踵而来 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 ['pʌd(ə)l] 水洼，泥潭 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [ə’ɡæst] 惊骇的，吃惊的 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [‘aɪə.daɪn] 碘，含碘 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [.prɑfə’læksɪs] 预防 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [rɪ’neɪsəns] 文艺复兴 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [ʌn’iz] 不安，忧虑 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 [toʊl] 伤亡人数 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [.ɪntər’mɪt(ə)nt] 断断续续的，间歇性的 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [‘oʊnəs] 责任，义务 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 ['heɪs(ə)n] 促进，使加快 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [‘wɪlfəl] 故意的，成心的 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 ['hɑb(ə)l] 蹒跚，跛行；阻碍 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [‘mɔθ.bɔl] 后备的，闲置的 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p>美 [ɔ’tɑkrəsi] 独裁政治，专制国家 <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn18" class="footnote-item"><p>美 [plə’tun] 排 <a href="#fnref18" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn19" class="footnote-item"><p>美 [ˈrɛtroʊˌfit] 改进，更新 <a href="#fnref19" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn20" class="footnote-item"><p>美 [.dikə’mɪʃ(ə)n] 正式停止使用，退役 <a href="#fnref20" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn21" class="footnote-item"><p>美 [es’tʃu] 避免，戒绝 <a href="#fnref21" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>Leaders</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Leaders</tag>
      </tags>
  </entry>
  <entry>
    <title>Scraping the bones</title>
    <url>/archives/6d0cb3b7.html</url>
    <content><![CDATA[<center><b>China’s law-enforcement agencies are undergoing their biggest purge in more
than two decades. The aim is to root out the corrupt and politically disloyal</b></center>
<p>For many members of China’s 3m-strong domestic-security forces, these must be worrying times. On February 27th the Communist Party declared the start of a long-expected purge of their ranks. It will involve, say officials, “turning the knife-blade inward” to <mark class="label primary">gouge</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> out those <mark class="label primary">deemed</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> corrupt or insufficiently loyal to the party and its leader, Xi Jinping. More than eight years into Mr Xi’s iron rule, the party appears to wonder whether a vital <mark class="label primary">bulwark</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> of its power is entirely trustworthy.</p>
<span id="more"></span>
<p>State-controlled media have described it as the biggest such campaign since the late 1990s within the domestic-security system, which includes the police, the secret police, the judiciary and prisons. It is due to last for about a year. The aim is to ensure that these agencies are “absolutely loyal, absolutely pure and absolutely reliable”. Officials say the campaign will be like the “Yan’an Rectification” of the early 1940s. That was when Mao—then the leader of a communist <mark class="label primary">insurgency</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>—staged a<br>
sweeping and brutal purge of the party’s ranks to consolidate his control. Such language suggests that many heads will roll as the party attempts to clear the “dense <mark class="label primary">miasma</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>” surrounding the security apparatus, cure it of “<mark class="label primary">chronic</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> illness” and ensure it remains “surnamed Party” (meaning as loyal to the party as if to a family member).</p>
<p>It is remarkable that such a campaign is deemed necessary. After he took over as China’s leader in 2012 Mr Xi launched the country’s toughest battle against corruption in decades. Hundreds of thousands of officials were punished, including powerful people with security backgrounds. One of them was Zhou Yongkang, a former member of the Politburo Standing Committee. Before Mr Xi assumed power, Mr Zhou had overseen the entire law-enforcement apparatus. In 2015 he was sentenced to life in prison—<mark class="label primary">ostensibly</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> for graft and leaking state secrets. Officials later alleged—without giving details—that he had engaged in “political plotting”, too. It is widely believed that he was an opponent of Mr Xi. But on February 3rd party investigators said the police had failed to eliminate Mr Zhou’s “pernicious influence” within the force and had not followed the party line “satisfactorily enough”.</p>
<div class="note info"><p><strong>Politburo Standing Committee</strong> ：政治局常委</p>
</div>
<p>Several hig-hranking security officials have been <mark class="label primary">snared</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> by the party’s anti-corruption agency in the past few months. The most <mark class="label primary">prominent</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> is Gong Daoan, then Shanghai’s police chief and one of the city’s deputy mayors. Last August he became the third policeman with a rank equivalent to that of a vice-minister to be placed under investigation since the start of 2020. The following month Mr Gong was stripped of his posts. On March 1st the government announced that he had been arrested and his case referred to prosecutors.</p>
<p>The charges against Mr Gong include abuse of his positions to promote his and others’ business interests, corruption related to the approval of appointments, misuse of his official car and frequent attendance of banquets that raised questions about his <mark class="label primary">impartiality</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>. But Mr Gong’s alleged political offences are listed first: forming factions within the party and “completely lacking the four awarenesses”, ie, of the need for loyalty to the party and to Mr Xi, and for <mark class="label primary">compliance</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> with their orders and total <mark class="label primary">adherence</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> to the party’s line. Such accusations will probably be levelled at more police chiefs during the upcoming China’s law-enforcement agencies are undergoing their biggest purge in more than two decades. The aim is to root out the corrupt and politically disloyal purge. The loyalty of the security agencies “directly affects the party’s position at the <mark class="label primary">helm</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> of state and the continuance of political stability”, said an official report on a meeting of party bosses that kicked off the nationwide campaign.</p>
<p>Its launch was <mark class="label primary">heralded</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup> in July with trial runs in a handful of local police forces, courts and prosecutors’ offices, as well as in two prisons and one local state-security bureau (home to the <mark class="label primary">dissident</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> and spy-hunting secret police). In charge of this experimental phase was Chen Yixin, a senior security official who appears to be a trouble-shooter for Mr Xi—in February last year, in the early days of the covid-19 pandemic, he was sent to Wuhan to help <mark class="label primary">supervise</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> efforts to crush and contain the central city’s massive outbreak of the disease. Mr Chen said “education and rectification” of the security forces was a task of “urgency and extreme importance”. He described the campaign as “scraping the bones to remove the poison, and draining away the <mark class="label primary">filth</mark><sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup> to bring in fresh water”. Police at the time were reaching the end of a three-year campaign against criminal gangs and their “protective umbrellas” within the government. That effort resulted in the smashing of more than 14,700 criminal groups. But apparently it did not succeed in purifying the police.</p>
<p>Assuming the campaign will follow the pattern of last year’s experiments, participants can expect to spend a month studying the kind of behaviour that is expected of them. They will then perform “self-examination” and be required to admit to any wrong-doing. These <mark class="label primary">confessions</mark><sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup> will be compared with other submissions, including complaints from members of the public. High-level teams will be dispatched from Beijing to ensure the job is done properly. Among the 16,000 people who were involved in the trial phase, more than 2,200 were <mark class="label primary">disciplined</mark><sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup>, including 39 who were formally charged. If punishments are meted out at the same rate nationally, then the “overall <mark class="label primary">reckoning</mark><sup class="footnote-ref"><a href="#fn20" id="fnref20">[20]</a></sup>”, as one newspaper described the purge, may result in thousands being jailed and hundreds of thousands punished in other ways.</p>
<p>The campaign may benefit Mr Xi. Late next year he will <mark class="label primary">preside</mark><sup class="footnote-ref"><a href="#fn21" id="fnref21">[21]</a></sup> over a five-yearly party congress, which will mark a critical juncture of his leadership. Normally he would be expected to step down at this event, having served as general secretary for a decade. But he shows no intention of doing so. There have been few obvious signs of opposition to granting him another five-year term. The contrast between China’s successful control of the coronavirus and the West’s <mark class="label primary">fumbling</mark><sup class="footnote-ref"><a href="#fn22" id="fnref22">[22]</a></sup> response may have further strengthened his hand. But by tightening his grip on the security forces he can be even more certain that no one will dare to oppose him.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [ɡaʊdʒ] 凿；敲竹杠，漫天要价 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>英 [diːm] 认为，相信 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [‘bʊlwərk] 堡垒，壁垒 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [ɪn’sɜrdʒənsi] 叛乱，造反 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [mi’æzmə] 瘴气，污浊的空气 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [‘krɑnɪk] 长期的，慢性的 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [ɑ’stensəbli] 表面上 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [sner] 圈套，陷阱；设陷阱捕捉 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [‘prɑmɪnənt] 著名的，杰出的 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 [ ˌɪmpɑrʃɪˈælətɪ] 公平，公正 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [kəm’plaɪəns] 遵从，服从 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [əd’hɪrəns] 遵守，坚持 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [helm] 掌舵，掌握 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [‘herəld] 通告 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [‘dɪsɪdənt] 持不同政见者 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [‘supər.vaɪz] 监督，主管，指导 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn17" class="footnote-item"><p>美 [fɪlθ] 污秽，污垢；下流言辞；淫秽书刊 <a href="#fnref17" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn18" class="footnote-item"><p>美 [kən’feʃ(ə)n] 坦白，认罪 <a href="#fnref18" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn19" class="footnote-item"><p>美 [‘dɪsəplɪn] 纪律；处罚 <a href="#fnref19" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn20" class="footnote-item"><p>美 [‘rekən] 估计，估算 <a href="#fnref20" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn21" class="footnote-item"><p>美 [.pri’zaɪd] 主持（会议、仪式等）；担任（会议）主席 <a href="#fnref21" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn22" class="footnote-item"><p>美 ['fʌmb(ə)l] 摸索，笨拙的 <a href="#fnref22" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>China</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>China</tag>
      </tags>
  </entry>
  <entry>
    <title>The law kicks in</title>
    <url>/archives/40ddc300.html</url>
    <content><![CDATA[<center><b>The territory will soon find out how its
new security law works in court</b></center>
<p>Since china imposed a <mark class="label primary">draconian</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> security law on Hong Kong last year, protests in the city—already <mark class="label primary">dampened</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> by pandemic-related controls—have been rare. But on March 1st hundreds of people gathered outside a court to demonstrate against the largest case so far related to the security bill. They held banners calling for the release of “political prisoners” and chanted slogans that were popular during the unrest that <mark class="label primary">engulfed</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> the territory in 2019. Students at a primary school nearby stood outside their classrooms, shouting in solidarity. It was a rare act of defiance in a city that, to many residents, feels crushed.</p>
<span id="more"></span>
<p>A day earlier, 47 people had been charged for alleged <mark class="label primary">misdeeds</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> as part of the case. They included some of Hong Kong’s best-known pro-democracy activists, such as Leung Kwokhung, a <mark class="label primary">veteran</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> campaigner commonly known as “Long Hair”; Lester Shum, a politician; Benny Tai, an academic, and Joshua Wong, whose then-teenage face became <mark class="label primary">emblematic</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> of the “Umbrella Movement” of 2014 (he is already in prison for a protest-related offence). They have been accused of crimes such as conspiracy to commit <mark class="label primary">subversion</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> by plotting to overthrow Hong Kong’s government.</p>
<p>The case relates to an informal primary ballot that was held last year to select pro-democracy<br>
candidates for elections to the Legislative Council. This sensible-sounding effort was seen by the government as an attempt to gain control of the council and paralyse its work. (The elections were<br>
due to be held in September but were postponed for a year, <mark class="label primary">purportedly</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> because of the pandemic.) If convicted, the defendants face sentences of up to life in prison.</p>
<p>The proceedings that began on March 1st relate to applications for bail—the trial itself may not begin for several more weeks. Under the security law, there is a presumption that bail will be denied, so even this stage has involved <mark class="label primary">protracted</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> debate in court and a <mark class="label primary">gruelling</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> <mark class="label primary">ordeal</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup> for the defendants. They have had to endure sessions lasting many hours that have eaten into normal times for meals and sleep. The physical toll has been evident—several of them have received hospital treatment. The prosecution argues that defendants could pose a threat to national security if given bail. Soon after The Economist went to press, the court was expected to <mark class="label primary">rule</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> on whether to <mark class="label primary">remand</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> them in <mark class="label primary">custody</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>.</p>
<p>No national-security trial has yet been concluded. So this one will be watched for signs of how the new law—which has the <mark class="label primary">hallmarks</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> of Chinese mainland-style legislation, with its vaguely defined political terms—works in a judicial system steeped in British legal tradition. Dominic Raab, Britain’s foreign minister, has described the case as “deeply disturbing”. America and the European Union have called for the release of the 47 activists. On March 2nd Hong Kong’s Department of Justice said that prosecutors’ decisions had been made “without political consider ations” and no one should interfere in them. But a few days before the 47 were charged, Xia Baolong, a central-government official who oversees Hong Kong affairs, had said that “anti-China elements” should be “severely punished under the law”. He had named two members of the group: Mr Wong and Mr Tai. The Communist Party may be an exception to Hong Kong’s rule.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [drə’koʊniən] 严酷的，残忍的，苛刻的 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [‘dæmpən] 抑制 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [ɪn’ɡʌlf] 把…卷入旋涡；吞没 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [mɪs’did] 罪行 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 ['vet(ə)rən] 老兵，退伍军人；富有经验的 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [.emblə’mætɪk] 标志的，象征性的 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [səb’vɜrʒ(ə)n] 颠覆，破坏 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>据称 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 [prəˈtræktəd] 拖沓的，旷日持久的 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>美 ['ɡru(ə)lɪŋ] 使人筋疲力尽的；折磨人的 <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [ɔr’dil] 折磨，煎熬 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 [rul] 统治；控制；支配；裁定 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [rɪ’mænd] 还押(被告、嫌疑犯) <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [ˈkʌstədi] 拘留，监禁 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 [‘hɔl.mɑrk] 特点，特征 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>China</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>China</tag>
      </tags>
  </entry>
  <entry>
    <title>Racing ahead</title>
    <url>/archives/5ee67121.html</url>
    <content><![CDATA[<center><b>One firm. One year. One billion shots or more. Can India’s Serum Institute do it?</b></center>
<p>On march 5th 2020 Mumbai’s horse-racing season <mark class="label primary">culminated</mark><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> with the Poonawalla Breeders’ Multimillion, a day-long <mark class="label primary">extravaganza</mark><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> dominated by India’s first family of the sport, the Poonawallas. <mark class="label primary">Triumphs</mark><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> at the track were accompanied by news reports on the Bollywood life-styles of Adar Poonawalla and his wife, Natasha, whom Elle magazine described as “India’s first lady of <mark class="label primary">fabulousness</mark><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>”. Only <mark class="label primary">cursory</mark><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> attention spilled over to the couple’s day job running Serum Institute of India, the press-shy vaccine-maker at the root of the family fortune.</p>
<span id="more"></span>
<div class="note info"><p><strong>Mumbai</strong>：孟买</p>
</div>
<p>A year on it is the company, not its <mark class="label primary">flamboyant</mark><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> owners, that is making headlines. As the covid-19 vaccination drive encounters production <mark class="label primary">glitches</mark><sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup> in Europe, hits distribution <mark class="label primary">snags</mark><sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup> in America and faces a geopolitical <mark class="label primary">scramble</mark><sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup> for supply everywhere, Serum Institute has emerged as the one firm apparently able to ramp up production fast and export the doses without <mark class="label primary">courting</mark><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> <mark class="label primary">controversy</mark><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>. By the end of the year, Mr Poonawalla says, it will add 1.5bn covid-19 shots to 1.3bn-1.5bn doses against diseases from <mark class="label primary">measles</mark><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup> to <mark class="label primary">tuberculosis</mark><sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup> that it already produces annually. On February 23rd it dispatched the first mass shipment, of 70m shots of the Oxford-AstraZeneca vaccine, to India and two dozen other poor countries in the COVAX vaccine-sharing programme. On March 1st Canada said it will procure 500,000 doses from the company. The relatively small family concern, which entered last year with annual revenues of $735m and a workforce of 6,000, is becoming mission-critical to the global fight against the coronavirus.</p>
<div class="note info"><p><strong>ramp up</strong>：增加，提高</p>
<p><strong>Oxford-AstraZeneca</strong>：牛津阿斯利康</p>
</div>
<p>Mr Poonawalla’s plans are ambitious, to put it <mark class="label primary">mildly</mark><sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup>. He wants to raise monthly production of the Oxford vaccine from the current 60m-70m to 100m by April. That month the company will start churning out 40m-50m of a shot developed by Novavax, an American biotechnology firm, to build up a “large stock” as it undergoes accelerated review by a number of global regulators. By late summer Serum Institute expects to be making another vaccine, by SpyBiotech, a British startup. In early 2022 it hopes to be producing a one-dose <mark class="label primary">nasal</mark><sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup> vaccine being developed by Codagenix, another American biotech firm.</p>
<div class="note info"><p><strong>churning out</strong>：大量生产</p>
</div>
<p>Mr Poonawalla estimates that until rivals’ new capacity comes online in the autumn, his company’s output will account for perhaps 40-50% of the world’s supply. Unlike Pfizer, an American drug giant<br>
which recently upped its production goal from 1.3bn to 2bn doses this year, Serum Institute’s shots are cheap and do not need to be stored at ultra-low temperatures. They will <mark class="label primary">inoculate</mark><sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup> swathes of the poor world.</p>
<div class="note info"><p><strong>Pfizer</strong>：辉瑞</p>
</div>
<p>Some of the factors behind the company’s rise to prominence, like the pandemic and scientists’ rapid response to it, have been beyond its control. But Serum Institute has also placed bold bets that run counter to the traditional process of making vaccines, in which investments in capacity and distribution follow years of research, then more years of clinical trials for safety and efficacy. A brief conversation last April, between Mr Poonawalla and his father Cyrus, Serum Institute’s founder, resulted in a decision to start producing the Oxford vaccine before any clinical trials had begun.</p>
<p>It is the latest daring coup by the Poonawallas. In the 1960s Cyrus turned his horse-breeding business into one that used retired steeds as living vessels to create anti-body serum for treatment of snake bites, tetanus and other scourges. Forty years later his son, who has been chief executive since 2011, has added 165 countries as customers (often while courting Natasha on holidays). International sales now account for 70% of the firm’s total. In December Serum Institute released the first vaccine to be fully developed in India, against a variant of pneumonia which kills 68,000 Indian children a year.</p>
<p>The company’s initial investment of $80m in capacity to produce the untested Oxford shot came from its billionaire owners’ own pocket—a tidy sum next to the previous year’s $46m in capital expenditure. Since then Serum Institute has received a further $800m: $270m from the Poonawallas, $300m from the Bill &amp; Melinda Gates Foundation, the world’ s biggest charity, and the rest from prepayments by governments, including those of Bangladesh and Morocco.</p>
<p>The privately held firm will not say how much of that money has already been deployed. But Mr Poonawalla says it has doubled production capacity. It could do this quickly, he adds, thanks to a strategy of installing “excess capacity ahead of demand”. For decades it had been adding a new building each year; one that was ready to go shortly before the fateful chat between father and son was immediately repurposed for the covid-19 effort.</p>
<p>A longstanding<br>
collaboration with Oxford<br>
and Novavax as part of an effort to create<br>
a malaria vaccine allowed Serum Institute<br>
to secure their recipes early. Deep relationships<br>
with suppliers of everything<br>
from glass vials to expensive “bioreactors”<br>
for the production of biological substances<br>
have helped smooth procurement. Serum<br>
Institute has hired 1,000 new employees ,<br>
increasing its workforce by a sixth. Another<br>
500 construction workers are putting up<br>
new buildings with higher production capacity<br>
to add to the 30 or so that the company<br>
has erected over the years.</p>
<p>At the current pac e, Mr P oonawalla<br>
thinks, it will take at least two years for the<br>
global supply of covid19<br>
jabs to meet demand.<br>
It could take less if the world’s regulators<br>
coordinated<br>
more closely for the<br>
duration of the crisis , he ventures . U ntil<br>
then Serum Institute expects to be selling<br>
the jabs more or less at cost, which me ans<br>
about $35<br>
a dose for the Oxford v accine.<br>
After that, margins will eventually rise .<br>
“This situation will last for a long time and<br>
there will be future demand, ” Mr P oonawalla<br>
predicts. Covid19<br>
looks certain to become<br>
endemic in many parts of the world,<br>
with annual v accination drives akin to<br>
those for influenza becoming the norm.<br>
His firm’s output will peak at 600m700m<br>
doses a year for each of the four vaccines it<br>
is currently eyeing, he says.</p>
<p>The pandemic will le ave vaccinemaking<br>
more prominent than ever before , Mr<br>
Poonawalla believes—and much more<br>
crowded. This will inject competition into<br>
what most drugmak ers consider a thankless<br>
volume business with consider able<br>
capital outlays . A fire e arlier this ye ar at<br>
one new building sent a shudder down the<br>
spines of the world’s covidresponders<br>
until<br>
the company assured them that the accident,<br>
which affected a production line for a<br>
tuberculosis jab, will not hurt the pandemic<br>
effort. Although the bet on the Oxford<br>
vaccine has paid off, and the one on Novavax<br>
looks likely to, Codagenix and SpyBiotech<br>
are not yet shooins.<br>
And vaccine nationalism<br>
could stymie exports from India<br>
or imports of ingredients and kit.</p>
<p>Mr Poonawalla nevertheless remains<br>
confident that his firm will maintain its<br>
leading position. In contrast to big pharma,<br>
which spends billions on marketing<br>
costly medicines, it sells its vaccines chiefly<br>
to national health authorities, which<br>
prize low prices and reliable supply above<br>
all. Those have always been Serum Institute’s<br>
strong suits. And the Indian company’s<br>
remarkable response to covid19<br>
has<br>
bought it more global goodwill than any<br>
advertising campaign could hope to.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>美 [ˈkʌlmɪˌneɪtid] 到达顶点，高潮 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>美 [ɪk.strævə’ɡænzə] 铺张华丽的娱乐表演 <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>美 [‘traɪəmf] 1. 战胜，打败；2. 巨大成功，重大成就，伟大胜利 <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>美 [‘fæbjələs] 难以置信的，神话般的 <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>美 [‘kɜrsəri] 粗略的；仓促的，草率的 <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn6" class="footnote-item"><p>美 [flæm’bɔɪənt] 炫耀的，卖弄的；华丽的，艳丽的 <a href="#fnref6" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn7" class="footnote-item"><p>美 [ɡlɪtʃ] 小故障，小毛病 <a href="#fnref7" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn8" class="footnote-item"><p>美 [snæɡ] 障碍 <a href="#fnref8" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn9" class="footnote-item"><p>美 ['skræmb(ə)l] 争夺，抢占；（迅速而吃力地）爬 <a href="#fnref9" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn10" class="footnote-item"><p>追求，招惹（祸事） <a href="#fnref10" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn11" class="footnote-item"><p>美 [‘kɑntrə.vɜrsi] 争论 <a href="#fnref11" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn12" class="footnote-item"><p>美 ['miz(ə)lz] 麻疹 <a href="#fnref12" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn13" class="footnote-item"><p>美 [tʊ.bɜrkjə’loʊsɪs] 结核病 <a href="#fnref13" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn14" class="footnote-item"><p>美 [‘maɪldli] 轻微地，稍微地；温和地，和善地 <a href="#fnref14" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn15" class="footnote-item"><p>美 ['neɪz(ə)l] 鼻子的 <a href="#fnref15" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn16" class="footnote-item"><p>美 [ɪ’nɑkjə.leɪt] （为…）接种疫苗 <a href="#fnref16" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>The Economist</category>
        <category>Business</category>
      </categories>
      <tags>
        <tag>The Economist</tag>
        <tag>经济学人</tag>
        <tag>Business</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Tag Plugins 的使用</title>
    <url>/archives/c9ea8104.html</url>
    <content><![CDATA[<p>Tag Plugin 是一种使 Hexo 支持特殊样式内容的方法。例如，我们无法在标准 Markdown 中显示具有自定义尺寸的图像。然后我们可以使用标签插件来解决它。 Hexo 有很多可以帮助用户的标签。 Hexo 还具有主题接口，使主题能够创建自己的标签。</p>
<span id="more"></span>
<h4 id="quote"><a class="markdownIt-Anchor" href="#quote"></a> Quote</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<p>没有参数的普通 <code>blockquote</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<p>引用书上的句子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<p>引用网络上的文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote>
<p>还有一种特殊的 <code>quote</code> — <code>centered quote</code>，简写成 <code>cq</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125; 梅花香自苦寒来 &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
<p>梅花香自苦寒来</p>

</blockquote>
<h4 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [summary] %&#125;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>[class]</code> : <em>可选参数.</em> 可选值: default | primary | success | info | warning | danger.</li>
<li><code>[no-icon]</code> : <em>可选参数.</em> 是否要提示标志.</li>
<li><code>[summary]</code> : <em>可选参数.</em> 提示的摘要.</li>
</ul>
<p>所有参数都是可选的。</p>
<p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note %&#125;</span><br><span class="line">#### No class style</span><br><span class="line">(without define class style)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note "><h5 id="no-parameter"><a class="markdownIt-Anchor" href="#no-parameter"></a> No parameter</h5>
<p>(without define class style)</p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">#### Default</span><br><span class="line">Welcome to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note default"><h5 id="default"><a class="markdownIt-Anchor" href="#default"></a> Default</h5>
<p>Welcome to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">#### Primary</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note primary"><h5 id="primary"><a class="markdownIt-Anchor" href="#primary"></a> Primary</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">#### Success</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note success"><h5 id="success"><a class="markdownIt-Anchor" href="#success"></a> Success</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">#### Info</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info"><h5 id="info"><a class="markdownIt-Anchor" href="#info"></a> Info</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### Dange</span><br><span class="line">**Welcome** to [Hexo!](https:&#x2F;&#x2F;hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note danger"><h5 id="danger"><a class="markdownIt-Anchor" href="#danger"></a> Danger</h5>
<p><strong>Welcome</strong> to <a href="https://hexo.io">Hexo!</a></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">#### No icon note</span><br><span class="line">Note **without** icon: &#96;note info no-icon&#96;</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon"><h5 id="without-icon"><a class="markdownIt-Anchor" href="#without-icon"></a> Without icon</h5>
<p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note primary This is a summary %&#125;</span><br><span class="line">#### Details and summary</span><br><span class="line">Note with summary: &#96;note primary This is a summary&#96;</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<details class="note primary"><summary><p>This is a summary</p>
</summary>
<h5 id="with-summary"><a class="markdownIt-Anchor" href="#with-summary"></a> With Summary</h5>
<p>Note with summary: <code>note primary This is a summary</code></p>

</details>
<h4 id="label"><a class="markdownIt-Anchor" href="#label"></a> Label</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label [class]@text %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>[class]</code> : <em>可选参数.</em> 可选值: <code>default</code> | <code>primary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code>.</p>
<p>如果没有指定参数，使用浏览器的默认风格.</p>
</li>
<li>
<p><code>text</code> : 要标注的文本，<code>@text</code> 和 <code>[class]</code> 之间的空格可有可无.<br>
E.g. <code>success @text</code> 和 <code>success@text</code> 是一样的.</p>
</li>
</ul>
<h5 id="default"><a class="markdownIt-Anchor" href="#default"></a> default</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label default@default label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label default">default label</mark>
<h5 id="primary"><a class="markdownIt-Anchor" href="#primary"></a> Primary</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label primary@primary label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label primary">primary label</mark>
<h5 id="success"><a class="markdownIt-Anchor" href="#success"></a> Success</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label success@success label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label success">success label</mark>
<h5 id="info"><a class="markdownIt-Anchor" href="#info"></a> Info</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label info@info label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label info">info label</mark>
<h5 id="warning"><a class="markdownIt-Anchor" href="#warning"></a> Warning</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label warning@warning label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label warning">warning label</mark>
<h5 id="danger"><a class="markdownIt-Anchor" href="#danger"></a> Danger</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% label danger@danger label %&#125;</span><br></pre></td></tr></table></figure>
<mark class="label danger">danger label</mark>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mark&gt;标志&lt;&#x2F;mark&gt;</span><br></pre></td></tr></table></figure>
<p><mark>标志</mark></p>
<h4 id="tabs"><a class="markdownIt-Anchor" href="#tabs"></a> Tabs</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>Unique name</code> : 标签块的唯一名称.</p>
<p>只需保证当前页面唯一.</p>
</li>
<li>
<p><code>[index]</code> : <em>可选参数.</em> 默认选定的标签项.<br>
如果没有指定，第一个标签将会被选定.<br>
如果为 -1，则没有默认的选定标签.</p>
</li>
<li>
<p><code>[Tab caption]</code> : <em>可选参数.</em> 当前标签的标题.<br>
如果没有指定标题，将用标签块后根标签的索引作为标题.<br>
如果没有指定标题，但是指定了 <code>@icon</code>，则标题可以为空.</p>
</li>
<li>
<p><code>[@icon]</code> : <em>可选参数.</em> Font Awesome icon name.</p>
</li>
</ul>
<p>例子：</p>
<h5 id="默认选中第一个标签"><a class="markdownIt-Anchor" href="#默认选中第一个标签"></a> 默认选中第一个标签</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1">Unique name 1</a></li><li class="tab"><a href="#unique-name-2">Unique name 2</a></li><li class="tab"><a href="#unique-name-3">Unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="指定选中第三个标签"><a class="markdownIt-Anchor" href="#指定选中第三个标签"></a> 指定选中第三个标签</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab"><a href="#unique-name-1">Unique name 1</a></li><li class="tab"><a href="#unique-name-2">Unique name 2</a></li><li class="tab active"><a href="#unique-name-3">Unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane active" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="自定义标签项标题"><a class="markdownIt-Anchor" href="#自定义标签项标题"></a> 自定义标签项标题</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab Solution 1 --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 2 --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 3 --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1">Solution 1</a></li><li class="tab"><a href="#unique-name-2">Solution 2</a></li><li class="tab"><a href="#unique-name-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="只带-icon-的标签"><a class="markdownIt-Anchor" href="#只带-icon-的标签"></a> 只带 <code>icon</code> 的标签</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name %&#125;</span><br><span class="line">&lt;!-- tab @text-width --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @font --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @bold --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<div class="tabs" id="unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#unique-name-1"><i class="fa fa-text-width"></i></a></li><li class="tab"><a href="#unique-name-2"><i class="fa fa-font"></i></a></li><li class="tab"><a href="#unique-name-3"><i class="fa fa-bold"></i></a></li></ul><div class="tab-content"><div class="tab-pane active" id="unique-name-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="unique-name-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="unique-name-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h5 id="标签永久链接"><a class="markdownIt-Anchor" href="#标签永久链接"></a> 标签永久链接</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Permalink for &gt; [Tab one](#tab-one).</span><br><span class="line">Permalink for &gt; [Tab one 1](#tab-one-1).</span><br><span class="line">Permalink for &gt; [Tab one 2](#tab-one-2).</span><br><span class="line">Permalink for &gt; [Tab one 3](#tab-one-3).</span><br><span class="line"></span><br><span class="line">Permalink for &gt; [Tab two](#tab-two).</span><br><span class="line">Permalink for &gt; [Tab two 1](#tab-two-1).</span><br><span class="line">Permalink for &gt; [Tab two 2](#tab-two-2).</span><br><span class="line">Permalink for &gt; [Tab two 3](#tab-two-3).</span><br><span class="line"></span><br><span class="line">&#123;% tabs Tab one %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% tabs Tab two %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>
<p>Permalink for &gt; <a href="#tab-one">Tab one</a>.<br>
Permalink for &gt; <a href="#tab-one-1">Tab one 1</a>.<br>
Permalink for &gt; <a href="#tab-one-2">Tab one 2</a>.<br>
Permalink for &gt; <a href="#tab-one-3">Tab one 3</a>.</p>
<p>Permalink for &gt; <a href="#tab-two">Tab two</a>.<br>
Permalink for &gt; <a href="#tab-two-1">Tab two 1</a>.<br>
Permalink for &gt; <a href="#tab-two-2">Tab two 2</a>.<br>
Permalink for &gt; <a href="#tab-two-3">Tab two 3</a>.</p>
<div class="tabs" id="tab-one"><ul class="nav-tabs"><li class="tab active"><a href="#tab-one-1">Tab one 1</a></li><li class="tab"><a href="#tab-one-2">Tab one 2</a></li><li class="tab"><a href="#tab-one-3">Tab one 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-one-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="tab-one-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="tab-one-3"><p><strong>Tab 3.</strong></p></div></div></div>
<div class="tabs" id="tab-two"><ul class="nav-tabs"><li class="tab active"><a href="#tab-two-1">Tab two 1</a></li><li class="tab"><a href="#tab-two-2">Tab two 2</a></li><li class="tab"><a href="#tab-two-3">Tab two 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-two-1"><p><strong>Tab 1.</strong></p></div><div class="tab-pane" id="tab-two-2"><p><strong>Tab 2.</strong></p></div><div class="tab-pane" id="tab-two-3"><p><strong>Tab 3.</strong></p></div></div></div>
<h4 id="button"><a class="markdownIt-Anchor" href="#button"></a> Button</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>url</code> : 绝对或相对 URL</li>
<li><code>text</code> : 按钮文字，如果未指定图标则为必须</li>
<li><code>icon</code> : FontAwesome 图标名称（开头没有’fa-‘）。如果未指定文本，则为必需</li>
<li><code>[class]</code> : FontAwesome 类：<code>fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X</code> ，可选参数。</li>
<li><code>[title]</code> : 鼠标悬停时的工具提示，可选参数。</li>
</ul>
<p>注意：最好添加 `` 标签，测试时没加 div，下面显示不完全，而且加上更加美观。</p>
<div>
  <a class="btn" href="https://time_wait.gitee.io/" title="博客首页"><i class="fa fa-home fa-fw"></i>首页</a>
</div>
<p>其他一些例子：</p>
<h5 id="只有-text"><a class="markdownIt-Anchor" href="#只有-text"></a> 只有 <code>text</code></h5>
<a class="btn" href="#">Text</a>
<h5 id="只有-icon"><a class="markdownIt-Anchor" href="#只有-icon"></a> 只有 <code>icon</code></h5>
<div><a class="btn" href="#"><i class="fa fa-home fa-5x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-4x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-3x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-2x"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home fa-lg"></i></a></div>
<div><a class="btn" href="#"><i class="fa fa-home"></i></a></div>
<h5 id="有-text-和-title"><a class="markdownIt-Anchor" href="#有-text-和-title"></a> 有 <code>text</code> 和 <code>title</code></h5>
<a class="btn" href="#" title="Title">Text & Title</a>
<h5 id="有-text-和-icon"><a class="markdownIt-Anchor" href="#有-text-和-icon"></a> 有 <code>text</code> 和 <code>icon</code></h5>
<p>
  <a class="btn" href="#"><i class="fa fa-home"></i>Text & Icon</a>
</p>
<p>最后，按钮 tag 还可以嵌套在其他 tag 中使用。</p>
<h4 id="link-grid"><a class="markdownIt-Anchor" href="#link-grid"></a> Link Grid</h4>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% linkgrid [image] [delimiter] [comment] %&#125;&#123;% endlinkgrid %&#125;</span><br><span class="line">&lt;!-- Tag Alias --&gt;</span><br><span class="line">&#123;% lg [image] [delimiter] [comment] %&#125;&#123;% endlg %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>[image]</code> : <em>Optional parameter.</em> Default image URL.</li>
<li><code>[delimiter]</code> : <em>Optional parameter.</em> If the optional delimiter parameter is given, it is interpreted as the delimiter of items in each line.</li>
<li><code>[comment]</code> : <em>Optional parameter.</em> If the optional comment parameter is given, it is interpreted as the symbol to comment out a line.</li>
</ul>
<div class="link-grid"><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>
<div class="link-grid"><div class="link-grid-container">
<div class="link-grid-image" style="background-image: url(/images/apple-touch-icon-next.png);"></div>
<p>Theme NexT</p><p>Stay Simple. Stay NexT.</p>
<a href="https://theme-next.js.org/"></a>
</div></div>]]></content>
      <categories>
        <category>Hexo&amp;NexT</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Tag Plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<p>Welcome<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Test <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
  </entry>
  <entry>
    <title>基本排序算法</title>
    <url>/archives/981a96f7.html</url>
    <content><![CDATA[<h3 id="比较排序"><a class="markdownIt-Anchor" href="#比较排序"></a> 比较排序</h3>
<h4 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] BubbleSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] SelectionSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = i;</span><br><span class="line">        <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; arr.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; minVal) &#123;</span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="keyword">if</span> (index != i) &#123;</span><br><span class="line">          	<span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">          	arr[i] = arr[index];</span><br><span class="line">        		arr[index] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] InsertSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; val) <span class="keyword">break</span>;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h4>
<p>希尔排序是一种改进的插入排序，也叫增量减小排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] ShellSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = arr.length / <span class="number">2</span>; step &gt; <span class="number">0</span>; step /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 插入排序思想</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = step; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i - step;</span><br><span class="line">            <span class="keyword">while</span> (j &gt;= step) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; val) <span class="keyword">break</span>;</span><br><span class="line">                arr[j + step] = arr[j];</span><br><span class="line">                j -= step;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + step] = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span>[] copy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到待排序数组的中间位置，对左右两个子数组递归</span></span><br><span class="line">    <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">    mergeSort(arr, l, mid, copy);</span><br><span class="line">    mergeSort(arr, mid + <span class="number">1</span>, r, copy);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归返回后，左右两个子数组已经有序，接着合并两个有序子数组即可</span></span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        copy[k++] = arr[i] &lt;= arr[j] ? arr[i++] : arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        copy[k++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) &#123;</span><br><span class="line">        copy[k++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并完成后，将复制数组的数据拷贝回原数组</span></span><br><span class="line">    k = l;</span><br><span class="line">    <span class="keyword">while</span> (k &lt;= r) &#123;</span><br><span class="line">        arr[k] = copy[k++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 维持最大堆的特性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapify(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> heapSize, <span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">int</span> l = (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r = l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> largest = i;</span><br><span class="line">    <span class="comment">// 找到当前节点及其左右子节点的最大值的下标</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt;= heapSize &amp;&amp; arr[l] &gt; arr[largest]) largest = l;</span><br><span class="line">    <span class="keyword">if</span> (r &lt;= heapSize &amp;&amp; arr[r] &gt; arr[largest]) largest = r;</span><br><span class="line">    <span class="comment">// 如果当前节点的值不是最大的，交换，并递归</span></span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        arr[i] = arr[largest];</span><br><span class="line">        arr[largest] = tmp;</span><br><span class="line">        heapify(arr, heapSize, largest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建堆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] buildHeap(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length &gt;&gt; <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, arr.length - <span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] HeapSort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="comment">// 建堆</span></span><br><span class="line">    buildHeap(arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将堆顶的最大值换到数组最后的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = arr[<span class="number">0</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">        arr[i] = val;</span><br><span class="line">        <span class="comment">// 维护堆的性质</span></span><br><span class="line">        heapify(arr, i - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pivot = arr[r];  <span class="comment">// 这一步可以优化，可以随机选取一个数作为 pivot</span></span><br><span class="line">    <span class="keyword">int</span> index = l - <span class="number">1</span>;  <span class="comment">// 最后一个小于 pivot 元素的下标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= pivot) &#123;  <span class="comment">// 每找到一个小于 pivot 元素</span></span><br><span class="line">            index++;  <span class="comment">// index 加一，交换元素的位置</span></span><br><span class="line">            <span class="keyword">int</span> tmp = arr[index];</span><br><span class="line">            arr[index] = arr[i];</span><br><span class="line">            arr[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对左右两个子数组递归操作</span></span><br><span class="line">    quickSort(arr, l, index - <span class="number">1</span>);</span><br><span class="line">    quickSort(arr,index + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="比较排序总结"><a class="markdownIt-Anchor" href="#比较排序总结"></a> 比较排序总结</h4>
<table>
<thead>
<tr>
<th>排序算法</th>
<th style="text-align:center">最好时间复杂度</th>
<th style="text-align:center">最坏时间复杂度</th>
<th style="text-align:center">平均时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">是否稳定</th>
</tr>
</thead>
<tbody>
<tr>
<td>冒泡排序</td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td>选择排序</td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td>插入排序</td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td>希尔排序</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(n)</code></td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(1)</code></td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"><code>O(n^2)</code></td>
<td style="text-align:center"><code>O(nlogn)</code></td>
<td style="text-align:center"></td>
<td style="text-align:center">不稳定</td>
</tr>
</tbody>
</table>
<h3 id="非比较排序"><a class="markdownIt-Anchor" href="#非比较排序"></a> 非比较排序</h3>
<h4 id="计数排序"><a class="markdownIt-Anchor" href="#计数排序"></a> 计数排序</h4>
<h4 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h4>
<h4 id="桶排序"><a class="markdownIt-Anchor" href="#桶排序"></a> 桶排序</h4>
<h4 id="非比较排序总结"><a class="markdownIt-Anchor" href="#非比较排序总结"></a> 非比较排序总结</h4>
]]></content>
      <categories>
        <category>数据结构&amp;算法</category>
        <category>排序</category>
      </categories>
      <tags>
        <tag>数据结构&amp;算法</tag>
        <tag>排序</tag>
        <tag>快速排序</tag>
        <tag>归并排序</tag>
        <tag>堆排序</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统原理</title>
    <url>/archives/351e2939.html</url>
    <content><![CDATA[<h4 id="事务"><a class="markdownIt-Anchor" href="#事务"></a> 事务</h4>
<p>满足 <code>ACID</code> 特性的一组操作。</p>
<h5 id="acid"><a class="markdownIt-Anchor" href="#acid"></a> <code>ACID</code></h5>
<ul>
<li>原子性（Atomicity）- 事务的一组操作要么全部成功，要不全部失败回滚。回滚可以根据 <code>Undo log</code> 来实现。</li>
<li>一致性（Consistency）- 数据库在事务执行前后都保持一致性状态。</li>
<li>隔离性（Isolation）- 一个事务所做的修改在最终提交以前，对其它事务是不可见的。</li>
<li>持久性（Durability）- 一旦事务提交，所做的修改将会永远保存到数据库中。如果系统崩溃，可以根据 <code>Redo log</code> 来恢复数据。</li>
</ul>
<p><code>Undo log</code> 记录的是逻辑修改，<code>Redo log</code> 记录的是物理修改。</p>
<h4 id="并发一致性"><a class="markdownIt-Anchor" href="#并发一致性"></a> 并发一致性</h4>
<p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p>
<h5 id="丢失修改"><a class="markdownIt-Anchor" href="#丢失修改"></a> 丢失修改</h5>
<div class="note "><p>丢失修改指一个事务的更新操作被另外一个事务的更新操作覆盖。</p>
<p>例如：<code>T1</code> 和 <code>T2</code> 两个事务都对一个数据进行修改，<code>T1</code> 先修改并提交生效，<code>T2</code> 随后修改，<code>T2</code> 的修改覆盖了 <code>T1</code> 的修改。</p>
</div>
<h5 id="读脏数据"><a class="markdownIt-Anchor" href="#读脏数据"></a> 读脏数据</h5>
<div class="note "><p>读脏数据指在不同的事务下，当前事务可以读到其他事务未提交的数据。</p>
<p>例如：<code>T1</code> 修改一个数据但未提交，<code>T2</code> 随后读取这个数据。如果 <code>T1</code> 撤销了这次修改， <code>T2</code> 读取的数据是脏数据。</p>
</div>
<h5 id="不可重复读"><a class="markdownIt-Anchor" href="#不可重复读"></a> 不可重复读</h5>
<div class="note "><p>不可重复读指在一个事务内多次读取同一数据得到不同结果。</p>
</div>
<h5 id="幻影读"><a class="markdownIt-Anchor" href="#幻影读"></a> 幻影读</h5>
<div class="note "><p>幻读本质上就是不可重复读。<code>T1</code> 读取某个范围的数据，<code>T2</code> 在这个范围内插入新的数据，<code>T1</code> 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p>
</div>
<h4 id="封锁"><a class="markdownIt-Anchor" href="#封锁"></a> 封锁</h4>
<h5 id="锁粒度"><a class="markdownIt-Anchor" href="#锁粒度"></a> 锁粒度</h5>
<div class="note "><p><code>MySQL</code> 中提供了两种封锁粒度：<strong>行级锁</strong>以及<strong>表级锁</strong>。</p>
<p>锁粒度越小，发生锁争用的可能就越小，系统的并发度就越高，但同时系统开销会越大。</p>
<p>在选择封锁粒度时，需要在锁开销和并发度之间做一个权衡。</p>
</div>
<h5 id="锁类型"><a class="markdownIt-Anchor" href="#锁类型"></a> 锁类型</h5>
<ul>
<li>
<p>读写锁</p>
<ul>
<li>互斥锁：又称写锁，简写为 X 锁。</li>
<li>共享锁：又称读锁，简写为 S 锁。</li>
</ul>
<div class="note "><p>一个事务对数据 A 加了 X 锁，期间其他事务就不能对 A 加任何锁；</p>
<p>一个事务对数据 A 加了 S 锁，期间其他事务可以对 A 加 S 锁，不能加 X 锁。</p>
</div>
</li>
<li>
<p>意向锁</p>
<div class="note "><p><code>MySQL</code> 中存在行级锁和表级锁，因此一个事务如果想对一张表 A 加 X 锁，需要检测 A 中每一行数据是否加锁，这无疑非常耗时。</p>
<p>为了解决这个问题，<code>MySQL</code> 又引入了<strong>意向锁</strong>概念。</p>
<p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某行数据上加 X 锁或 S 锁。具体规定如下：</p>
<ul>
<li>一个事务在获得某行数据的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li>
<li>一个事务在获得某行数据的 X 锁之前，必须先获得表的 IX 锁。</li>
</ul>
<p>通过引入意向锁，事务想要对表 A 加 X 锁，只需检测是否有其它事务对 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务加 X 锁失败。</p>
</div>
</li>
</ul>
<h5 id="锁协议"><a class="markdownIt-Anchor" href="#锁协议"></a> 锁协议</h5>
<ul>
<li>
<p>三级封锁协议</p>
<ul>
<li>
<p>一级封锁协议</p>
<p>事务修改数据需先加 X 锁，可以<strong>解决修改丢失问题</strong>。</p>
<p>因为在一个事务结束并释放 X 锁之前，不会有其他事务修改同一数据。</p>
</li>
<li>
<p>二级封锁协议</p>
<p>在一级的基础上，要求读取数据 A 时必须加 S 锁，<strong>读取完马上释放 S 锁</strong>。</p>
<p>可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。</p>
</li>
<li>
<p>三级封锁协议</p>
<p>在二级的基础上，要求读取数据 A 时必须加 S 锁，<strong>直到事务结束了才能释放 S 锁</strong>。</p>
<p>可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。</p>
</li>
</ul>
</li>
<li>
<p>两段锁协议</p>
<p>加锁和解锁分为两个阶段进行。</p>
</li>
</ul>
<h4 id="隔离级别"><a class="markdownIt-Anchor" href="#隔离级别"></a> 隔离级别</h4>
<h5 id="未提交读read-uncommitted"><a class="markdownIt-Anchor" href="#未提交读read-uncommitted"></a> 未提交读（Read Uncommitted）</h5>
<p>一个事务可以读取其他事务还未提交的对数据的修改。</p>
<h5 id="提交读read-committed"><a class="markdownIt-Anchor" href="#提交读read-committed"></a> 提交读（Read Committed）</h5>
<p>一个事务只能读取已提交事务所做的修改。</p>
<h5 id="可重复读repeatable-read"><a class="markdownIt-Anchor" href="#可重复读repeatable-read"></a> 可重复读（Repeatable Read）</h5>
<p>一个事务多次读取同一数据得到的结果是一样的。</p>
<h5 id="串行化serializable"><a class="markdownIt-Anchor" href="#串行化serializable"></a> 串行化（Serializable）</h5>
<p>事务串行化执行。</p>
<p>隔离级别能解决的并发一致性问题：</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td>提交读</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td>可重复读</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✗</td>
</tr>
<tr>
<td>串行化</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
<td style="text-align:center">✓</td>
</tr>
</tbody>
</table>
<h4 id="多版本并发控制"><a class="markdownIt-Anchor" href="#多版本并发控制"></a> 多版本并发控制</h4>
]]></content>
      <categories>
        <category>数据库</category>
        <category>系统原理</category>
      </categories>
      <tags>
        <tag>数据库系统原理</tag>
        <tag>事务</tag>
        <tag>并发一致性</tag>
        <tag>隔离级别</tag>
        <tag>多版本并发控制</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/archives/de7c53fe.html</url>
    <content><![CDATA[<h4 id="线程池状态"><a class="markdownIt-Anchor" href="#线程池状态"></a> 线程池状态</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<div class="note "><p>变量 **<code>ctl</code>**记录了“<strong>线程池中的任务数</strong>量”和“<strong>线程池的状态</strong>”两个信息。共32位，其中高  3位表示”线程池状态”，低 29 位表示”线程池中的任务数量”。</p>
<ul>
<li>
<p><code>RUNNING</code>           对应高 3 位为 111</p>
<p>处于 <code>RUNNING</code> 状态的线程池能够处理已经接收的任务，以及接收新任务。</p>
</li>
<li>
<p><code>SHUTDOWN</code>         对应高 3 位为 000</p>
<p>处于 <code>SHUTDOWN</code> 状态的线程池能够处理已经接收的任务，不能接收新任务。</p>
</li>
<li>
<p><code>STOP</code>                 对应高 3 位为 001</p>
<p>处于 <code>STOP</code> 状态的线程池不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。</p>
</li>
<li>
<p><code>TIDYING</code>           对应高 3 位为 010</p>
<p>当所有的任务已终止，<code>ctl</code> 记录的”任务数量”为 0，线程池会变为 <code>TIDYING</code> 状态，并执行钩子函数<code>terminated()</code>。</p>
</li>
<li>
<p><code>TERMINATED</code>     对应高 3 位为 011</p>
<p>执行完钩子函数 <code>terminated()</code> 的线程池状态。</p>
</li>
</ul>
<p>处于 <code>RUNNING</code> 状态的线程池调用 <code>shutdown()</code> 会进入 <code>SHUTDOWN</code> 状态；执行 <code>shutdownNow()</code> 会进入 <code>STOP</code> 状态。</p>
</div>
<h4 id="创建线程池"><a class="markdownIt-Anchor" href="#创建线程池"></a> 创建线程池</h4>
<p>通过 <code>ThreadPoolExecutor</code> 构造函数创建线程池：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note "><p>参数含义：</p>
<ul>
<li>
<p><code>corePoolSize</code> – 线程池中核心线程的数量。当向线程池提交一个任务后，线程池会创建一个线程来执行任务，等任务执行完后，如果线程数少于 <code>corePoolSize</code>，线程会继续存在，不会销毁。</p>
</li>
<li>
<p><code>maximumPoolSize</code> – 线程池中允许的最大线程数。</p>
</li>
<li>
<p><code>keepAliveTime</code> – 当线程数多于 <code>corePoolSize</code> 时，多余的线程继续存活 <code>keepAliveTime</code> 时间，等待新任务的到来，超过这个时间没有新任务处理就销毁多余的线程。</p>
</li>
<li>
<p>unit – <code>keepAliveTime</code> 的单位。</p>
</li>
<li>
<p><code>workQueue</code> – 保存等待执行的任务的阻塞队列。只保存用 <code>execute()</code> 提交的实现 <code>Runnable</code> 接口的任务。</p>
<p>常用的阻塞队列包括：</p>
<ul>
<li><code>ArrayBlockingQueue</code> - 基于数组的有界阻塞队列。</li>
<li><code>LinkedBlockingQueue</code> - 基于链表的无解阻塞队列，可以设置为有界。</li>
<li><code>PriorityBlockingQueue</code> - 具有优先级别的阻塞队列</li>
<li><code>SynchronousQueue</code> -</li>
</ul>
</li>
<li>
<p>threadFactory – 创建新线程的工厂。</p>
</li>
<li>
<p>handler – 当线程池中线程数达到了边界，且任务阻塞队列已满的情况下，线程池的处理策略。</p>
<p>有四种策略：</p>
<ul>
<li><code>AbortPolicy</code> - 直接抛出 <code>RejectedExecutionException</code> 异常，默认策略</li>
<li><code>CallerRunsPolicy</code> - 用调用者所在的线程来执行任务</li>
<li><code>DiscardOldestPolicy</code> - 丢弃阻塞队列中靠最前的任务，并执行当前任务</li>
<li><code>DiscardPolicy</code> - 直接丢弃任务</li>
</ul>
</li>
</ul>
</div>
<h5 id="fixedthreadpool"><a class="markdownIt-Anchor" href="#fixedthreadpool"></a> <code>FixedThreadPool</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note "><p><code>corePoolSize</code> 和 <code>maximumPoolSize</code> 都设置为 <code>nThreads</code>，意味着当线程池满时且阻塞队列也已经满时，如果继续提交任务，该线程池不会再新建线程来执行任务，而是直接走拒绝策略。</p>
<p><code>FixedThreadPool</code> 使用的是默认的拒绝策略 <code>AbortPolicy</code>，直接抛出异常。</p>
</div>
<h5 id="singlethreadpool"><a class="markdownIt-Anchor" href="#singlethreadpool"></a> <code>SingleThreadPool</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="cachedthreadpool"><a class="markdownIt-Anchor" href="#cachedthreadpool"></a> <code>CachedThreadPool</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="任务提交"><a class="markdownIt-Anchor" href="#任务提交"></a> 任务提交</h4>
<p>线程池根据不同的业务需求提供了两种方式提交任务：</p>
<ul>
<li>
<p><code>Executor.execute()</code></p>
<p><code>ThreadPoolExecutor</code> 中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">         * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">         * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">         * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">         * and so reject the task.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// 获取当前线程数并与 corePoolSize 比较</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>)) <span class="comment">// 创建新线程</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ExecutorService.submit()</code>。</p>
<p>可以获取该任务执行的 <code>Future</code>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>线程池</tag>
        <tag>ThreadPoolExecutor</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/archives/f7ede91d.html</url>
    <content><![CDATA[<h4 id="java-的跨平台性"><a class="markdownIt-Anchor" href="#java-的跨平台性"></a> Java 的跨平台性</h4>
<p>字节码：</p>
<blockquote>
<p>由 Java 虚拟机（JVM）解释执行的代码，字节码不面向任何具体的操作系统，只面向 JVM。Java 语言通过字节码的形式，一定程度上解决了传统解释型语言执行效率低的问题，同时右保留了解释型语言可移植的特点。</p>
</blockquote>
<p>Java 程序的执行需要先经由 JDK 中的 javac 工具编译成字节码文件（.class 文件），然后再由 JVM 解释执行（没执行一句，把这条语句翻译成机器可以理解的机器码）。解释执行效率相对较低，而程序中通常有些代码会经常被调用执行（热点代码），所以又引入 JIT 编译器，对于热点代码，JIT 编译器会将其对应的机器码保存起来，下次需要的时候直接使用，提高程序执行的效率。</p>
<p><strong>JVM 针对不同的系统有特定的实现，这些不同的实现对于给定的字节码文件，都会给出相同的执行结果。也就是说字节码和 JVM共同实现了 Java “一次编写，到处运行”的特性</strong>。</p>
<span id="more"></span>
<h4 id="switch"><a class="markdownIt-Anchor" href="#switch"></a> switch</h4>
<p>在 Java 5 之前，switch(expr) 中的 expr 只能是 char、byte、short、int；</p>
<p>从 Java 5 开始，引入了枚举类型，expr 也可以是枚举类型；</p>
<p>从 Java 7 开始，expr 还可以是 String 类型。</p>
<p><strong>也就是说目前 expr 的类型可以是 char、byte、short、int、enum、String。</strong></p>
<h4 id="转型"><a class="markdownIt-Anchor" href="#转型"></a> 转型</h4>
<ul>
<li>
<p><code>short s1 = 1; s1 = s1 + 1;</code> 是否正确？</p>
<blockquote>
<p>不对。</p>
<p>因为数值 1 默认是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p>
<p>正确写法是 <code>s1 = (short)(s1 + 1)</code>。</p>
</blockquote>
</li>
<li>
<p><code>short s1 = 1; s1 += 1;</code> 是否正确？</p>
<blockquote>
<p>可以正确编译。</p>
<p>因为 <code>s1 += 1;</code> 就相当于 <code>s1 = (short) (s1 + 1);</code> 其中有<strong>隐含的强制类型转换</strong>。</p>
</blockquote>
</li>
</ul>
<h4 id="访问修饰符"><a class="markdownIt-Anchor" href="#访问修饰符"></a> 访问修饰符</h4>
<blockquote>
<p>访问修饰符用来保护对类、数据、方法的访问，Java 支持 4 种访问权限。</p>
</blockquote>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同包</th>
<th>子类（异包）</th>
<th>异包</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
</tr>
<tr>
<td>protected</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✗</td>
</tr>
<tr>
<td>default</td>
<td>✓</td>
<td>✓</td>
<td>✗</td>
<td>✗</td>
</tr>
<tr>
<td>private</td>
<td>✓</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
</tr>
</tbody>
</table>
<h4 id="final"><a class="markdownIt-Anchor" href="#final"></a> final</h4>
<ol>
<li>修饰数据</li>
</ol>
<blockquote>
<p>声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。</p>
<ul>
<li>对于基本类型，final 使数值不变；</li>
<li>对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。</li>
</ul>
</blockquote>
<ol start="2">
<li>修饰方法</li>
</ol>
<blockquote>
<p>声明方法不能被子类重写。</p>
<p><strong>private 方法隐式地被指定为 final</strong>。</p>
<p>如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。</p>
</blockquote>
<ol start="3">
<li>修饰类</li>
</ol>
<blockquote>
<p>声明类不能被继承。</p>
</blockquote>
<h4 id="static"><a class="markdownIt-Anchor" href="#static"></a> static</h4>
<ol>
<li>静态变量</li>
</ol>
<blockquote>
<p>又称为类变量，也就是说这个变量属于类的，类所有的实例共享静态变量，可以直接通过类名来访问它。</p>
<p>静态变量在内存中只存在一份。</p>
</blockquote>
<ol start="2">
<li>静态方法</li>
</ol>
<blockquote>
<p>静态方法必须有实现，<strong>不能是抽象方法</strong>。</p>
<p>只能访问所属类的静态字段和静态方法。</p>
<p>静态方法中不能有 this 和 super 关键字，因为这两个关键字与具体对象关联。</p>
</blockquote>
<ol start="3">
<li>静态语句块</li>
</ol>
<blockquote>
<p>在类初始化时运行一次。</p>
</blockquote>
<p>初始化顺序：</p>
<blockquote>
<ol>
<li>
<p>静态变量/静态语句块</p>
</li>
<li>
<p>实例变量/普通语句块</p>
</li>
<li>
<p>构造函数</p>
</li>
</ol>
</blockquote>
<p>存在继承的情况下，初始化顺序为：</p>
<blockquote>
<ol>
<li>基类（静态变量/静态语句块）</li>
<li>子类（静态变量/静态语句块）</li>
<li>基类（实例变量/普通语句块）</li>
<li>基类（构造函数）</li>
<li>子类（实例变量/普通语句块）</li>
<li>子类（构造函数）</li>
</ol>
</blockquote>
<h4 id="面向对象三大特性"><a class="markdownIt-Anchor" href="#面向对象三大特性"></a> 面向对象三大特性</h4>
<ul>
<li>
<p>封装</p>
</li>
<li>
<p>继承</p>
</li>
<li>
<p>多态</p>
<blockquote>
<p>允许不同类的对象对同一消息作出响应。</p>
</blockquote>
<blockquote>
<p>多态存在的三个必要条件</p>
<p>一、继承；</p>
<p>二、方法重写；</p>
<p>三、父类引用指向子类对象。</p>
</blockquote>
</li>
</ul>
<h4 id="面向对象五大原则"><a class="markdownIt-Anchor" href="#面向对象五大原则"></a> 面向对象五大原则</h4>
<ul>
<li>
<p><strong>单一职责原则</strong>（Single Responsibility Principle，SRP）</p>
<blockquote>
<p>类的功能要单一。</p>
</blockquote>
</li>
<li>
<p><strong>开放封闭原则</strong>（Open-Close Principle，OCP）</p>
<blockquote>
<p>一个模块对拓展开放，对修改封闭。</p>
</blockquote>
</li>
<li>
<p><strong>里式替换原则</strong>（the Liskov Substitution Principle，LSP）</p>
<blockquote>
<p>基类出现的任何地方都可以用子类替换。</p>
</blockquote>
</li>
<li>
<p><strong>依赖倒置原则</strong>（the Dependency Inversion Principle，DIP）</p>
<blockquote>
<p>高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。</p>
<p>抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</p>
</blockquote>
</li>
<li>
<p>接口分离原则（the Interface Segregation Principle ISP）</p>
</li>
</ul>
<h4 id="java-如何实现多态"><a class="markdownIt-Anchor" href="#java-如何实现多态"></a> Java 如何实现多态</h4>
<ol>
<li>重载（Overload）</li>
</ol>
<blockquote>
<p>多个方法同名，但这些方法的参数在类型、个数、顺序至少有一个不一样。</p>
</blockquote>
<ol start="2">
<li>重写（Override）</li>
</ol>
<blockquote>
<p>存在与继承体系中，指子类对基类的方法进行重新实现。</p>
<p>为了满足里式替换原则，重写有以下三个限制：</p>
<ul>
<li>子类方法的访问权限必须大于等于父类方法；</li>
<li>子类方法的返回类型必须是父类方法返回类型或为其子类型。</li>
<li>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。</li>
</ul>
</blockquote>
<p>动态绑定：</p>
<blockquote>
<p>在执行期间判断引用所指对象的实际类型，根据其实际的类型调用其相应的方法。</p>
</blockquote>
<p>多态的实现基于：</p>
<blockquote>
<ol>
<li>类的继承</li>
<li>方法重写</li>
<li>基类引用指向子类对象</li>
<li>动态绑定</li>
</ol>
</blockquote>
<h4 id="抽象类与接口"><a class="markdownIt-Anchor" href="#抽象类与接口"></a> 抽象类与接口</h4>
<ul>
<li>
<p>抽象类</p>
<blockquote>
<p>抽象类和抽象方法都使用 abstract 关键字进行声明。</p>
<p>如果一个类中包含抽象方法，那么这个类必须声明为抽象类。</p>
<p>抽象类不能实例化。</p>
</blockquote>
</li>
<li>
<p>接口</p>
<blockquote>
<p>接口的字段默认是 public static final 的。</p>
<p>接口的方法默认是 public 的。</p>
<p>在 Java 8 之前，接口可以看成是一个完全抽象的类，也就是说接口不能有任何的方法实现。如果接口添加了一个新的方法，所有实现该接口的类都需要实现这个方法。显然这样的设计维护成本太高。所以从 Java 8 之后，接口也可以拥有默认的方法实现。</p>
<p>Java 9 之后允许将方法定义为 private，这样就能定义某些复用的代码又不会把方法暴露出去。</p>
</blockquote>
</li>
<li>
<p>比较</p>
<blockquote>
<p>抽象类是对类特征的抽象，抽象类和其子类之间是 IS-A 关系，满足里式替换原则，即父类对象可以用子类对象替换。</p>
<p>接口是对行为的抽象，接口和其实现类像是 LIKE-A 关系，比如飞机和鸟都有飞的行为，但没有其他明星的共同特征，此时让飞机和鸟继承一个共同的基类显然不太合理。</p>
<p>一个类只能继承一个基类；但可以实现多个接口。</p>
</blockquote>
</li>
</ul>
<h4 id="默认构造函数"><a class="markdownIt-Anchor" href="#默认构造函数"></a> 默认构造函数</h4>
<p>如果一个类没有显示定义构造函数，编译器会默认生成一个无参的默认构造函数。</p>
<p>如果现实定义了有参的构造函数，则不会默认生成无参的构造函数。</p>
<p>如果一个类有子类，则显示定义了有参的构造函数，需要同时显示定义无参构造。</p>
<blockquote>
<p>因为在执行子类的构造函数之前，如果没有用 super() 来调用父类特定的构造函数，则会调用父类中“无参的构造函数”。如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super() 来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不无参构造函数。</p>
</blockquote>
<h4 id="和-equals-的区别"><a class="markdownIt-Anchor" href="#和-equals-的区别"></a> <code>==</code> 和 <code>equals</code> 的区别</h4>
<ul>
<li>
<p>对于基本类型</p>
<p><code>==</code> 判断两个值是否相等，基本类型没有 <code>equals()</code> 方法。</p>
</li>
<li>
<p>对于引用类型</p>
<p><code>==</code> 判断两个变量是否引用同一个对象，而 <code>equals()</code> 判断引用的对象是否等价。</p>
</li>
</ul>
<p><code>equals</code> 的实现分为以下几步：</p>
<blockquote>
<ol>
<li>检查是否为同一个对象的引用，如果是直接返回 true；</li>
<li>检查是否是同一个类型，如果不是，直接返回 false；</li>
<li>将 Object 对象进行转型；</li>
<li>判断每个关键域是否相等。</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> z;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EqualExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        <span class="keyword">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 1. 检查是否为同一个对象的引用</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 2. 检查是否同一类型</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 转型</span></span><br><span class="line">        EqualExample that = (EqualExample) o;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断引用的对象是否等价，即判断对象的每个字段是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (x != that.x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (y != that.y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> z == that.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="hashcode"><a class="markdownIt-Anchor" href="#hashcode"></a> hashCode</h4>
<p><code>equals()</code> 用来判断两个对象是否等价，<code>hashCode()</code> 返回对象的哈希值。</p>
<p>等价的两个对象哈希值一定相等，哈希值相等的两个对象不一定等价。</p>
<p><code>HashSet</code> 、<code>HashMap</code> 等集合类使用 <code>hashCode()</code> 计算对象应该存储的位置，为了正常工作，要存入<code>HashSet</code> 、<code>HashMap</code> 等集合的类也要重写 <code>hashCode()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(a.hashCode());  <span class="comment">// 96354</span></span><br><span class="line">        System.out.println(b.hashCode());  <span class="comment">// 96354</span></span><br><span class="line"></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(a);</span><br><span class="line">        set.add(b);</span><br><span class="line">        System.out.println(set.size());  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">        MyString c = <span class="keyword">new</span> MyString(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        MyString d = <span class="keyword">new</span> MyString(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(c.hashCode());  <span class="comment">// 1846274136</span></span><br><span class="line">        System.out.println(d.hashCode());  <span class="comment">// 1639705018</span></span><br><span class="line"></span><br><span class="line">        HashSet&lt;MyString&gt; set1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set1.add(c);</span><br><span class="line">        set1.add(d);</span><br><span class="line">        System.out.println(set1.size());  <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>String</code> 类实现了 <code>hashCode()</code>，保证了对象 <code>a</code> 和 <code>b</code> 的哈希值相等，因此只会在 <code>HashSet</code> 中保存一个；</p>
<p>而 <code>MyString</code> 没有实现 <code>hashCode()</code>，对象 <code>c</code> 和 <code>d</code> 的哈希值不等，两个就都存入 <code>HashSet</code>。</p>
<h4 id="值传递"><a class="markdownIt-Anchor" href="#值传递"></a> 值传递</h4>
<p>Java 中参数传递方式只有一种，就是值传递，不存在引用传递。</p>
<h4 id="string-和-字符串常量池"><a class="markdownIt-Anchor" href="#string-和-字符串常量池"></a> String 和 字符串常量池</h4>
<p><code>String</code> 被声明为 <code>final</code>，因此不能继承。</p>
<p>在 Java 8 中，<code>String</code> 内部使用 <code>char[]</code> 数组存储数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Java 9 中，<code>String</code> 内部改用 <code>byte[]</code> 数组存储数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The identifier of the encoding used to encode the bytes in &#123;<span class="doctag">@code</span> value&#125;. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span> coder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>value</code> 数组被声明为 <code>final</code>，这意味着 <code>value</code> 数组初始化之后就不能再引用其它数组。而 <code>String</code> 内部没有改变 <code>value</code> 数组内容的方法，这就保证了 <code>String</code> 不可变。</p>
<p><strong>字符串常量池</strong></p>
<blockquote>
<p>为了提供执行效率，Java 为 8 种基本类型和 <code>String</code> 类型提供了常量池的概念。</p>
<p>String Pool是一个固定大小的 <code>Hashtable</code>，默认值大小长度是1009，如果放进 String Pool的 String非常多，就会造成 Hash 冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是调用 <code>String.intern</code> 时性能会大幅下降。</p>
</blockquote>
<blockquote>
<p>String Pool 保存着所有字符串字面量（literal strings），这些字面量在编译时期就确定。不仅如此，还可以使用 String 的 intern() 方法在运行过程将字符串添加到 String Pool 中。</p>
<p>当一个字符串调用 intern() 方法时，如果 String Pool 中已经存在一个字符串和该字符串值相等（使用 equals() 方法进行确定），那么就会返回 String Pool 中字符串的引用；否则，就会在 String Pool 中添加一个新的字符串，并返回这个新字符串的引用。</p>
<p>在 Java 7 之前，String Pool 被放在运行时常量池中，属于永久代。Java 7 之后，String Pool 被移到堆中。因为永久代的空间有限，在大量使用字符串的场景下会导致 OutOfMemoryError 错误。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">String s3 = s1.intern();</span><br><span class="line">System.out.println(s3 == s1);  <span class="comment">// false</span></span><br><span class="line">String s4 = s2.intern();</span><br><span class="line">System.out.println(s3 == s4);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">String s5 = <span class="string">&quot;abc&quot;</span>; </span><br><span class="line">System.out.println(s3 == s5);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s)); <span class="comment">// 1846274136</span></span><br><span class="line">    System.out.println(System.identityHashCode(s.intern())); <span class="comment">// 1639705018</span></span><br><span class="line">    String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s2)); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(s == s2); <span class="comment">// jdk6: false  jdk7: false</span></span><br><span class="line"></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s3)); <span class="comment">// 1627674070</span></span><br><span class="line">    System.out.println(System.identityHashCode(s3.intern())); <span class="comment">// 1627674070</span></span><br><span class="line">    String s4 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s4)); <span class="comment">// 1627674070</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// jdk6: false jdk7: true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s)); <span class="comment">// 1846274136</span></span><br><span class="line">    String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s2)); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(System.identityHashCode(s.intern())); <span class="comment">// 1639705018</span></span><br><span class="line">    System.out.println(s == s2); <span class="comment">// jdk6: false  jdk7: false</span></span><br><span class="line"></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(System.identityHashCode(s3)); <span class="comment">// 1627674070</span></span><br><span class="line">    String s4 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">    System.out.println(System.identityHashCode(s4)); <span class="comment">// 1360875712</span></span><br><span class="line">    System.out.println(System.identityHashCode(s3.intern())); <span class="comment">// 1360875712</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// jdk6: false jdk7: false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>new String(&quot;abc&quot;)</code> 会创建几个对象？</p>
<blockquote>
<p>2 个</p>
</blockquote>
<h4 id="基本类型的包装类型与缓存池"><a class="markdownIt-Anchor" href="#基本类型的包装类型与缓存池"></a> 基本类型的包装类型与缓存池</h4>
<p>基本类型都有对应的包装类型，如：int 类型的包装类型是 Integer。</p>
<p>对于每种包装类型，都有一个缓存池，如：Integer 缓存池默认大小是 -128～127。</p>
<p>基本类型与对应的包装类型之间的赋值通过自动装箱和拆箱完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer x = <span class="number">2</span>;     <span class="comment">// 装箱 调用了 Integer.valueOf(2)</span></span><br><span class="line"><span class="keyword">int</span> y = x;         <span class="comment">// 拆箱 调用了 X.intValue()</span></span><br></pre></td></tr></table></figure>
<p><code>new Integer(123)</code> 和 <code>Integer.valueOf(123)</code> 的区别：</p>
<blockquote>
<ul>
<li><code>new Integer(123)</code> 每次都会新建一个对象；</li>
<li><code>Integer.valueOf(123)</code> 会使用缓存池中的对象，每次调用都返回同一个对象的引用。</li>
</ul>
</blockquote>
<h4 id="浅拷贝与深拷贝"><a class="markdownIt-Anchor" href="#浅拷贝与深拷贝"></a> 浅拷贝与深拷贝</h4>
<ul>
<li>
<p>浅拷贝</p>
<blockquote>
<p>只拷贝对象的地址，即原引用和拷贝后的引用指向同一对象。</p>
</blockquote>
</li>
<li>
<p>深拷贝</p>
<blockquote>
<p>创建新的对象，原引用和新引用指向两个不同的对象。</p>
</blockquote>
</li>
</ul>
<h4 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h4>
<p>通过反射，可以在运行时获得程序中每一个类型的成员和成员的信息。</p>
<p><strong>获取 <code>Class</code> 对象的三种方式：</strong></p>
<ul>
<li>通过继承自 <code>Object</code> 类的 <code>getClass()</code> 方法</li>
<li>通过每个数据类型（包括基本数据类型）静态的 <code>class</code> 属性</li>
<li>通过 <code>Class</code> 类静态的 <code>forName(&quot;path&quot;)</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="keyword">new</span> String(); </span><br><span class="line">        System.out.println(s.getClass());  <span class="comment">// class java.lang.String</span></span><br><span class="line">        System.out.println(String.class);  <span class="comment">// class java.lang.String</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Class.forName(<span class="string">&quot;com.tw.Main&quot;</span>));  <span class="comment">// class com.tw.Main</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>判断是否为某个类的实例</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String s = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">    System.out.println(s <span class="keyword">instanceof</span> String);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    Class clazz = s.getClass();</span><br><span class="line"></span><br><span class="line">    System.out.println(clazz.isInstance(s));  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>创建实例：</strong></p>
<ul>
<li>通过 <code>Class</code> 类的 <code>newInstance()</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = String.class;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String s = (String) clazz.newInstance();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过 <code>Constructor</code> 类的 <code>newInstance()</code> 方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = String.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">        String s = (String) constructor.newInstance(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法的好处是可以用指定的构造起创建对象。</p>
<p><strong>获取和使用方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods() <span class="keyword">throws</span> SecurityException</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 返回某个类的所有公用（public）方法，包括其继承类的公用方法</span></span><br><span class="line"><span class="keyword">public</span> Method[] getMethods() <span class="keyword">throws</span> SecurityException</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应Class的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</span></span><br><span class="line"><span class="function">           InvocationTargetException</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = ArrayList.class;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ArrayList list = (ArrayList) clazz.newInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Method method = clazz.getMethod(<span class="string">&quot;get&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(method.invoke(list, <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="泛型"><a class="markdownIt-Anchor" href="#泛型"></a> 泛型</h4>
<p>泛型是一种参数化类型的机制，提供了编译期的类型安全，确保只能把正确类型的对象放入集合中，从而避免了在运行时出现<code>ClassCastException</code>。</p>
<ul>
<li>
<p>Java 泛型的工作原理</p>
</li>
<li>
<p>什么是类型擦除</p>
<blockquote>
<p>避免类型膨胀。</p>
</blockquote>
</li>
<li>
<p>泛型中的通配符</p>
<ul>
<li>
<p>限定通配符</p>
<p>对类型进行了限制，有两种限定通配符：</p>
<ol>
<li>
<p><code>List&lt;? extends T&gt;</code></p>
<blockquote>
<p>通过限定类型必须是 <code>T</code> 的子类来设定类型的上界</p>
</blockquote>
</li>
<li>
<p><code>List&lt;? super T&gt;</code></p>
<blockquote>
<p>通过限定类型必须是 <code>T</code> 的父类来设定类型的下界</p>
</blockquote>
</li>
</ol>
</li>
<li>
<p>限定通配符 <code>&lt;?&gt;</code></p>
</li>
</ul>
</li>
<li>
<p>和</p>
</li>
<li>
<p>可以把 <code>List&lt;String&gt;</code> 传递给一个接受 <code>List&lt;Object&gt;</code> 参数的方法吗</p>
<blockquote>
<p>不能。</p>
<p>但是可以传递给接受 <code>List</code> 或 <code>List&lt;?&gt;</code> 参数的方法。</p>
</blockquote>
</li>
<li>
<p><code>Array</code> 中可以用泛型吗</p>
<blockquote>
<p>不能</p>
</blockquote>
</li>
</ul>
<h4 id="java-8-新特性"><a class="markdownIt-Anchor" href="#java-8-新特性"></a> Java 8 新特性</h4>
<ol>
<li>
<p>接口的默认方法</p>
<blockquote>
<p>Java 8 允许为接口添加非抽象的方法实现，用 <code>default</code> 关键字修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   	<span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li>
<p>函数式编程</p>
<ul>
<li>Lambda 表达式</li>
<li>方法引用</li>
<li>函数式接口</li>
</ul>
</li>
<li>
<p>流编程</p>
</li>
</ol>
<h4 id="java-与-c-的区别"><a class="markdownIt-Anchor" href="#java-与-c-的区别"></a> Java 与 C++ 的区别</h4>
<ol>
<li>
<p>纯面向对象</p>
<blockquote>
<p>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object；</p>
<p>C++ 为了兼容 C 即支持面向对象也支持面向过程。</p>
</blockquote>
</li>
<li>
<p>跨平台</p>
<blockquote>
<p>Java 通过虚拟机从而实现跨平台特性；</p>
<p>C++ 依赖于特定的平台。</p>
</blockquote>
</li>
<li>
<p>指针</p>
<blockquote>
<p>Java 没有指针，它的引用可以理解为安全指针；</p>
<p>C++ 具有和 C 一样的指针。</p>
</blockquote>
</li>
<li>
<p>垃圾回收</p>
<blockquote>
<p>Java 支持自动垃圾回收；</p>
<p>C++ 需要手动回收。</p>
</blockquote>
</li>
<li>
<p>多重继承</p>
<blockquote>
<p>Java 不支持多重继承，但可以通过实现多个接口来达到相同目的；</p>
<p>C++ 支持多重继承。</p>
</blockquote>
</li>
<li>
<p>操作符重载</p>
<blockquote>
<p>Java 不支持操作符重载；</p>
<p>C++ 可以。</p>
</blockquote>
</li>
</ol>
<h4 id="对象的初始化"><a class="markdownIt-Anchor" href="#对象的初始化"></a> 对象的初始化</h4>
<p>假设有个 <code>Dog</code> 类，执行 <code>new Dog()</code> 会执行以下步骤：</p>
<ol>
<li>
<p>如果是<strong>首次创建 <code>Dog</code> 类型的对象</strong>或是<strong>首次访问 <code>Dog</code> 类的静态方法或属性</strong>时，JVM 查找并加载 <code>Dog.class</code>。</p>
</li>
<li>
<p>加载完 <code>Dog.class</code> 后，执行静态初始化语句（块）（只执行一次）。</p>
</li>
<li>
<p>在堆上为 <code>Dog</code> 分配足够的内存空间。</p>
</li>
<li>
<p>分配的存储空间首先会被清零，即会将 <code>Dog</code> 对象中的所有基本类型数据设置为默认值，引用被置为 <code>null</code>。</p>
</li>
<li>
<p>执行所有的初始化语句（块）。</p>
</li>
<li>
<p>执行构造器。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializeDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mug mug1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Mug mug2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 执行普通初始化语句（块），每 new 一个对象就执行一次</span></span><br><span class="line">    &#123;</span><br><span class="line">        mug1 = <span class="keyword">new</span> Mug(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;mug1 initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 1. 执行静态初始化语句（块），只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        mug2 = <span class="keyword">new</span> Mug(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;mug2 initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 执行构造器</span></span><br><span class="line">    InitializeDemo() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializeDemo()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InitializeDemo(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializeDemo(int)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside main()&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> InitializeDemo();</span><br><span class="line">        System.out.println(<span class="string">&quot;new InitializeDemo() completed&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> InitializeDemo(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;new InitializeDemo(1) completed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mug</span> </span>&#123;</span><br><span class="line">    Mug(<span class="keyword">int</span> marker) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mug(&quot;</span> + marker + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java容器</title>
    <url>/archives/58b717aa.html</url>
    <content><![CDATA[<h3 id="概览"><a class="markdownIt-Anchor" href="#概览"></a> 概览</h3>
<p>Java 容器主要包括 <code>Collection</code> 和 <code>Map</code>。</p>
<h4 id="collection"><a class="markdownIt-Anchor" href="#collection"></a> Collection</h4>
<p><img data-src="/archives/58b717aa/Collection.png" alt="Collection"></p>
<span id="more"></span>
<ol>
<li><strong>Set</strong></li>
</ol>
<ul>
<li>TreeSet：基于<strong>红黑树</strong>实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</li>
<li>HashSet：基于<strong>哈希表</strong>实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</li>
<li>LinkedHashSet：具有 HashSet 的查找效率，并且内部使用<strong>双向链表</strong>维护元素的插入顺序。</li>
</ul>
<ol start="2">
<li><strong>List</strong></li>
</ol>
<ul>
<li>ArrayList：基于<strong>动态数组</strong>实现，支持随机访问。</li>
<li>Vector：和 ArrayList 类似，但它是<strong>线程安全</strong>的。</li>
<li>LinkedList：基于<strong>双向链表</strong>实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</li>
</ul>
<ol start="3">
<li><strong>Queue</strong></li>
</ol>
<ul>
<li>LinkedList：可以用它来实现双向队列。</li>
<li>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</li>
</ul>
<h4 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h4>
<p><img data-src="/archives/58b717aa/Map.png" alt="Map"></p>
<ul>
<li>TreeMap：基于<strong>红黑树</strong>实现。</li>
<li>HashMap：基于<strong>哈希表</strong>实现。</li>
<li>HashTable：和 HashMap 类似，但它是<strong>线程安全</strong>的，这意味着同一时刻多个线程同时写入 HashTable 不会导致数据不一致。它是遗留类，不应该去使用它，而是使用 ConcurrentHashMap 来支持线程安全，ConcurrentHashMap 的效率会更高，因为 <strong>ConcurrentHashMap 引入了分段锁</strong>。</li>
<li>LinkedHashMap：使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用（LRU）顺序。</li>
</ul>
<h3 id="源码分析"><a class="markdownIt-Anchor" href="#源码分析"></a> 源码分析</h3>
<h4 id="arraylist"><a class="markdownIt-Anchor" href="#arraylist"></a> ArrayList</h4>
<p>基于数组实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用带参构造函数时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用默认构造函数时使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来存储数据的数组，如果 elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，</span></span><br><span class="line"><span class="comment"> * 则在添加第一个数据后 ArrayList 的默认容量就为 DEFAULT_CAPACITY</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包含的元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>
<p><strong>添加元素</strong></p>
<p>添加元素时使用 <code>ensureCapacityInternal()</code> 方法来保证容量足够，如果不够，使用 <code>grow()</code> 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Fail-Fast</strong></p>
<p><code>modCount</code> 用来记录 <code>ArrayList</code> 结构发生变化的次数。结构发生变化是指添加或者删除至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。</p>
<p>在进行序列化或者迭代等操作时，需要比较操作前后 <code>modCount</code> 是否改变，如果改变了需要抛出 <code>ConcurrentModificationException</code>。</p>
<p><strong>与 <code>Vector</code> 的比较</strong></p>
<ul>
<li><code>Vector</code> 是同步的，开销比 <code>ArrayList</code> 要大。最好使用 <code>ArrayList</code> 而不是 <code>Vector</code>，因为同步操作可以由程序员自己来控制；</li>
<li><code>Vector</code> 如果不带参数，扩容默认是原来大小的 2 倍（也可以通过构造函数设置增长的容量），而 <code>ArrayList</code> 是 1.5 倍。</li>
</ul>
<h4 id="linkedlist"><a class="markdownIt-Anchor" href="#linkedlist"></a> LinkedList</h4>
<p>基于双向链表实现，使用 <code>Node</code> 存储节点信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>与 <code>ArrayList</code> 的比较</strong></p>
<p><code>ArrayList</code> 基于动态数组实现，<code>LinkedList</code> 基于双向链表实现。<code>ArrayList</code> 和 <code>LinkedList</code> 的区别可以归结为数组和链表的区别：</p>
<ul>
<li>数组支持随机访问，但插入删除的代价很高，需要移动大量元素，时间复杂度为 <code>O(N)</code>；</li>
<li>链表不支持随机访问，但插入删除只需要改变几个指针指向，时间复杂度为 <code>O(1)</code>。</li>
</ul>
<h4 id="copyonwritelist"><a class="markdownIt-Anchor" href="#copyonwritelist"></a> CopyOnWriteList</h4>
<p><strong>读写分离</strong></p>
<ul>
<li>
<p>写操作在一个<strong>复制数组</strong>上进行，读操作还是在原始数组中进行，读写分离，互不影响。</p>
</li>
<li>
<p>写操作需要<strong>加锁</strong>，防止并发写入时导致写入数据丢失。</p>
</li>
<li>
<p>写操作结束之后需要<strong>把原始数组指向复制数组</strong>。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] a)</span> </span>&#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>CopyOnWriteArrayList</code> 在写操作的同时允许读操作，大大提高了读操作的性能，因此很<strong>适合读多写少的应用场景</strong>。</p>
<p><strong>缺陷</strong>：</p>
<ul>
<li>内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；</li>
<li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。</li>
</ul>
<h4 id="hashmap"><a class="markdownIt-Anchor" href="#hashmap"></a> HashMap</h4>
<p>基于 <strong>数组 + 链表 + 红黑树</strong> 实现</p>
<p><strong>存储结构</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;  <span class="comment">// 定位 Node[] table 索引位置</span></span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>确定索引位置</strong></p>
<p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要定位到索引位置，最直接的方法就是用其 <code>hashCode</code> 值对 <code>HashMap</code> 的数组长度进行取模运算，但是取模运算效率较低，<code>HashMap</code> 通过位运算来获取索引位置，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>索引位置的计算方式是 <code>i = (n - 1) &amp; hash</code>，而 <code>HashMap</code> 中 <code>n = tab.length</code> 总是 2 的幂方，保证了 <code>(n - 1) &amp; hash</code> 与 <code>hash % n</code> 的结果是一致的，但是 <code>&amp;</code> 运算效率比 <code>%</code> 运算更高，这就是为什么 <code>HashMap</code> 的 <code>capacity</code> 总是 2 的幂方的原因。</p>
<p><strong><code>put()</code> 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 判断 table 是否为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 计算索引位置 i，并判断 p = tab[i] 是否为空。是，直接插入新节点</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">      	<span class="comment">// 判断节点是否已经存在</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">        		e = p;</span><br><span class="line">      	<span class="comment">// 判断是否是红黑树</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          	<span class="comment">// 	遍历链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">              	<span class="comment">// 尾插入</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                  	<span class="comment">// 链表长度如果大于阈值，转为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              	<span class="comment">// 找到已存在的节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">// 	已存在节点，更新 value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">  	<span class="comment">// size 加一，并判断是否需要扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>扩容</strong></p>
<p>和扩容有关的主要参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>capacity</code></td>
<td><code>table</code> 的容量大小，默认为 16。 <code>capacity</code> 保证为 2 的 n 次方。</td>
</tr>
<tr>
<td><code>size</code></td>
<td>键值对数量</td>
</tr>
<tr>
<td><code>loadFactor</code></td>
<td>装载因子。<code>table</code> 使用比例。</td>
</tr>
<tr>
<td><code>threshold</code></td>
<td><code>size</code> 的临界值，当 <code>size &gt;= threshold</code> 进行扩容操作。<code>threshold</code> = (<code>capacity * loadFactor</code>)</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Initializes or doubles table size. If null, allocates in accord with initial capacity target held in field threshold. Otherwise, because we are using power-of-two expansion, the elements from each bin must either stay at same index, or move with a power of two offset in the new table.</span></span><br><span class="line"><span class="comment">Returns: the table</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果原有容量已经是 MAXIMUM_CAPACITY，修改 threshold，这样之后就不会再有扩容操作</span></span><br><span class="line">        <span class="comment">// 然后直接返回旧数组，不扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="comment">// 否则，新容量和新 threshold 都扩大一倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">  	<span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">           Node&lt;K,V&gt; e;</span><br><span class="line">           <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                   newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">               <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                   Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                   Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Java 1.7，<code>HashMap</code> 扩容后，同一条链表上的元素需要通过重新计算索引位置后，才能知道会被放在新数组的哪个位置。</p>
<p>而在 Java 1.8 中，不需要重新计算索引位置，只需判断之前计算得到的 <code>hashCode</code> 的下一位是 0 还是 1，即可知道在新数组中的位置。这里优化包括：</p>
<ul>
<li>省去重新计算索引位置的时间；</li>
<li>旧数组每个索引位置下的链表或红黑树中的节点会比较均匀地重新划分到新数组中。</li>
</ul>
<p><strong>与 <code>Hashtable</code> 的比较</strong></p>
<ul>
<li><code>Hashtable</code> 使用 <code>synchronized</code> 来进行同步。</li>
<li><code>HashMap</code> 可以插入键为 <code>null</code> 的 <code>Entry</code>。</li>
<li><code>HashMap</code> 的迭代器是 <code>fail-fast</code> 迭代器。</li>
<li><code>HashMap</code> 不能保证随着时间的推移 <code>Map</code> 中的元素次序是不变的。</li>
</ul>
<h4 id="concurrenthashmap"><a class="markdownIt-Anchor" href="#concurrenthashmap"></a> ConcurrentHashMap</h4>
<p><code>ConcurrentHashMap</code> 和 <code>HashMap</code> 实现上类似，最主要的差别是 <code>ConcurrentHashMap</code> 采用了分段锁（<code>Segment</code>），每个分段锁维护着几个桶，多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 <code>Segment</code> 的个数）。</p>
<p><code>Segment</code> 继承自 <code>ReentrantLock</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>与 <code>HashMap</code> 的比较</p>
<ul>
<li>Java 1.7 之前 <code>ConcurrentHashMap</code>对桶数组进行了分段(<code>Segment</code>)，每一个分段上都用 <code>lock</code> 锁进行保护，相对于<code>HashTable</code> 的 <code>synchronized</code> 锁的粒度更细一些，并发性能更好；从 1.8 开始摒弃了<code>Segment</code> 的概念，并发控制使用 <code>synchronized</code> 和 <code>CAS</code> 来操作。<code>HashMap</code> 没有锁机制，不是线程安全的。</li>
<li><code>HashMap</code> 的键值对允许为 <code>null</code>，而 <code>ConCurrentHashMap</code> 都不允许。</li>
</ul>
<h4 id="hashset"><a class="markdownIt-Anchor" href="#hashset"></a> HashSet</h4>
<h3 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h3>
<h4 id="collection-中的-foreach"><a class="markdownIt-Anchor" href="#collection-中的-foreach"></a> <code>Collection</code> 中的 <code>forEach</code></h4>
<p>以 <code>ArrayList</code> 为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        action.accept(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用 <code>forEach</code> 遍历 <code>Collection</code> 时不能改变 <code>Collection</code> 的结构（即不能添加或删除元素），否则会报 <code>ConcurrentModificationException</code> 异常。</p>
<h4 id="hashmap-的-capacity-为什么设计成-2-的幂方"><a class="markdownIt-Anchor" href="#hashmap-的-capacity-为什么设计成-2-的幂方"></a> <code>HashMap</code> 的 <code>capacity</code> 为什么设计成 2 的幂方</h4>
<p>主要是为了在取模和扩容时做优化。同时为了减少冲突，<code>HashMap</code> 定位哈希桶索引位置时，让键的 <code>hashCode</code> 的高位也参与运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由源码可知，<code>HashMap</code> 在插入数据时，索引位置 <code>i = (n - 1) &amp; hash</code>，这也是为什么 <code>HashMap</code> 的 <code>capacity</code> 总是 2 的幂方的原因，因为只有当 <code>n (capacity)</code> 是 2 的幂方时，才能保证 <code>hash % n</code> 的结果与 <code>(n - 1) &amp; hash</code> 一致，而位运算的效率要高于取模运算。</p>
<h4 id="hashmap-是如何解决哈希冲突的"><a class="markdownIt-Anchor" href="#hashmap-是如何解决哈希冲突的"></a> <code>HashMap</code> 是如何解决哈希冲突的</h4>
<p>哈希：通过散列算法把任意长度的输入，变换成固定长度的输出，该输出就是散列值（哈希值）。</p>
<p>哈希冲突：两个不同的输入值，根据同一散列函数计算出相同的散列值的现象。</p>
<p><code>HashMap</code> 底层数据结构是<strong>数组 + 链表 + 红黑树</strong>，数组的每一个存储单元称为一个桶（<code>bucket</code>）。当向 <code>HashMap</code> 添加键值对时，会根据键的哈希值来定位应该放在哪个 <code>bucket</code> 对应的链表上。哈希值相同的对象组成一个链表，链表长度过长时，<code>HashMap</code> 的增删改查性能都会受到影响。为此，Java 1.8 进行了优化，规定当链表长度超过阈值时（默认为8）时，将链表转化为会红黑树，利用红黑树快速增删改查的特点提高 <code>HashMap</code> 的性能。</p>
<p><strong>拉链法</strong>和<strong>扰动</strong>可以让数据在 <code>bucket</code> 分布更均匀，减少哈希碰撞。</p>
<h4 id="concurrenthashmap-底层实现原理"><a class="markdownIt-Anchor" href="#concurrenthashmap-底层实现原理"></a> <code>ConcurrentHashMap</code> 底层实现原理</h4>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java容器</tag>
        <tag>ArrayList</tag>
        <tag>HashMap</tag>
        <tag>ConcurrentHashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>并发基础</title>
    <url>/archives/46bf65ac.html</url>
    <content><![CDATA[<h4 id="使用线程"><a class="markdownIt-Anchor" href="#使用线程"></a> 使用线程</h4>
<h5 id="实现-runnable-接口"><a class="markdownIt-Anchor" href="#实现-runnable-接口"></a> 实现 <code>Runnable</code> 接口</h5>
<p>需要实现 <code>run()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunnableDemo task = <span class="keyword">new</span> RunnableDemo();</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(task, <span class="string">&quot;线程&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程: i 和 main: i 会交替显示</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h5 id="实现-callable-接口"><a class="markdownIt-Anchor" href="#实现-callable-接口"></a> 实现 <code>Callable</code> 接口</h5>
<p>需要实现 <code>call()</code> 方法，与 <code>Runnable</code> 相比，<code>Callable</code> 有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    String s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CallableDemo</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(<span class="keyword">new</span> CallableDemo(<span class="string">&quot;Callable&lt;String&gt;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程: i 和 main: i 会交替显示</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，实现 <code>Runnable</code> 或 <code>Callable</code> 接口的类本身并不具有线程行为，可以把这些类看作是执行某些任务的类，要使这些任务执行起来还是需要真正的线程来驱动。</p>
<h5 id="继承-thread-类"><a class="markdownIt-Anchor" href="#继承-thread-类"></a> 继承 <code>Thread</code> 类</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadDemo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>); <span class="comment">// 让线程休眠，更好地看到线程交替执行效果</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadDemo(<span class="string">&quot;线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>); <span class="comment">// 让线程休眠，更好地看到线程交替执行效果</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承 <code>Thread</code> 类与实现 <code>Runnable</code> 接口的比较：</p>
<ol>
<li>
<p>实现 <code>Runnable</code> 接口可以更好的解耦。</p>
<blockquote>
<p><code>Runnable</code> 只有一个 <code>run()</code> 方法，定义需要实现的任务;</p>
<p><code>Thread</code> 则负责线程的属性设置和启动等内容。</p>
</blockquote>
</li>
<li>
<p>在某些情况下，实现 <code>Runnable</code> 接口可以提高性能。</p>
<blockquote>
<p>使用继承 <code>Thread</code> 类的方式，每执行一次任务，都需要重新创建一个线程，等任务执行完，线程需要被销毁，增加了额外的开销；</p>
<p>使用实现 <code>Runnable</code> 接口的方式，在任务定义完之后，配合线程池，只需将任务传入线程池，使用线程池中固有的线程来执行任务，而不需要每次都创建销毁线程。</p>
</blockquote>
</li>
<li>
<p>Java 不支持多继承，如果继承了 <code>Thread</code> 类，之后就不能再继承其他类，限制了代码代码的可扩展性。</p>
</li>
</ol>
<h4 id="线程基本机制"><a class="markdownIt-Anchor" href="#线程基本机制"></a> 线程基本机制</h4>
<ul>
<li><strong>休眠（<code>sleep</code>）</strong></li>
</ul>
<p>调用 <code>sleep()</code> 不会释放对象锁。</p>
<p><code>sleep()</code> 可能会抛出 <code>InterruptedException</code>，因为异常不能跨线程传播，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>让步（<code>yield</code>）</strong></li>
</ul>
<p>给线程调度机制一个建议，当前线程的工作已经做得差不多了，可以把 <code>CPU</code> 让给其他线程，当前线程重新进入就绪状态。</p>
<p><code>yield()</code> 只是给一个建议，不一定会被采纳。</p>
<p>调用 <code>yield()</code> 不会释放对象锁。</p>
<ul>
<li>插<strong>队（<code>join</code>）</strong></li>
</ul>
<p>在 <code>A</code> 线程中调用 <code>B.join()</code>，<code>A</code> 线程将被挂起，直到 <code>B</code> 线程结束才恢复，<code>B</code> 线程是一个插队线程。</p>
<p>对 <code>join()</code> 的调用可以被中断，做法是调用插队线程的 <code>interrupt()</code> 方法。</p>
<ul>
<li><strong>中断（<code>interrupt</code>）</strong></li>
</ul>
<p>对于 <code>Java</code> 来说，停止线程的正确方式是调用线程的 <code>interrupt()</code> 方法。</p>
<p>调用线程的 <code>interrupt()</code> 方法，将设置线程的中断状态。如果一个线程已经被阻塞，或正试图执行一个阻塞操作，那么设置这个线程的中断状态将抛出 <code>java.lang.InterruptedException</code> 异常。</p>
<p>为了调用 <code>interrupt()</code>，需要先持有 <code>Thread</code> 对象。新的 <code>concurrent</code> 类库中尽量在避免对 <code>Thread</code> 对象的直接操作，转而尽量通过 <code>Executor</code> 来执行所有操作。</p>
<p>如果在 <code>Executor</code> 上调用 <code>shutdownNow()</code>，将会发送一个 <code>interrupt()</code> 调用给它启动的所有线程。</p>
<p>如果希望只中断某个单一任务，可以通过 <code>submit()</code> 来启动任务，并持有任务的上下文。<code>submit()</code> 返回一个 <code>Future&lt;?&gt;</code>，可以在其上调用 <code>cancel()</code>，如果把 <code>true</code> 传给 <code>cancel()</code>，那么它就可以在该线程上调用 <code>interrupt()</code> 以停止这个线程。</p>
<p><code>I/O</code> 和在 <code>synchronized</code> 块上的阻塞是不可中断的。</p>
<p><code>interrupt()</code> 将会给线程设定一个中断标志，但中断一个阻塞的线程将抛出 <code>InterruptedException</code> 异常，该异常被捕获时将清除线程的中断标志，所以在 <code>catch</code> 子句中，在异常被捕获时这个标志总是为假。</p>
<h4 id="线程状态"><a class="markdownIt-Anchor" href="#线程状态"></a> 线程状态</h4>
<ul>
<li><code>NEW</code></li>
</ul>
<p>创建后还未启动的线程处于这个状态。</p>
<ul>
<li><code>RUNNABLE</code></li>
</ul>
<p>可运行（就绪）状态。可能正在运行，也可能在等待 <code>CPU</code> 调度。</p>
<ul>
<li><code>BLOCKED</code></li>
</ul>
<p>阻塞（等待获取一个对象锁）状态。</p>
<ul>
<li><code>WAITING</code></li>
</ul>
<p>无限期等待其他线程唤醒。</p>
<p>线程进入这种状态可能是调用了以下方法：</p>
<blockquote>
<ul>
<li><code>Object.wait()</code></li>
<li><code>Thread.join()</code></li>
<li><code>LockSupport.park()</code></li>
</ul>
</blockquote>
<ul>
<li><code>TIMED_WAITING</code></li>
</ul>
<p>在有限时间内等待其他线程执行某些操作。</p>
<p>线程进入这种状态可能是调用了以下方法：</p>
<blockquote>
<ul>
<li><code>Thread.sleep(long timeout)</code></li>
<li><code>Object.wait(long timeout)</code></li>
<li><code>Thread.join(long timeout)</code></li>
<li><code>LockSupport.parkNanos(long timeout)</code></li>
<li><code>LockSupport.parkUntil(long timeout)</code></li>
</ul>
</blockquote>
<ul>
<li><code>TERMINATED</code></li>
</ul>
<p>线程终止。</p>
<h4 id="线程同步"><a class="markdownIt-Anchor" href="#线程同步"></a> 线程同步</h4>
<p><code>Java</code> 有两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 <code>JVM</code> 实现的 <code>synchronized</code>，而另一个是 <code>JDK</code> 实现的 <code>ReentrantLock</code>。</p>
<h5 id="synchronized"><a class="markdownIt-Anchor" href="#synchronized"></a> <code>synchronized</code></h5>
<h6 id="synchronized-基本使用"><a class="markdownIt-Anchor" href="#synchronized-基本使用"></a> <code>synchronized</code> 基本使用</h6>
<ul>
<li>同步代码块</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>同步方法</li>
</ul>
<p>锁定调用这个方法的对象 （this）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果某个线程在一个对象上调用了 <code>f()</code>，对于该对象而言，只有等到 <code>f()</code> 调用结束释放了对象锁，其他线程才能调用 <code>f()</code> 和 <code>g()</code>。也即是说，对于一个特定对象来说，其所有的 <code>synchronized</code> 方法共享同一个锁。</p>
<h6 id="synchronized-的实现原理"><a class="markdownIt-Anchor" href="#synchronized-的实现原理"></a> <code>synchronized</code> 的实现原理</h6>
<p><code>Java</code> 中每个对象都有一个 <code>monitor</code> 与之关联，当一个对象的 <code>monitor</code> 被获取后，该对象将处于锁定状态。</p>
<p>在 <code>Java</code> 虚拟机（<code>HotSpot</code>）中，<code>monitor</code> 是基于 <code>ObjectMonitor</code> 实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">  _header       = NULL;</span><br><span class="line">  _count        = <span class="number">0</span>;</span><br><span class="line">  _waiters      = <span class="number">0</span>,</span><br><span class="line">  _recursions   = <span class="number">0</span>;  <span class="comment">// 锁的重入次数</span></span><br><span class="line">  _object       = NULL;</span><br><span class="line">  _owner        = NULL;  <span class="comment">// 持有对象 monitor 的线程</span></span><br><span class="line">  _WaitSet      = NULL;  <span class="comment">// 处于 wait 状态的线程队列</span></span><br><span class="line">  _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">  _Responsible  = NULL ;</span><br><span class="line">  _succ         = NULL ;</span><br><span class="line">  _cxq          = NULL ;</span><br><span class="line">  FreeNext      = NULL ;</span><br><span class="line">  _EntryList    = NULL ;  <span class="comment">// 处于 blocked 状态的线程队列</span></span><br><span class="line">  _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">  _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">  OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>多个线程同时访问一段同步代码时，线程进入 <code>_EntryList</code> 队列中；</p>
</li>
<li>
<p>某个线程获取到对象的 <code>monitor</code> 后，<code>_Owner</code> 指向当前线程，同时 <code>monitor</code> 中的计数器 <code>_count</code> 加1；</p>
</li>
<li>
<p>若持有 <code>monitor</code> 的线程在对象上调用 <code>wait()</code> 方法，将释放该对象 <code>monitor</code>，<code>_owner</code> 变量恢复为 <code>null</code>，<code>_count</code>自减1，同时该线程进入 <code>_WaitSet</code> 集合中等待被唤醒。</p>
</li>
</ul>
<h6 id="synchronized-优化"><a class="markdownIt-Anchor" href="#synchronized-优化"></a> <code>synchronized</code> 优化</h6>
<ul>
<li>自旋锁</li>
</ul>
<div class="note "><p>线程的阻塞和唤醒会使 <code>CPU</code> 从用户态陷入内核态，频繁的阻塞和唤醒操作对 <code>CPU</code> 来说是一项负担很重的工作，会影响并发度。</p>
<p>许多应用，对象锁的锁状态只会持续很短的一段时间。基于这个观察，引入<strong>自旋锁</strong>。所谓自旋锁，就是让线程自旋一段时间，等待锁被释放，这样可以避免让线程挂起（阻塞）。</p>
<p>自旋锁虽然避免了切换线程带来的开销，但自旋占用了 <code>CPU</code> 的时间。如果持有锁的线程很快释放了锁，自旋锁的效率就很高；反之，自旋的线程就会白白消耗处理器的资源，反而会降低性能。所以一般自旋需要限定一段时间或限定自旋的次数，超过规定的时间或次数，还没有获得锁的话就将自旋的线程挂起。</p>
</div>
<ul>
<li>适应性自旋锁</li>
</ul>
<div class="note "><p>适应性自旋锁的工作原理大概是这样的：</p>
<p>对于某个锁，如果自旋成功，那么下次在获取该锁时就会自旋更久，因为虚拟机认为既然上次自旋成功，那么这次自旋也很可能会成功；</p>
<p>反之，如果对于某个锁的获取很少自旋成功，那么下次获取该锁时就自旋很少的时间或在压根不自旋，直接挂起线程，以免自旋浪费时间。</p>
</div>
<ul>
<li>锁消除</li>
</ul>
<div class="note "><p>在有些情况下，如果 <code>JVM</code> 检测到不会有共享数据竞争的问题，就会对其中的同步锁进行消除，节省请求锁的时间。</p>
</div>
<ul>
<li>锁粗化</li>
</ul>
<div class="note "><p>在使用同步锁时，经常需要让同步的作用范围尽可能小，这样同步块内的代码量少，如果存在锁竞争，持有锁的线程能尽快执行完同步块内的代码并释放锁，请求锁的线程也可以尽快地获取锁。</p>
<p>通常这是同步代码的指导原则，但是也有一种情况是，因为加锁和释放锁的操作比较耗时，如果<strong>连续多处有同步代码块</strong>，此时可以考虑将锁的作用范围扩大，将多个加锁的代码块合并为一个，从而减少加锁和解锁操作。</p>
</div>
<ul>
<li>偏向锁</li>
</ul>
<div class="note "><p>引入偏向锁主要目的是：为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径。上面提到了轻量级锁的加锁解锁操作是需要依赖多次 <code>CAS</code> 原子指令的。</p>
<p>使用偏向锁只需要检查是否为偏向锁、锁标识为以及 <code>ThreadID</code> 即可。</p>
</div>
<ul>
<li>轻量级锁</li>
</ul>
<div class="note "><p>当关闭偏向锁功能或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则会尝试获取轻量级锁。</p>
</div>
<h5 id="reentrantlock"><a class="markdownIt-Anchor" href="#reentrantlock"></a> <code>ReentrantLock</code></h5>
<p><strong><code>ReentrantLock</code> 基本使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     lock.lock();  <span class="comment">// block until condition holds</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// ... method body</span></span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="synchronized-和-reentrantlock-的比较"><a class="markdownIt-Anchor" href="#synchronized-和-reentrantlock-的比较"></a> <code>synchronized</code> 和 <code>ReentrantLock</code> 的比较</h5>
<ul>
<li>
<p><code>synchronized</code> 是 <code>JVM</code> 实现的，<code>ReentrantLock</code> 是 <code>JDK</code> 实现的；</p>
</li>
<li>
<p><code>ReentrantLock</code> 阻塞可中断， <code>synchronized</code> 阻塞不可中断；</p>
</li>
<li>
<p>公平锁是指多个线程在等待同一个锁时，必须按照申请锁的先后顺序来依次获得锁。</p>
<p><code>synchronized</code> 锁是非公平的，<code>ReentrantLock</code> 默认也是非公平的，但是可以设置为公平的;</p>
</li>
<li>
<p><code>ReentrantLock</code> 可以同时绑定定多个 <code>Condition</code> 对象；</p>
</li>
<li>
<p>除非需要使用 <code>ReentrantLock</code> 的高级功能，否则<strong>优先使用 <code>synchronized</code></strong>。</p>
</li>
</ul>
<h4 id="线程协作"><a class="markdownIt-Anchor" href="#线程协作"></a> 线程协作</h4>
<p><strong>信号丢失</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T1</span></span><br><span class="line"><span class="keyword">synchronized</span> (sharedMonitor) &#123;</span><br><span class="line">  	&lt;setup condition <span class="keyword">for</span> T2&gt;</span><br><span class="line">    sharedMonitor.notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T2</span></span><br><span class="line"><span class="keyword">while</span> (someCondition) &#123;</span><br><span class="line">  	<span class="comment">// point1</span></span><br><span class="line">    <span class="keyword">synchronized</span> (sharedMonitor) &#123;</span><br><span class="line">      	sharedMonitor.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>T2</code> 先执行，并发现 <code>someCondition</code> 为 <code>true</code>，在 <code>point1</code>，<code>CPU</code> 切换到 <code>T1</code>。</p>
<p><code>T1</code> 执行设置，然后调用 <code>notify()</code>。当 <code>T2</code> 被重新调度，获得 <code>shareMonitor</code> 后继续执行进入 <code>wait()</code>，并释放 <code>shareMonitor</code>。</p>
<p>但是因为 <code>T1</code> 已经执行完毕，不会再调用 <code>notify()</code>，<code>T2</code> 将一直等待这个已经发送过的信号，从而产生死锁。</p>
<p>产生这个问题的原因是在 <code>someCondition</code> 发生了<strong>竞争条件</strong>，<code>T1</code> 和 <code>T2</code> 能否正常协作，取决于 <code>someCondition</code> 的设置和判断顺序。</p>
<p>解决方法是消除在 <code>someCondition</code> 上的竞争条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// T2</span></span><br><span class="line"><span class="keyword">synchronized</span> (sharedMonitor) &#123;</span><br><span class="line">  	<span class="keyword">while</span> (someCondition) &#123;</span><br><span class="line">      	sharedMonitor.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，使用 <code>wait()</code> 的安全方式正是在上述这种方式，在同步代码块中，使用 <code>while</code> 等待某种条件生效。</p>
<p><strong>虚假唤醒</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">   <span class="keyword">if</span> (&lt;condition does not hold&gt;)</span><br><span class="line">       obj.wait(); <span class="comment">// point1</span></span><br><span class="line">   <span class="comment">// point2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面这段代码中，假设有 2 个线程 <code>T1</code> 和 <code>T2</code> 先后获取 <code>obj</code> 对象锁后，<code>if</code> 判断都为假，<code>T1</code> 、<code>T2</code> 进入阻塞状态；</p>
<p>然后有另一个线程 <code>T3</code> 获取了 <code>obj</code> 对象后将 <code>condition</code> 设置为 <code>true</code> ，并调用 <code>notify()</code>，同时唤醒 <code>T1</code>、<code>T2</code>；</p>
<p>假设 <code>T1</code> 竞争获得 <code>obj</code> 对象锁，不会重新判断 <code>condition</code>，而是接着执行 <code>point2</code> 处代码，然后结束允许并释放锁；</p>
<p>最后，<code>T2</code> 终重新获得 <code>obj</code> 对象锁，同样不会重新判断 <code>condition</code>，并接着执行 <code>point2</code> 处代码。如果 <code>T1</code> 执行完后 <code>condition</code> 又为假，<code>T2</code> 因为没有重新判断条件，再执行后续代码就出错了。</p>
<p>这就是虚假唤醒所导致的问题，正确的写法是将 <code>condtion</code> 放在 <code>while</code> 循环里，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">   <span class="keyword">while</span> (&lt;condition does not hold&gt;)</span><br><span class="line">       obj.wait(); <span class="comment">// point1</span></span><br><span class="line">   <span class="comment">// point2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就保证了，线程从 <code>wait()</code> 中返回（被唤醒）后，不会直接执行 <code>point2</code> 处代码，而是接着判断 <code>condition</code>，如果条件不满足，接着进入阻塞状态，保证并发的正确执行。</p>
<h5 id="生产者消费者问题"><a class="markdownIt-Anchor" href="#生产者消费者问题"></a> 生产者消费者问题</h5>
<ul>
<li><strong>使用 <code>BlockingQueue</code> 实现</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueuePC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 这个程序不会自动停止，添加一个 Timer，以便在 100 毫秒后停止</span></span><br><span class="line">        <span class="keyword">new</span> Timer().schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;Aborting&quot;</span>);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        BlockingQueue&lt;Object&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义生产任务</span></span><br><span class="line">        Runnable producer = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.put(<span class="keyword">new</span> Object());</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; produce the &quot;</span> + queue.size() + <span class="string">&quot;th Object&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个生产者线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(producer, <span class="string">&quot;Producer1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(producer, <span class="string">&quot;Producer2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义消费任务</span></span><br><span class="line">        Runnable consumer = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; consume the &quot;</span> + queue.size() + <span class="string">&quot;th Object&quot;</span>);</span><br><span class="line">                    queue.take();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建两个消费者线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(consumer, <span class="string">&quot;Consumer1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(consumer, <span class="string">&quot;Consumer2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>使用 <code>wait + notify/notifyAll</code> 实现</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义简单队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Object&gt; storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        storage = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果容器满了，就阻塞生产者</span></span><br><span class="line">        <span class="keyword">while</span> (storage.size() == capacity) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        storage.add(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 唤醒消费者</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">consume</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果容器为空，就阻塞消费者</span></span><br><span class="line">        <span class="keyword">while</span> (storage.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object o = storage.remove();</span><br><span class="line">        <span class="comment">// 唤醒生产者</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyBlockingQueue storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(MyBlockingQueue storage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                storage.produce();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; produce &quot;</span> + i);</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyBlockingQueue storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(MyBlockingQueue storage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                storage.consume();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; consume &quot;</span> + i);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>使用 <code>await + signal/signalAll</code> 实现</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个简单队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// 定义两个 Condition</span></span><br><span class="line">    <span class="keyword">private</span> Condition notEmpty = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition notFull = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object o)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 容器满了，阻塞生产者，等待唤醒</span></span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity) &#123;</span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            queue.add(o);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 唤醒消费者</span></span><br><span class="line">            notEmpty.signalAll();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object o = queue.remove();</span><br><span class="line">            notFull.signalAll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生产者、消费者代码类似。</p>
<h4 id="线程安全"><a class="markdownIt-Anchor" href="#线程安全"></a> 线程安全</h4>
<p>保证线程安全的方法有以下几种方式。</p>
<h5 id="不可变"><a class="markdownIt-Anchor" href="#不可变"></a> 不可变</h5>
<p>不可变的对象一定是线程安全的，只要一个不可变的对象被正确地构建出来，就不会看到它在多个线程之中处于不一致的状态。多线程环境下，应当尽量使对象成为不可变，来满足线程安全。</p>
<p>不可变类型：</p>
<ul>
<li><code>final</code> 修饰的基本数据类型</li>
<li><code>String</code></li>
<li>枚举类型</li>
<li><code>Number</code> 部分子类</li>
</ul>
<h5 id="互斥同步"><a class="markdownIt-Anchor" href="#互斥同步"></a> 互斥同步</h5>
<p>即使用 <code>synchronized</code> 或 <code>ReentrantLock</code> 对访问共享资源的代码加锁。</p>
<h5 id="非阻塞同步"><a class="markdownIt-Anchor" href="#非阻塞同步"></a> 非阻塞同步</h5>
<p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，互斥同步称为阻塞同步。</p>
<p>互斥同步属于一种悲观的并发策略，认为只要不做正确的同步措施，就肯定会出现问题。所以无论共享数据是否真的会出现竞争，都要进行加锁。</p>
<p>与悲观并发策略相对的是乐观并发策略：先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施（不断地重试，直到成功为止）。这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p>
<p>可以用 <code>CAS</code> 实现非阻塞同步。</p>
<h5 id="threadlocal"><a class="markdownIt-Anchor" href="#threadlocal"></a> <code>ThreadLocal</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalExample1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadLocal threadLocal1 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        ThreadLocal threadLocal2 = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">1</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            threadLocal1.set(<span class="number">2</span>);</span><br><span class="line">            threadLocal2.set(<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ThreadLocal</code> 的底层数据结构：</p>
<p><img data-src="/archives/46bf65ac/ThreadLocalMap.png" alt="ThreadLocalMap"></p>
<p>每个 <code>Thread</code> 都有一个 <code>ThreadLocal.ThreadLocalMap</code> 对象。</p>
<p>当调用一个 <code>ThreadLocal</code> 的 <code>set(T value)</code> 方法时，先得到当前线程的 <code>ThreadLocalMap</code> 对象，然后将 <code>ThreadLocal-&gt;value</code> 键值对插入到该 <code>Map</code> 中。</p>
<p>在一些场景 (尤其是使用线程池) 下，由于 <code>ThreadLocal.ThreadLocalMap</code> 的底层数据结构导致 <code>ThreadLocal</code> 有内存泄漏的情况，应该尽可能在每次使用 <code>ThreadLocal</code> 后手动调用 <code>remove()</code>，以避免出现 <code>ThreadLocal</code> 经典的内存泄漏甚至是造成自身业务混乱的风险。</p>
<h4 id="juc-中的构件"><a class="markdownIt-Anchor" href="#juc-中的构件"></a> <code>J.U.C</code> 中的构件</h4>
<h5 id="countdownlatch"><a class="markdownIt-Anchor" href="#countdownlatch"></a> <code>CountDownLatch</code></h5>
<p>用来同步多个任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     CountDownLatch startSignal = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">     CountDownLatch doneSignal = <span class="keyword">new</span> CountDownLatch(N);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(startSignal, doneSignal)).start();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// do something</span></span><br><span class="line">     <span class="comment">// 主线程做完准备工作后，调用 startSignal 的 countDown()，通知在 startSignal 上等待的   </span></span><br><span class="line">     <span class="comment">// 线程可以开始工作了</span></span><br><span class="line">     startSignal.countDown();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 主线程在做收尾工作前，在 doneSignal 上等待</span></span><br><span class="line">     doneSignal.await(); </span><br><span class="line">     <span class="comment">// do something</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch startSignal;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch doneSignal;</span><br><span class="line">   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) &#123;</span><br><span class="line">     <span class="keyword">this</span>.startSignal = startSignal;</span><br><span class="line">     <span class="keyword">this</span>.doneSignal = doneSignal;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       startSignal.await(); <span class="comment">// 启动这个任务的线程会在 startSignal 上等待</span></span><br><span class="line">       <span class="comment">// do something</span></span><br><span class="line">       doneSignal.countDown(); <span class="comment">// 所有线程执行完后，在 doneSignal 上等待的线程才能执行</span></span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="cyclicbarrier"><a class="markdownIt-Anchor" href="#cyclicbarrier"></a> <code>CyclicBarrier</code></h5>
<p><code>CyclicBarrier</code> 适用于这样的情况：你希望创建一组任务，它们并行地执行工作，然后在进行下一个步骤之前等待，直至所以任务都完成。<code>CyclicBarrier</code> 使得所有的并行任务都将在栅栏处列队，然后再一致地向前移动。</p>
<p><code>CyclicBarrier</code> 作用类似于 <code>CountDownLatch</code>，只是 <code>CountDownLatch</code> 只能触发一次，而 <code>CyclicBarrier</code> 通过调用 <code>reset()</code> 可以重复使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalThread = <span class="number">10</span>;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(totalThread);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalThread; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 1</span></span><br><span class="line">                    cyclicBarrier.await(); <span class="comment">// 每个线程在执行完 1 处代码会等待，直到其他所有线程执行完 1 处代码才会再执行 2 处代码</span></span><br><span class="line">                    <span class="comment">// 2</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line"></span><br><span class="line">        cyclicBarrier.reset();</span><br><span class="line"></span><br><span class="line">        System.out.println(cyclicBarrier.getParties()); <span class="comment">// 10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="semaphore"><a class="markdownIt-Anchor" href="#semaphore"></a> <code>Semaphore</code></h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> clientCount = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalRequestCount = <span class="number">10</span>;</span><br><span class="line">      	<span class="comment">// 信号量控制最多只有 clientCount 并发执行</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(clientCount);</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalRequestCount; i++) &#123;</span><br><span class="line">            executorService.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.print(semaphore.availablePermits() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="blockingqueue"><a class="markdownIt-Anchor" href="#blockingqueue"></a> <code>BlockingQueue</code></h5>
<p><code>BlockingQueue</code> 主要用在生产者消费者场景，在以下情况访问 <code>BlockingQueue</code> 会造成阻塞：</p>
<ul>
<li><code>BlockingQueue</code> 已满的情况下进行入队操作</li>
<li><code>BlockingQueue</code> 为空的情况下进行出队操作</li>
</ul>
<p><code>BlockingQueue</code> 有不同的方法进行入队、出队操作：</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:center">抛出异常</th>
<th style="text-align:center">返回布尔值</th>
<th style="text-align:center">阻塞</th>
<th style="text-align:center">限时等待</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Insert</code></td>
<td style="text-align:center"><code>add(e)</code></td>
<td style="text-align:center"><code>offer(e)</code></td>
<td style="text-align:center"><code>put(e)</code></td>
<td style="text-align:center"><code>offer(e, time, unit)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Remove</code></td>
<td style="text-align:center"><code>remove()</code></td>
<td style="text-align:center"><code>poll()</code></td>
<td style="text-align:center"><code>take()</code></td>
<td style="text-align:center"><code>poll(time, unit)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>Examine</code></td>
<td style="text-align:center"><code>element()</code></td>
<td style="text-align:center"><code>peek()</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>其中限时等待操作在到时后返回 <code>true</code> 或 <code>false</code> 。</p>
<p><code>BlockingQueue</code> 主要实现类：</p>
<ul>
<li><code>ArrayBlockingQueue</code></li>
</ul>
<p>基于数组实现的有界阻塞队列。</p>
<p>可以执行线程访问队列的策略，默认为非公平访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 入队元素 */</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下一个 take, poll, peek 或 remove 的元素下标 */</span></span><br><span class="line">    <span class="keyword">int</span> takeIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下一个 put, offer, 或 add 的元素下标 */</span></span><br><span class="line">    <span class="keyword">int</span> putIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 队列中元素个数 */</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 等待 takes 的 Condition */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 等待 puts 的 Condition */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>入队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Throws:</span></span><br><span class="line"><span class="comment">InterruptedException</span></span><br><span class="line"><span class="comment">NullPointerException */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    checkNotNull(e); <span class="comment">// 检查入队元素是否非空</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count == items.length)</span><br><span class="line">            notFull.await(); <span class="comment">// 如果队列已满，线程阻塞，在 notFull 上等待唤醒</span></span><br><span class="line">        enqueue(e); <span class="comment">// 真正的入队操作</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkNotNull</span><span class="params">(Object v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    items[putIndex] = x;</span><br><span class="line">    <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">        putIndex = <span class="number">0</span>;</span><br><span class="line">    count++;</span><br><span class="line">    notEmpty.signal(); <span class="comment">// 入队一个元素，队列非空，唤醒在 notEmpty 上等待的线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">            notEmpty.await(); <span class="comment">// 队列为空，线程阻塞，在 notEmpty 上等待唤醒</span></span><br><span class="line">        <span class="keyword">return</span> dequeue(); <span class="comment">// 出队</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    E x = (E) items[takeIndex];</span><br><span class="line">    items[takeIndex] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (++takeIndex == items.length)</span><br><span class="line">        takeIndex = <span class="number">0</span>;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</span><br><span class="line">        itrs.elementDequeued(); <span class="comment">// 更新 iterator</span></span><br><span class="line">    notFull.signal(); <span class="comment">// 队列未满，唤醒在 notFull 上等待的线程</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>LinkedBlockingQueue</code></li>
</ul>
<p>基于链表实现的阻塞队列，默认队列长度是 <code>Integer.MAX_VALUE</code>，可以执行队列大小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(E x) &#123; item = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 容量, 默认 Integer.MAX_VALUE */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 元素个数 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表头</span></span><br><span class="line"><span class="comment">     * Invariant: head.item == null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表尾</span></span><br><span class="line"><span class="comment">     * Invariant: last.next == null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 入队锁 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 出队锁 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</span><br></pre></td></tr></table></figure>
<p>入队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// Note: convention in all put/take/etc is to preset local var</span></span><br><span class="line">    <span class="comment">// holding count negative to indicate failure unless set.</span></span><br><span class="line">    <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">    <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">    putLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count.get() == capacity) &#123; <span class="comment">// 队列已满</span></span><br><span class="line">            notFull.await(); <span class="comment">// 线程阻塞，在 notFull 上等待</span></span><br><span class="line">        &#125;</span><br><span class="line">        enqueue(node); <span class="comment">// 入队</span></span><br><span class="line">        c = count.getAndIncrement(); <span class="comment">// count + 1</span></span><br><span class="line">        <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">            notFull.signal();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        putLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">        signalNotEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">    last = last.next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>出队：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    E x;</span><br><span class="line">    <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;</span><br><span class="line">    takeLock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123; <span class="comment">// 队列为空</span></span><br><span class="line">            notEmpty.await(); <span class="comment">// 线程阻塞，在 notEmpty 上阻塞</span></span><br><span class="line">        &#125;</span><br><span class="line">        x = dequeue(); <span class="comment">// 出队</span></span><br><span class="line">        c = count.getAndDecrement(); <span class="comment">// count - 1</span></span><br><span class="line">        <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">            notEmpty.signal(); </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        takeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c == capacity)</span><br><span class="line">        signalNotFull();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node&lt;E&gt; h = head;</span><br><span class="line">    Node&lt;E&gt; first = h.next;</span><br><span class="line">    h.next = h; <span class="comment">// help GC</span></span><br><span class="line">    head = first;</span><br><span class="line">    E x = first.item;</span><br><span class="line">    first.item = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>PriorityBlockingQueue</code></li>
<li><code>DelayQueue</code></li>
</ul>
<h5 id="forkjoin"><a class="markdownIt-Anchor" href="#forkjoin"></a> ForkJoin</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threshold;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> last;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinDemo</span><span class="params">(<span class="keyword">int</span> threshold, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threshold = threshold;</span><br><span class="line">        <span class="keyword">this</span>.first = first;</span><br><span class="line">        <span class="keyword">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (last - first &lt;= threshold) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i &lt;= last; i++) &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = first + (last - first) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            ForkJoinDemo leftTask = <span class="keyword">new</span> ForkJoinDemo(threshold, first, middle);</span><br><span class="line">            leftTask.fork();</span><br><span class="line"></span><br><span class="line">            ForkJoinDemo rightTask = <span class="keyword">new</span> ForkJoinDemo(threshold, middle + <span class="number">1</span>, last);</span><br><span class="line">            rightTask.fork();</span><br><span class="line"></span><br><span class="line">            result = leftTask.join() + rightTask.join();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ForkJoinDemo example = <span class="keyword">new</span> ForkJoinDemo(<span class="number">5</span>, <span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">        <span class="comment">// ForkJoinPool 是一个特殊的线程池，线程数量取决于 CPU 核数</span></span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        Future result = forkJoinPool.submit(example);</span><br><span class="line">        System.out.println(result.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="aqs"><a class="markdownIt-Anchor" href="#aqs"></a> <code>AQS</code></h4>
<p>队列同步器（<code>AbstractQueuedSynchronizer</code>，<code>AQS</code>）是构建锁（<code>ReentrantLock</code>）或其他同步组件（<code>CountDownLatch</code>、<code>CyclicBarrier</code>、<code>Semaphore</code> 等）的基础框架。</p>
<h4 id="cas"><a class="markdownIt-Anchor" href="#cas"></a> <code>CAS</code></h4>
<p>比较并交换（Compare-and-Swap，<code>CAS</code>）。<code>CAS</code> 指令需要有 3 个操作数，分别是内存地址 <code>V</code>、旧的预期值 <code>A</code> 和新值 <code>B</code>。当执行操作时，只有当 <code>V</code> 的值等于 <code>A</code>，才将 <code>V</code> 的值更新为 <code>B</code>。</p>
<p>问题：</p>
<ul>
<li><code>ABA</code> 问题</li>
<li>自旋消耗资源</li>
<li>只能保证一个共享变量的原子操作</li>
</ul>
<h4 id="java内存模型"><a class="markdownIt-Anchor" href="#java内存模型"></a> Java内存模型</h4>
<p><code>Java</code> 内存模型试图屏蔽各种硬件和操作系统的内存访问差异，以实现让 <code>Java</code> 程序在各种平台下都能达到一致的内存访问效果。</p>
<h5 id="主内存与工作内存"><a class="markdownIt-Anchor" href="#主内存与工作内存"></a> 主内存与工作内存</h5>
<p><code>CPU</code> 寄存器的读写速度比内存快几个数量级，为了缓解这种速度矛盾，在它们之间加入了高速缓存。</p>
<p>但是加入高速缓存带来了一个新的问题：<strong>缓存一致性</strong>。</p>
<p>在并发环境中，通常多个线程需要共享主内存中的数据；每个线程有自己的工作内存，线程只能只能操作自己工作内存中的数据，因此需要将主内存中的数据拷贝到工作内存。</p>
<h5 id="内存间的交互操作"><a class="markdownIt-Anchor" href="#内存间的交互操作"></a> 内存间的交互操作</h5>
<p><img data-src="/archives/46bf65ac/%E5%86%85%E5%AD%98%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C.png" alt="内存间交互操作"></p>
<ul>
<li>read：把一个变量的值从主内存读到工作内存</li>
<li>load：把读到的值放入工作内存的变量副本</li>
<li>use：使用变量副本</li>
<li>assign：把一个新值赋给工作内存的变量副本</li>
<li>store：把工作内存中变量副本的值存到主内存</li>
<li>write：把值写入主内存中的变量</li>
<li>lock：作用于主内存的变量</li>
<li>unlock</li>
</ul>
<h5 id="三大特性"><a class="markdownIt-Anchor" href="#三大特性"></a> 三大特性</h5>
<ul>
<li>
<p><strong>原子性</strong></p>
<p>使用继承 <code>Number</code> 类的原子类或者 <code>synchronized</code> 可以保证操作的原子性</p>
</li>
<li>
<p><strong>可见性</strong></p>
<p>一个线程对共享变量的修改，其他线程立刻可见。</p>
<p>使用 <code>volatile</code> 或 <code>synchronized</code> 来保证可见性。</p>
</li>
<li>
<p><strong>有序性</strong></p>
<p>在 <code>Java</code> 内存模型中，允许编译器和处理器对指令进行重排序，重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p>
<p><code>volatile</code> 关键字通过添加<strong>内存屏障</strong>的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前；也可以通过 <code>synchronized</code> 来保证有序性。</p>
</li>
</ul>
<p>总结：</p>
<ul>
<li>使用 <code>synchronized</code> 可以同时保证三大特性</li>
<li><code>volatile</code> 只能保证可见性，无法保证原子性</li>
</ul>
<h5 id="happens-before"><a class="markdownIt-Anchor" href="#happens-before"></a> happens-before</h5>
<p>除了可以用 <code>volatile</code> 和 <code>synchronized</code> 来保证有序性之外，<code>JVM</code> 还规定了先行发生原则（happens-before），让一个操作无需控制就能先于另一个操作完成。</p>
<ul>
<li>
<p>单一线程原则</p>
</li>
<li>
<p>管程锁定原则</p>
<blockquote>
<p>一个 <code>unlock</code> 操作先行发生于后面对同一个锁的 <code>lock</code> 操作。</p>
</blockquote>
</li>
<li>
<p><code>volatile</code> 变量原则</p>
<blockquote>
<p>对一个 <code>volatile</code> 变量的写操作先行发生于后面对这个变量的读操作。</p>
</blockquote>
</li>
<li>
<p>线程启动原则</p>
</li>
<li>
<p>线程加入原则</p>
</li>
<li>
<p>线程中断原则</p>
</li>
<li>
<p>对象终结原则</p>
</li>
<li>
<p>传递性原则</p>
</li>
</ul>
<h4 id="面试题"><a class="markdownIt-Anchor" href="#面试题"></a> 面试题</h4>
<h5 id="start-和-run-的区别"><a class="markdownIt-Anchor" href="#start-和-run-的区别"></a> <code>start()</code> 和 <code>run()</code> 的区别</h5>
<h5 id="sleep-和-wait-的区别"><a class="markdownIt-Anchor" href="#sleep-和-wait-的区别"></a> <code>sleep()</code> 和 <code>wait()</code> 的区别</h5>
<ul>
<li><code>wait</code> 是 <code>Object</code> 类中的方法，<code>sleep</code> 是 <code>Thread</code>类中的方法；</li>
<li><code>wai</code>t 会释放锁，<code>sleep</code> 不会释放锁；</li>
<li><code>wait</code> 只能在同步代码块中使用，<code>sleep</code> 则没有这个要求。</li>
</ul>
<h5 id="提交任务时任务队列满了会发生什么"><a class="markdownIt-Anchor" href="#提交任务时任务队列满了会发生什么"></a> 提交任务时，任务队列满了，会发生什么</h5>
<h5 id="volatile-数组"><a class="markdownIt-Anchor" href="#volatile-数组"></a> <code>volatile</code> 数组</h5>
<h5 id="synchronized-和-volatile-的区别"><a class="markdownIt-Anchor" href="#synchronized-和-volatile-的区别"></a> <code>synchronized</code> 和 <code>volatile</code> 的区别</h5>
<h5 id="悲观锁和乐观锁"><a class="markdownIt-Anchor" href="#悲观锁和乐观锁"></a> 悲观锁和乐观锁</h5>
<ul>
<li>悲观锁</li>
</ul>
<div class="note "><p>悲观的并发策略，认为只要不做正确的同步措施，就肯定会出现问题。所以无论共享数据是否真的会出现竞争，都要进行加锁。</p>
</div>
<ul>
<li>乐观锁</li>
</ul>
<h5 id="threadlocal-造成内存泄漏的原因"><a class="markdownIt-Anchor" href="#threadlocal-造成内存泄漏的原因"></a> <code>ThreadLocal</code> 造成内存泄漏的原因</h5>
<h5 id="linkedblockingqueue-入队出队为什么用不同的锁"><a class="markdownIt-Anchor" href="#linkedblockingqueue-入队出队为什么用不同的锁"></a> <code>LinkedBlockingQueue</code> 入队出队为什么用不同的锁</h5>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>线程池</tag>
        <tag>并发</tag>
        <tag>线程状态</tag>
        <tag>线程同步</tag>
        <tag>线程协作</tag>
        <tag>J.U.C 构件</tag>
      </tags>
  </entry>
</search>
